#!/usr/bin/env dothttp

// This call creates a new schema.
// 
// Request body should contain a `schema` object which should atleast have these properties with `string` values:
// 
// - **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.
// - **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.
// - **`schema`**: Optional. If passed, must be the content of the schema as a `string`.
// 
// Response contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. 
// 
// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.

@name("Create Schema")
POST "https://{{url}}/apis/{{apiId}}/versions/{{apiVersionId}}/schemas"
"x-api-key": "{{apiKey}}"
"Content-Type": "application/json"
json({
    "schema": {
        "language": "yaml",
        "schema": "{}",
        "type": "openapi3"
    }
})


// This call updates an existing schema.
// 
// Request body should contain a `schema` object which should atleast have these properties with `string` values:
// 
// - **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.
// - **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.
// - **`schema`**: Optional. If passed, must be the content of the schema as a `string`.
// 
// Response contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. 
// 
// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.

@name("Update Schema")
PUT "https://{{url}}/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}"
"x-api-key": "{{apiKey}}"
"Content-Type": "application/json"
json({
    "schema": {
        "language": "yaml",
        "schema": "new schema",
        "type": "openapi3"
    }
})


// This call fetches a single schema having the specified id.
// 
// Response contains a `schema` object with all the details related to the schema, namely, `id`, `language`, `type`, `schema` etc. 
// 
// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.

@name("Get Schema")
GET "https://{{url}}/apis/{{apiId}}/versions/{{apiVersionId}}/schemas/{{schemaId}}"
"x-api-key": "{{apiKey}}"



