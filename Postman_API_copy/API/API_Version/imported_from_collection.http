#!/usr/bin/env dothttp

// This call creates a new API version in the specified API.  // // Request body should contain a `version` object which should have fields:// // <table>// <tr>// 	<td>name</td>// 	<td>Required. Name of the API Version</td>// </tr>// <tr>// 	<td>source</td>// 	<td>// 		If specified, it will copy the contents of the specified api version to create a new api verison.// 		<table>// 			<tr>// 				<td>id</td>// 				<td>Required. Id of the apiversion from where the details are to be copied</td>// 			</tr>// 			<tr>// 				<td>schema</td>// 				<td>Boolean. If true then copies the schema from the specified api version</td>// 			</tr>// 			<tr>// 				<td>relations</td>// 				<td>Object. {"&lt;relationType&gt;": true/false}.  // 					Allowed relation types are `mock`, `monitor`, `documentation`, `contracttest`, `integrationtest`, `testsuite`, `environment`// 				Relation types which should be copied over to the new api verison</td>// 			</tr>// 		</table>// 	</td>// </tr>// </table>// // Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api`.// // > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
@name("Create API Version")
POST "https://{{url}}/apis/{{apiId}}/versions"
"Content-Type": "application/json"
"x-api-key": "{{apiKey}}"
data('{
	"version": {
		"name": "1.0",
		"source": {
			"id": "{{apiVersionId}}",
			"schema": true,
			"relations": {
				"monitor": true,
				"mock": true,
				"documentation": true
			}
		}
	}
}')


// This call updates an existing API Version.  // // Request body should contain a `version` object with the fields which need to be updated. Only field which can be updated is `name`.// // Response contains a `version` object with all the details related to the created API Version, namely, `id`, `name`, `api` etc.// // > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
@name("Update an API Version")
PUT "https://{{url}}/apis/{{apiId}}/versions/{{apiVersionId}}"
"x-api-key": "{{apiKey}}"
"Content-Type": "application/json"
data('{
	"version": {
		"name": "2.0"
	}
}')


// This call deletes an existing API Version having the specified id.  // // Response contains an `version` object with `id` of the API Version which was deleted.// // > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
@name("Delete an API Version")
DELETE "https://{{url}}/apis/{{apiId}}/versions/{{apiVersionId}}"
"x-api-key": "{{apiKey}}"


// This call fetches details about the specified API Version.// // The response will contain a `version` object which would contain all the details of the API Version.// // > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
@name("Get an API Version")
GET "https://{{url}}/apis/{{apiId}}/versions/{{apiVersionId}}"
"x-api-key": "{{apiKey}}"


// This call fetches details about the all the API Versions in the specified API.// // The response will contain an array `versions` object which would be a list of all the API Version along with their details.// // > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.
@name("Get All API Versions")
GET "https://{{url}}/apis/{{apiId}}/versions"
"x-api-key": "{{apiKey}}"



