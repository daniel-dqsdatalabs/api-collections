#!/usr/bin/env dothttp

// This endpoint allows the client to retrieve a list of the followers
// they have.
// 
// "Followers" are users that are following other users on the website.
// 
// It supports pagination, each page will contain `80` followers by default.

@name("Followers")
GET "https://{{baseUrl}}/followers/users"
? "page"= "1"
? "per_page"= "80"


// This endpoint allows the client to retrieve a list of the tags
// they follow.

@name("Followed tags")
GET "https://{{baseUrl}}/follows/tags"


// This endpoint allows the client to retrieve a list of readinglist reactions along with the related article for the authenticated user.
// 
// Reading list will be in reverse chronological order base
// on the creation of the reaction.
// 
// It will return paginated reading list items along with the articles
// they refer to. By default a page will contain `30` items

@name("User's reading list")
GET "https://{{baseUrl}}/readinglist"
? "page"= "1"
? "per_page"= "30"


// This endpoint allows the client to retrieve a list of podcast episodes.
// 
// "Podcast episodes" are episodes belonging to podcasts.
// 
// It will only return active podcast episodes that belong to published
// podcasts available on the platform,
// ordered by descending publication date.
// 
// It supports pagination, each page will contain `30` articles by default.

@name("Published podcast episodes")
GET "https://{{baseUrl}}/podcast_episodes"
? "page"= "1"
? "per_page"= "30"
? "username"= "incididunt Lorem"


// This endpoint allows the client to retrieve a list of tags
// that can be used to tag articles.
// 
// It will return tags ordered by popularity.
// 
// It supports pagination, each page will contain `10` tags by default.

@name("Tags")
GET "https://{{baseUrl}}/tags"
? "page"= "1"
? "per_page"= "10"


// This endpoint allows the client to retrieve a user or organization
// profile image information by its corresponding username

@name("User or organization profile picture")
GET "https://{{baseUrl}}/profile_images/:username"


// This endpoint allows the client to retrieve a list of articles
// that are uploaded with a video.
// 
// It will only return published video articles
// ordered by descending popularity.
// 
// It supports pagination, each page will contain `24` articles by default.

@name("Articles with a video")
GET "https://{{baseUrl}}/videos"
? "page"= "1"
? "per_page"= "24"



