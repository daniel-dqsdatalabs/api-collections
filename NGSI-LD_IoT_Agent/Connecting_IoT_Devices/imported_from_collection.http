#!/usr/bin/env dothttp

// Once the IoT Agent is running, You can check the status by making an HTTP request to the exposed port. 
// If the response is blank, this is usually because the MongoDB database holding the context information is not running or not connected.
// 
// >**Troubleshooting:** What if the response is blank ?
// >
// > * To check that a docker container is running try
// >
// >```bash
// >docker ps
// >```
// >
// >You should see several containers running. If `iot-agent` is not running, you can restart the containers as necessary.

@name("IoT Agent - Obtain Version Information")
GET "http://{{iot-agent}}/iot/about"


// Invoking group provision is always the first step in connecting devices since it is always necessary to supply an
// authentication key with each measurement and the IoT Agent will not initially know which URL the context broker is
// responding on.
// 
// It is also possible to set up default commands and attributes for all anonymous devices as well, but this is not done
// within this tutorial as we will be provisioning each device separately.
// 
// This example provisions an anonymous group of devices. It tells the IoT Agent that a series of devices will be sending
// messages to the `IOTA_HTTP_PORT` (where the IoT Agent is listening for **Northbound** communications)
// 
// In the example the IoT Agent is informed that the `/iot/d` endpoint will be used and that devices will authenticate
// themselves by including the token `4jggokgpepnvsb2uv4s40d59ov`. For an UltraLight IoT Agent this means devices will be
// sending GET or POST requests to:
// 
// ```
// http://iot-agent:7896/iot/d?i=<device_id>&k=4jggokgpepnvsb2uv4s40d59ov
// ```
// 
// Which should be familiar UltraLight 2.0 syntax from the
// [previous tutorial](https://github.com/FIWARE/tutorials.IoT-Sensors/tree/NGSI-LD).
// 
// The service group provisioning can also be used to define `attributes` mappings and common `static_attributes`. The
// `attributes` mappings define common aliases for anonymous incoming devices. For example the key `gps` can be defined to
// map the `location` GeoProperty.
// 
// When a measurement from an IoT device is received on the resource URL it needs to be interpreted and passed to the
// context broker. The `entity_type` attribute provides a default `type` for each device which has made a request (in this
// case anonymous devices will be known as `Device` entities. Furthermore the location of the context broker (`cbroker`) is
// needed, so that the IoT Agent can pass on any measurements received to the correct location. `cbroker` is an optional
// attribute - if it is not provided, the IoT Agent uses the context broker URL as defined in the configuration file,
// however it has been included here for completeness.

@name("IoT Agent - Create a Service Group")
POST "http://{{iot-agent}}/iot/services"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
    "services": [
        {
            "apikey": "4jggokgpepnvsb2uv4s40d59ov",
            "cbroker": "http://orion:1026",
            "entity_type": "Device",
            "resource": "/iot/d",
            "attributes": [
                {
                    "object_id": "bpm",
                    "type": "Property",
                    "name": "heartRate",
                    "metadata": {
                        "unitCode": {
                            "type": "Text",
                            "value": "5K"
                        }
                    }
                },
                {
                    "object_id": "s",
                    "name": "status",
                    "type": "Property"
                },
                {
                    "object_id": "gps",
                    "name": "location",
                    "type": "geo:point"
                }
            ],
            "static_attributes": [
                {
                    "name": "category",
                    "type": "Property",
                    "value": "sensor"
                },
                {
                    "name": "supportedProtocol",
                    "type": "Property",
                    "value": "ul20"
                }
            ]
        }
    ]
}')


// The NGSI-LD [specification](https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.03.01_60/gs_cim009v010301p.pdf)
// mandates full URNs when creating context data entities, however the incoming messages from the devices will not be aware
// of this convention. Furthermore the attribute name on the context data entity should match the short names found within
// the associated `@context` file. These mappings can be defined at the service group level as seen in the previous
// request, ot they can be defined by provisioning each device individually.
// 
// Three types of measurement attributes can be provisioned:
// 
// -   `attributes` are mappings of the active readings from the device
// -   `lazy` attributes are only sent on request - The IoT Agent will inform the device to return the measurement
// -   `static_attributes` are as the name suggests static data about the device (such as relationships) passed on to the
//     context broker.
// 
// > **Note**: in the case where individual `id`s are not required, or aggregated data is sufficient the `attributes` can
// > be defined within the provisioning service rather than individually.
// In the request we are associating the device `temperature001` with the URN `urn:ngsi-ld:Device:temperature001` and
// mapping the device reading `t` with the context attribute `temperature` (which is defined as **Property** with
// appropriate meta-data). A `controllingAsset` **Relationship** is also defined as a `static_attribute`, placing the
// device within the **Building** `urn:ngsi-ld:Building:barn001`

@name("IoT Agent - Provision a Sensor")
POST "http://{{iot-agent}}/iot/devices"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
  "devices": [
    {
      "device_id": "temperature001",
      "entity_name": "urn:ngsi-ld:Device:temperature001",
      "entity_type": "Device",
      "timezone": "Europe/Berlin",
      "attributes": [
        {
          "object_id": "t",
          "name": "temperature",
          "type": "Property",
          "metadata": {
            "unitCode": {
              "type": "Text",
              "value": "CEL"
            }
          }
        }
      ],
      "static_attributes": [
        {
          "name": "controlledAsset",
          "type": "Relationship",
          "value": "urn:ngsi-ld:Building:barn001"
        }
      ]
    }
  ]
}')


// You can simulate a dummy IoT device measurement coming from the **Temperature Sensor** device `temperature001`, by
// making the following request.
// 
// A similar request was made in the previous tutorial (before the IoT Agent was connected) when the sprinkler system was
// activated, you will have seen the state of each sensor changing and a Northbound request will be logged in the device
// monitor.
// 
// In this tutorial, now that the IoT Agent is connected, the service group has defined the endpoint upon which the IoT
// Agent is listening (`iot/d`) and the API key used to authenticate the request (`4jggokgpepnvsb2uv4s40d59ov`). Since both
// of these are recognized from the request, the measurement is valid.
// 
// Because we have specifically provisioned the device (`temperature001`) - the IoT Agent is able to map attributes before
// raising a request with the Orion Context Broker.

@name("Dummy Device  - Measurement")
POST "http://localhost/iot/d"
"Content-Type": "text/plain"
? "k"= "4jggokgpepnvsb2uv4s40d59ov"
? "i"= "temperature001"
data('t|3')


// You can see that a measurement has been recorded, by retrieving the entity data from the context broker. Don't forget to
// add the `fiware-service` and `fiware-service-path` headers.
// 
// The response shows that the **Temperature Sensor** device with `id=temperature001` has been successfully identified by
// the IoT Agent and mapped to the entity `id=urn:ngsi-ld:Device:temperature001`. This new entity has been created within
// the context data. The `t` attribute from the dummy device measurement request has been mapped to the more meaningful
// `temperature` attribute within the context. As you will notice, an `observedAt` attribute has been added to the metadata
// of the attribute - this represents the last time the entity and attribute have been updated, and is automatically added
// to each new entity because the `IOTA_TIMESTAMP` environment variable was set when the IoT Agent was started up.

@name("Context Broker - Read the Temperature Sensor")
GET "http://{{orion}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:temperature001"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Link": "<{{ngsi-context.jsonld}}>; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json""
? "attrs"= "temperature"


// By provisioning the service group, it is also possible to open the IoT Agent to receive readings from anonymous devices.
// For example it would be unnecessary to provision each individual device if all necessary data is available direct from
// the device itself.
// 
// For example, consider this request to the `/iot/d` endpoint:
// 
// 
// Because the resource endpoint has previously been defined within the service group and the API Key matches, this is
// recognised as a valid measure and therefore a new Entity is created in the context broker with attributes mapped to
// based on the knowledge of the service group

@name("Unprovisioned Dummy Device  - Measurement")
POST "http://localhost/iot/d"
"Content-Type": "text/plain"
? "k"= "4jggokgpepnvsb2uv4s40d59ov"
? "i"= "motion003"
data('c|1')


// As you can see, the Entity type and `static_attributes` from the service group have been copied over to the entity in
// the context broker, however since the measure `c|1` does not have a mapping, the name of the Property has been copied
// directly from the received measure.

@name("Context Broker - Read the Device provisioned by Service Group")
GET "http://{{orion}}/ngsi-ld/v1/entities/"
"NGSILD-Tenant": "openiot"
"NGSILD-Path": "/"
"Link": "<{{ngsi-context.jsonld}}>; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json""
? "type"= "Thing"


// Provisioning an actuator is similar to provisioning a sensor. This time an `endpoint` attribute holds the location where
// the IoT Agent needs to send the UltraLight command and the `commands` array includes a list of each command that can be
// invoked. The example below provisions a water with the `deviceId=water001`. The endpoint is
// `http://iot-sensors:3001/iot/water001` and it can accept the `on` command. The `transport=HTTP` attribute defines the
// communications protocol to be used.

@name("IoT Agent - Provision an Actuator via a Command")
POST "http://{{iot-agent}}/iot/devices"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
  "devices": [
    {
      "device_id": "water001",
      "entity_name": "urn:ngsi-ld:Device:water001",
      "entity_type": "Device",
      "protocol": "PDI-IoTA-UltraLight",
      "transport": "HTTP",
      "endpoint": "http://context-provider:3001/iot/water001",
      "commands": [ 
        {
          "name": "on",
          "type": "command"
        },
        {
          "name": "off",
          "type": "command"
        }
       ],
       "static_attributes": [
         {"name":"controllingAsset", "type": "Relationship","value": "urn:ngsi-ld:Building:barn001"}
    	]
    }
  ]
}
')


// Before we wire-up the context broker, we can test that a command can be send to a device by making a PATCH request
// directly to the IoT Agent's North Port using the `/ngsi-ld/v1/entities/` endpoint. It is this endpoint that will
// eventually be invoked by the context broker once we have connected it up. To test the configuration you can run the
// command directly as shown:
// 
// If you are viewing the device monitor page, you can also see the state of the water sprinkler change.
// 
// ![](https://fiware.github.io/tutorials.IoT-Agent/img/water-on.gif)

@name("IoT Agent - Invoke a Command")
PATCH "http://{{iot-agent}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:water001/attrs/on"
"NGSILD-Tenant": "openiot"
"NGSILD-Path": "/"
"Content-Type": "application/json"
"Link": "<{{ngsi-context.jsonld}}>; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json""
data('{ 

		"type": "Property", 
		"value": "x" 

}')


// Provisioning an actuator is similar to provisioning a sensor. This time an `endpoint` attribute holds the location where
// the IoT Agent needs to send the UltraLight command and the `commands` array includes a list of each command that can be
// invoked. The example below provisions a water with the `deviceId=water001`. The endpoint is
// `http://iot-sensors:3001/iot/water001` and it can accept the `on` command. The `transport=HTTP` attribute defines the
// communications protocol to be used.

@name("IoT Agent - Provision an Actuator via a Bidirectional Attribute")
POST "http://{{iot-agent}}/iot/devices"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
  "devices": [
    {
      "device_id": "water001",
      "entity_name": "urn:ngsi-ld:Device:water001",
      "entity_type": "Device",
      "protocol": "PDI-IoTA-UltraLight",
      "transport": "HTTP",
      "endpoint": "http://context-provider:3001/iot/water001",
      "attributes": [
          {
          "name":"on",
          "type":"Property",
          "expression": "${@on}",
          "reverse": [
            {
              "object_id":"on",
              "type": "Property",
              "expression": "${@on}"
            }
          ]
        },
        {
          "name":"off",
          "type":"Property",
          "expression": "${@off}",
          "reverse": [
            {
              "object_id":"off",
              "type": "Property",
              "expression": "${@off}"
            }
          ]
        }
      ],
       "static_attributes": [
         {"name":"controllingAsset", "type": "Relationship","value": "urn:ngsi-ld:Building:barn001"}
    	]
    }
  ]
}
')


// Before we wire-up the context broker, we can test that a command can be send to a device by making a PATCH request
// directly to the IoT Agent's North Port using the `/ngsi-ld/v1/entities/` endpoint. It is this endpoint that will
// eventually be invoked by the context broker once we have connected it up. To test the configuration you can run the
// command directly as shown:
// 
// If you are viewing the device monitor page, you can also see the state of the water sprinkler change.
// 
// ![](https://fiware.github.io/tutorials.IoT-Agent/img/water-on.gif)

@name("IoT Agent - Invoke a Command Copy")
PATCH "http://{{iot-agent}}/ngsi-ld/v1/entities/urn:ngsi-ld:Device:water001/attrs/on"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{ 

		"type": "Property", 
		"value": " " 

}')


// Provisioning a device which offers both commands and measurements is merely a matter of making an HTTP POST request with
// both `attributes` and `command` attributes in the body of the request.
// 

@name("IoT Agent - Provision a Filling Station")
POST "http://{{iot-agent}}/iot/devices"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
  "devices": [
    {
      "device_id": "filling001",
      "entity_name": "urn:ngsi-ld:Device:filling001",
      "entity_type": "FillingLevelSensor",
      "protocol": "PDI-IoTA-UltraLight",
      "transport": "HTTP",
      "endpoint": "http://context-provider:3001/iot/filling001",
      "commands": [
        {
          "name": "add",
          "type": "command"
        },
        {
          "name": "remove",
          "type": "command"
        }
      ],
      "attributes": [
        {
          "object_id": "f",
          "name": "fillingLevel",
          "type": "Number",
          "metadata": {
            "unitCode": {
              "type": "Text",
              "value": "CAL"
            }
          }
        }
      ],
       "static_attributes": [
        {
          "name": "controllingAsset",
          "type": "Relationship",
          "value": "urn:ngsi-ld:Building:barn001"
        }
      ]
    }
  ]
}')


// Similarly, a **Tractor** with two commands (`start` and `stop`) and two attributes can be provisioned as follows:
// 
// The measures from the Tractor (e.g. `gps`) have already been defined within the service group and do not need to be
// repeated here.

@name("IoT Agent - Provision a Tractor")
POST "http://{{iot-agent}}/iot/devices"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
    "devices": [
        {
            "device_id": "tractor001",
            "entity_name": "urn:ngsi-ld:Device:tractor001",
            "entity_type": "Tractor",
            "protocol": "PDI-IoTA-UltraLight",
            "transport": "HTTP",
            "endpoint": "http://context-provider:3001/iot/tractor001",
            "commands": [
                {
                    "name": "start",
                    "type": "command"
                },
                {
                    "name": "stop",
                    "type": "command"
                }
            ],
            "static_attributes": [
                {
                    "name": "category",
                    "type": "Property",
                    "value": [
                        "sensor",
                        "actuator"
                    ]
                },
                {
                    "name": "controllingAsset",
                    "type": "Relationship",
                    "value": "urn:ngsi-ld:Building:barn001"
                }
            ]
        }
    ]
}')


// This example lists all provisioned devices by making a GET request to the `/iot/devices` endpoint.
// 
// The response includes all the commands and attributes mappings associated with all provisioned IoT devices.

@name("IoT Agent - List all Provisioned Devices")
GET "http://{{iot-agent}}/iot/devices"
"fiware-service": "openiot"
"fiware-servicepath": "/"



