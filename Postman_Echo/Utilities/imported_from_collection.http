#!/usr/bin/env dothttp

// This endpoint allows one to instruct the server which status code to respond with.// // Every response is accompanied by a status code. The status code provides a summary of the nature of response sent by the server. For example, a status code of `200` means everything is okay with the response and a code of `404` implies that the requested URL does not exist on server. // A list of all valid HTTP status code can be found at the [List of Status Codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) wikipedia article. When using Postman, the response status code is described for easy reference.// // Note that if an invalid status code is requested to be sent, the server returns a status code of `400 Bad Request`.
@name("Response Status Code")
GET "https://postman-echo.com/status/200"


// This endpoint allows one to recieve streaming http response using [chunked transfer encoding](https://en.wikipedia.org/wiki/Chunked_transfer_encoding) of a configurable length.// // A streaming response does not wait for the entire response to be generated on server before flushing it out. This implies that for a fairly large response, parts of it can be streamed to the requestee as and when it is generated on server. The client can then take actions of processing this partially received data.
@name("Streamed Response")
GET "https://postman-echo.com/stream/5"


// Using this endpoint one can configure how long it takes for the server to come back with a response. Appending a number to the URL defines the time (in seconds) the server will wait before responding.// // Note that a maximum delay of 10 seconds is accepted by the server.
@name("Delay Response")
GET "https://postman-echo.com/delay/2"


// If a response of an endpoint requires to send data beyond the basic English / ASCII character set, the `charset` parameter in the `Content-Type` response header defines the character encoding policy.// // This endpoint returns an `UTF8` character encoded response body with text in various languages such as Greek, Latin, East Asian, etc. Postman can interpret the character encoding and use appropriate methods to display the character set in responses.
@name("Get UTF8 Encoded Response")
GET "https://postman-echo.com/encoding/utf8"


// This endpoint returns the response using [gzip compression algoritm](https://en.wikipedia.org/wiki/Gzip).// The uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `gzip` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.// // HTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.// To know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.
@name("GZip Compressed Response")
GET "https://postman-echo.com/gzip"


// This endpoint returns the response using [deflate compression algoritm](https://en.wikipedia.org/wiki/DEFLATE). // The uncompressed response is a JSON string containing the details of the request sent by the client. For this endpoint to work, one should request with `Accept-encoding` header containing `deflate` as part of its value. Postman supports gzip, deflate and SDCH decoding and automatically sends them as part of the request.// // HTTP Compression allows the server to send responses in a compressed format, which is uncompressed by the client before processing. This reduces network bandwidth consumption at the cost of increase in CPU usage.// To know more about this, refer the [HTTP Compression](https://en.wikipedia.org/wiki/HTTP_compression) wikipedia article.
@name("Deflate Compressed Response")
GET "https://postman-echo.com/deflate"


// A simple `GET` request to return the IP address of the source request in the following `JSON` format:// // ```json// {//   ip: "request-ip-address"// }// ```
@name("IP address in JSON format")
GET "https://postman-echo.com/ip"



