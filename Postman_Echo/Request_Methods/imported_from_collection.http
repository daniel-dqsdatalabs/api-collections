#!/usr/bin/env dothttp

// The HTTP `GET` request method is meant to retrieve data from a server. The data
// is identified by a unique URI (Uniform Resource Identifier). 
// 
// A `GET` request can pass parameters to the server using "Query String 
// Parameters". For example, in the following request,
// 
// > http://example.com/hi/there?hand=wave
// 
// The parameter "hand" has the value "wave".
// 
// This endpoint echoes the HTTP headers, request parameters and the complete
// URI requested.

@name("GET Request")
GET "https://postman-echo.com/get"
? "foo1"= "bar1"
? "foo2"= "bar2"


// The HTTP `POST` request method is meant to transfer data to a server 
// (and elicit a response). What data is returned depends on the implementation
// of the server.
// 
// A `POST` request can pass parameters to the server using "Query String 
// Parameters", as well as the Request Body. For example, in the following request,
// 
// > POST /hi/there?hand=wave
// >
// > <request-body>
// 
// The parameter "hand" has the value "wave". The request body can be in multiple
// formats. These formats are defined by the MIME type of the request. The MIME 
// Type can be set using the ``Content-Type`` HTTP header. The most commonly used 
// MIME types are:
// 
// * `multipart/form-data`
// * `application/x-www-form-urlencoded`
// * `application/json`
// 
// This endpoint echoes the HTTP headers, request parameters, the contents of
// the request body and the complete URI requested.

@name("POST Raw Text")
POST "https://postman-echo.com/post"
data('This is expected to be sent back as part of response body.')


// The HTTP `POST` request method is meant to transfer data to a server 
// (and elicit a response). What data is returned depends on the implementation
// of the server.
// 
// A `POST` request can pass parameters to the server using "Query String 
// Parameters", as well as the Request Body. For example, in the following request,
// 
// > POST /hi/there?hand=wave
// >
// > <request-body>
// 
// The parameter "hand" has the value "wave". The request body can be in multiple
// formats. These formats are defined by the MIME type of the request. The MIME 
// Type can be set using the ``Content-Type`` HTTP header. The most commonly used 
// MIME types are:
// 
// * `multipart/form-data`
// * `application/x-www-form-urlencoded`
// * `application/json`
// 
// This endpoint echoes the HTTP headers, request parameters, the contents of
// the request body and the complete URI requested when data is sent as a form parameter.

@name("POST Form Data")
POST "https://postman-echo.com/post"
data({
    "foo1": [
        "bar1"
    ],
    "foo2": [
        "bar2"
    ]
})


// The HTTP `PUT` request method is similar to HTTP `POST`. It too is meant to 
// transfer data to a server (and elicit a response). What data is returned depends on the implementation
// of the server.
// 
// A `PUT` request can pass parameters to the server using "Query String 
// Parameters", as well as the Request Body. For example, in the following 
// raw HTTP request,
// 
// > PUT /hi/there?hand=wave
// >
// > <request-body>
// 
// 

@name("PUT Request")
PUT "https://postman-echo.com/put"
data('This is expected to be sent back as part of response body.')


// The HTTP `PATCH` method is used to update resources on a server. The exact
// use of `PATCH` requests depends on the server in question. There are a number
// of server implementations which handle `PATCH` differently. Technically, 
// `PATCH` supports both Query String parameters and a Request Body.
// 
// This endpoint accepts an HTTP `PATCH` request and provides debug information
// such as the HTTP headers, Query String arguments, and the Request Body.

@name("PATCH Request")
PATCH "https://postman-echo.com/patch"
data('This is expected to be sent back as part of response body.')


// The HTTP `DELETE` method is used to delete resources on a server. The exact
// use of `DELETE` requests depends on the server implementation. In general, 
// `DELETE` requests support both, Query String parameters as well as a Request 
// Body.
// 
// This endpoint accepts an HTTP `DELETE` request and provides debug information
// such as the HTTP headers, Query String arguments, and the Request Body.

@name("DELETE Request")
DELETE "https://postman-echo.com/delete"
data('This is expected to be sent back as part of response body.')



