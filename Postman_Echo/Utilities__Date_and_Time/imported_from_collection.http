#!/usr/bin/env dothttp

// A simple `GET` request to `/time/now` to return the current timestamp as a UTC string.
// 
// ```
// Fri, 04 Nov 2016 09:00:46 GMT
// ```

@name("Current UTC time")
GET "https://postman-echo.com/time/now"


// A simple `GET` request to `/time/valid` to determine the validity of the timestamp, (current by default).
// This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.
// 
// Responses are provided in JSON format, with a valid key to indicate the result. The response code is `200`.
// 
// ```
// {
//   valid: true/false
// }
// ```

@name("Timestamp validity")
GET "https://postman-echo.com/time/valid"
? "timestamp"= "2016-10-10"


// A simple `GET` request to `/time/format` to convert the timestamp to any desired valid format.
// 
// This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.
// 
// Responses are provided in JSON format, with a `format` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.
// 
// ```
// {
//   format: "formatted-timestamp"
// }
// ```

@name("Format timestamp")
GET "https://postman-echo.com/time/format"
? "timestamp"= "2016-10-10"
? "format"= "mm"


// A simple `GET` request to `/time/unit` to extract the specified timestamp unit (as provided in the `unit` query parameter). The default unit returned is the `year`.
// 
// This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.
// 
// Responses are provided in JSON format, with a `unit` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.
// 
// ```
// {
//   unit: "extracted-timestamp-unit"
// }
// ```

@name("Extract timestamp unit")
GET "https://postman-echo.com/time/unit"
? "timestamp"= "2016-10-10"
? "unit"= "day"


// A simple `GET` request to `/time/add` to add units of time to the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).
// 
// This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.
// 
// Responses are provided in JSON format, with a `sum` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.
// 
// ```
// {
//   sum: "sum of (provided / current) and provided timestamps"
// }
// ```

@name("Time addition")
GET "https://postman-echo.com/time/add"
? "timestamp"= "2016-10-10"
? "years"= "100"


// A simple `GET` request to `/time/subtract` to subtract units of time from the specified / current timestamp (as provided in the `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds` query parameters).
// 
// This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.
// 
// Responses are provided in JSON format, with a `difference` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.
// 
// ```
// {
//   difference: "difference between (provided / current) and provided timestamps"
// }
// ```

@name("Time subtraction")
GET "https://postman-echo.com/time/subtract"
? "timestamp"= "2016-10-10"
? "years"= "50"


// A simple `GET` request to `/time/start` to return a relative timstamp in the past from the specified / current timestamp (as provided in the `unit` query parameter).
// 
// For instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`
// 
// This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.
// 
// Responses are provided in JSON format, with a `start` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.
// 
// ```
// {
//   start: "A timestamp from the past, depending on the `unit` specified"
// }
// ```

@name("Start of time")
GET "https://postman-echo.com/time/start"
? "timestamp"= "2016-10-10"
? "unit"= "month"


// A simple `GET` request to `/time/object` to return the current / provided timestamp as a JSON object.
// 
// For instance, if the `unit` has been specified as `month`, the returned timestamp would indicate the beginning of the current month. Similar results are returned for other units of time, like: `years`, `months`, `days`, `hours`, `minutes`, `seconds`, and `milliseconds`
// 
// This endpoint accepts `timestamp`, `locale`, `format`, and `strict` query parameters to construct the date time instance to check against.
// 
// Responses are provided in JSON format. The response code is `200` for valid query parameters, and `400` otherwise.
// 
// ```
// {
//   years: 2016,
//   months: 10,
//   days: 10,
//   hours: 23,
//   minutes: 34,
//   seconds: 20,
//   milliseconds: 980
// }
// ```

@name("Object representation")
GET "https://postman-echo.com/time/object"
? "timestamp"= "2016-10-10"


// A simple `GET` request to `/time/before` to check if the provided timestamps is before a comparison `target` (query parameter).
// 
// This endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.
// 
// Responses are provided in JSON format, with a `before` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.
// 
// ```
// {
//   before: true/false
// }
// ```

@name("Before comparisons")
GET "https://postman-echo.com/time/before"
? "timestamp"= "2016-10-10"
? "target"= "2017-10-10"


// A simple `GET` request to `/time/after` to check if the provided timestamps is after a comparison `target` (query parameter).
// 
// This endpoint accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.
// 
// Responses are provided in JSON format, with a `after` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.
// 
// ```
// {
//   after: true/false
// }
// ```

@name("After comparisons")
GET "https://postman-echo.com/time/after"
? "timestamp"= "2016-10-10"
? "target"= "2017-10-10"


// A simple `GET` request to `/time/between` to check if the provided timestamp is between a range specified by the `start` and `end` query parameters. A resolution limit can also be specified by the `unit` query parameter.
// 
// For instance, for a resolution `unit` of `month`,
// `2016-10-05` does lie between `2016-11-02` and `2016-09-01`.
// 
// This endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.
// 
// Responses are provided in JSON format, with a `between` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.
// 
// ```
// {
//   between: true/false
// }
// ```

@name("Between timestamps")
GET "https://postman-echo.com/time/between"
? "timestamp"= "2016-10-10"
? "start"= "2017-10-10"
? "end"= "2019-10-10"


// A simple `GET` request to `/time/leap` to check if the provided/current timestamp belongs to a leap year.
// 
// This endpoint also accepts `timestamp`, `locale`, `format`, `strict`, and `target` query parameters to construct the date time instance to check against.
// 
// Responses are provided in JSON format, with a `leap` key to indicate the result. The response code is `200` for valid query parameters, and `400` otherwise.
// 
// ```
// {
//   leap: true/false
// }
// ```

@name("Leap year check")
GET "https://postman-echo.com/time/leap"
? "timestamp"= "2016-10-10"



