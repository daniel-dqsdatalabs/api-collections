#!/usr/bin/env dothttp

// Get user status by id from the server.
// ##### Permissions
// Must be authenticated.

@name("Get user status")
GET "https://{{baseURL}}/users/{{user_id}}/status"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Manually set a user's status. When setting a user's status, the status will remain that value until set "online" again, which will return the status to being automatically updated based on user activity.
// ##### Permissions
// Must have `edit_other_users` permission for the team.

@name("Update user status")
PUT "https://{{baseURL}}/users/{{user_id}}/status"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
json({
    "status": "away"
})


// Get the unread mention and message counts for a team for the specified user.
// ##### Permissions
// Must be the user or have `edit_other_users` permission and have `view_team` permission for the team.

@name("Get unreads for a team")
GET "https://{{baseURL}}/users/{{user_id}}/teams/{{team_id}}/unread"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Switch a user's login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.
// 
// To switch from email to OAuth2/SAML, specify `current_service`, `new_service`, `email` and `password`.
// 
// To switch from OAuth2/SAML to email, specify `current_service`, `new_service`, `email` and `new_password`.
// 
// To switch from email to LDAP/AD, specify `current_service`, `new_service`, `email`, `password`, `ldap_ip` and `new_password` (this is the user's LDAP password).
// 
// To switch from LDAP/AD to email, specify `current_service`, `new_service`, `ldap_ip`, `password` (this is the user's LDAP password), `email`  and `new_password`.
// 
// Additionally, specify `mfa_code` when trying to switch an account on LDAP/AD or email that has MFA activated.
// 
// ##### Permissions
// No current authentication required except when switching from OAuth2/SAML to email.

@name("Switch login method")
POST "https://{{baseURL}}/users/login/switch"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Update the password for a user using a one-use, timed recovery code tied to the user's account. Only works for non-SSO users.
// ##### Permissions
// No permissions required.

@name("Reset password")
POST "https://{{baseURL}}/users/password/reset"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a page of OAuth 2.0 client applications authorized to access a user's account.
// ##### Permissions
// Must be authenticated as the user or have `edit_other_users` permission.

@name("Get authorized OAuth apps")
GET "https://{{baseURL}}/users/{{user_id}}/oauth/apps/authorized"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
? "page"= "0"
? "per_page"= "60"



// Set a user's profile image based on user_id string parameter.
// ##### Permissions
// Must be logged in as the user being updated or have the `edit_other_users` permission.

@name("Set user's profile image")
POST "https://{{baseURL}}/users/{{user_id}}/image"
"Authorization": "Bearer {{token}}"
"Content-Type": "multipart/form-data"
files(
	("image", "{{image}}")
)


// Get a list of audit by providing the user GUID.
// ##### Permissions
// Must be logged in as the user or have the `edit_other_users` permission.

@name("Get user's audits")
GET "https://{{baseURL}}/users/{{user_id}}/audits"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image.
// ##### Permissions
// Must be logged in as the user or have the `edit_other_users` permission.

@name("Generate MFA secret")
POST "https://{{baseURL}}/users/{{user_id}}/mfa/generate"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Generate a user access token that can be used to authenticate with the Mattermost REST API.
// 
// __Minimum server version__: 4.1
// 
// ##### Permissions
// Must have `create_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission.

@name("Create a user access token")
POST "https://{{baseURL}}/users/{{user_id}}/tokens"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get all channel members on a team for a user.
// ##### Permissions
// Logged in as the user and `view_team` permission for the team. Having `manage_system` permission voids the previous requirements.

@name("Get channel members for user")
GET "https://{{baseURL}}/users/{{user_id}}/teams/{{team_id}}/channels/members"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a page of user access tokens for users on the system. Does not include the actual authentication tokens. Use query parameters for paging.
// 
// __Minimum server version__: 4.7
// 
// ##### Permissions
// Must have `manage_system` permission.

@name("Get user access tokens")
GET "https://{{baseURL}}/users/tokens"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
? "page"= "0"
? "per_page"= "60"



// Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query paremeters for paging.
// 
// __Minimum server version__: 4.1
// 
// ##### Permissions
// Must have `read_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission.

@name("Get user access tokens")
GET "https://{{baseURL}}/users/{{user_id}}/tokens"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
? "page"= "0"
? "per_page"= "60"



// Get a user object by providing a user email. Sensitive information will be sanitized out.
// ##### Permissions
// Requires an active session but no other permissions.

@name("Get a user by email")
GET "https://{{baseURL}}/users/email/{{email}}"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a list of user statuses by id from the server.
// ##### Permissions
// Must be authenticated.

@name("Get user statuses by id")
POST "https://{{baseURL}}/users/status/ids"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
data('List of user ids to fetch')


// Get a user access token. Does not include the actual authentication token.
// 
// __Minimum server version__: 4.1
// 
// ##### Permissions
// Must have `read_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission.

@name("Get a user access token")
GET "https://{{baseURL}}/users/tokens/{{token_id}}"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system.
// ##### Permissions
// No permissions required.

@name("Send verification email")
POST "https://{{baseURL}}/users/email/verify/send"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a user object by providing a username. Sensitive information will be sanitized out.
// ##### Permissions
// Requires an active session but no other permissions.

@name("Get a user by username")
GET "https://{{baseURL}}/users/username/{{login_id}}"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a list of users based on a provided list of usernames.
// ##### Permissions
// Requires an active session but no other permissions.

@name("Get users by usernames")
POST "https://{{baseURL}}/users/usernames"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
data('List of usernames')


// Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out.
// ##### Permissions
// Must be logged in as the user being updated or have the `edit_other_users` permission.

@name("Get user's sessions")
GET "https://{{baseURL}}/users/{{user_id}}/sessions"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Send an email containing a link for resetting the user's password. The link will contain a one-use, timed recovery code tied to the user's account. Only works for non-SSO users.
// ##### Permissions
// No permissions required.

@name("Send password reset email")
POST "https://{{baseURL}}/users/password/reset/send"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a list of tokens based on search criteria provided in the request body. Searches are done against the token id, user id and username.
// 
// __Minimum server version__: 4.7
// 
// ##### Permissions
// Must have `manage_system` permission.

@name("Search tokens")
POST "https://{{baseURL}}/users/tokens/search"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
data('Search criteria')


// Create a new user on the system.
// ##### Permissions
// No permission required but user creation can be controlled by server configuration.

@name("Create a user")
POST "https://{{baseURL}}/users"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
? "iid"= "{{invite_id}}"
json({
    "email": "user2@test.com",
    "username": "user2",
    "password": "test123",
    "allow_marketing": true
})


// Get the total unread messages and mentions for a channel for a user.
// ##### Permissions
// Must be logged in as user and have the `read_channel` permission, or have `edit_other_usrs` permission.

@name("Get unread messages")
GET "https://{{baseURL}}/users/{{user_id}}/channels/{{channel_id}}/unread"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Revoke a user access token and delete any sessions using the token.
// 
// __Minimum server version__: 4.1
// 
// ##### Permissions
// Must have `revoke_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission.

@name("Revoke a user access token")
POST "https://{{baseURL}}/users/tokens/revoke"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Re-enable a personal access token that has been disabled.
// 
// __Minimum server version__: 4.4
// 
// ##### Permissions
// Must have `create_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission.

@name("Enable personal access token")
POST "https://{{baseURL}}/users/tokens/enable"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a user a object. Sensitive information will be sanitized out.
// ##### Permissions
// Requires an active session but no other permissions.

@name("Get a user")
GET "https://{{baseURL}}/users/{{user_id}}"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a user a object. Sensitive information will be sanitized out.
// ##### Permissions
// Requires an active session but no other permissions.

@name("Get my user")
GET "https://{{baseURL}}/users/me"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Activates multi-factor authentication for the user if `activate` is true and a valid `code` is provided. If activate is false, then `code` is not required and multi-factor authentication is disabled for the user.
// ##### Permissions
// Must be logged in as the user being updated or have the `edit_other_users` permission.

@name("Update a user's MFA")
PUT "https://{{baseURL}}/users/{{user_id}}/mfa"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Lists the current user's stored preferences in the given category.
// ##### Permissions
// Must be logged in as the user being updated or have the `edit_other_users` permission.

@name("List a user's preferences by category")
GET "https://{{baseURL}}/users/{{user_id}}/preferences/{{category}}"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Update a user's system-level roles. Valid user roles are "system_user", "system_admin" or both of them. Overwrites any previously assigned system-level roles.
// ##### Permissions
// Must have the `manage_roles` permission.

@name("Update a user's roles")
PUT "https://{{baseURL}}/users/{{user_id}}/roles"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
json({
    "roles": "system_user system_admin"
})


// Get the count for unread messages and mentions in the teams the user is a member of.
// ##### Permissions
// Must be logged in.

@name("Get team unreads for a user")
GET "https://{{baseURL}}/users/{{user_id}}/teams/unread"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
? "exclude_team"= "{{exclude_team}}"



// Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.
// ##### Permissions
// Must be logged in as the user being updated or have the `edit_other_users` permission.

@name("Patch a user")
PUT "https://{{baseURL}}/users/{{user_id}}/patch"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
json({
    "authdata": null
})


// Disable a personal access token and delete any sessions using the token. The token can be re-enabled using `/users/tokens/enable`.
// 
// __Minimum server version__: 4.4
// 
// ##### Permissions
// Must have `revoke_user_access_token` permission. For non-self requests, must also have the `edit_other_users` permission.

@name("Disable personal access token")
POST "https://{{baseURL}}/users/tokens/disable"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a list of the user's preferences.
// ##### Permissions
// Must be logged in as the user being updated or have the `edit_other_users` permission.

@name("Get the user's preferences")
GET "https://{{baseURL}}/users/{{user_id}}/preferences"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a list of team members for a user. Useful for getting the ids of teams the user is on and the roles they have in those teams.
// ##### Permissions
// Must be logged in as the user or have the `edit_other_users` permission.

@name("Get team members for a user")
GET "https://{{baseURL}}/users/{{user_id}}/teams/members"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Deactivates the user by archiving its user object.
// ##### Permissions
// Must be logged in as the user being deactivated or have the `edit_other_users` permission.

@name("Deactivate a user account.")
DELETE "https://{{baseURL}}/users/{{user_id}}"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Delete a list of the user's preferences.
// ##### Permissions
// Must be logged in as the user being updated or have the `edit_other_users` permission.

@name("Delete user's preferences")
POST "https://{{baseURL}}/users/{{user_id}}/preferences/delete"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
data('List of preference object')


// Revokes all user sessions from the provided user id and session id strings.
// ##### Permissions
// Must be logged in as the user being updated or have the `edit_other_users` permission.
// __Minimum server version__: 4.4

@name("Revoke all active sessions for a user")
POST "https://{{baseURL}}/users/{{user_id}}/sessions/revoke/all"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Verify the email used by a user to sign-up their account with.
// ##### Permissions
// No permissions required.

@name("Verify user email")
POST "https://{{baseURL}}/users/email/verify"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Updates a user's authentication method. This can be used to change them to/from LDAP authentication for example.
// 
// __Minimum server version__: 4.6
// ##### Permissions
// Must have the `edit_other_users` permission.

@name("Update a user's authentication method")
PUT "https://{{baseURL}}/users/{{user_id}}/auth"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a user's profile image based on user_id string parameter.
// ##### Permissions
// Must be logged in.

@name("Get user's profile image")
GET "http://ir-plugin-test.test.mattermost.cloud/plugins/com.mattermost.plugin-incident-response/api/v1/incidents"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"


// Update user active or inactive status.
// 
// __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__
// ##### Permissions
// User can deactivate themself.
// User with `manage_system` permission can activate or deactivate a user.

@name("Update user active status")
PUT "https://{{baseURL}}/users/{{user_id}}/active"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
json({
    "active": false
})


// Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.
// 
// Since server version 4.0, some basic sorting is available using the `sort` query parameter. Sorting is currently only supported when selecting users on a team.
// ##### Permissions
// Requires an active session and (if specified) membership to the channel or team being selected from.

@name("Get users")
GET "https://{{baseURL}}/users"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
? "page"= "0"
? "per_page"= "60"
? "in_team"= "{{in_team}}"
? "not_in_team"= "{{not_in_team}}"
? "in_channel"= "{{in_channel}}"
? "not_in_channel"= "{{not_in_channel}}"
? "without_team"= "{{without_team}}"
? "sort"= "{{sort}}"



// Attach a mobile device id to the currently logged in session. This will enable push notiofications for a user, if configured by the server.
// ##### Permissions
// Must be authenticated.

@name("Attach mobile device")
PUT "https://{{baseURL}}/users/sessions/device"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of `team_id` and `channel_id` to filter results further.
// ##### Permissions
// Requires an active session and `view_team` and `read_channel` on any teams or channels used to filter the results further.

@name("Autocomplete users")
GET "https://{{baseURL}}/users/autocomplete"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
"X-Requested-With": "XMLHttpRequest"
? "in_team"= "{{team_id}}"
? "in_channel"= "{{channel_id}}"
? "limit"= "25"


// Get a page of flagged posts of a user provided user id string. Selects from a channel, team or all flagged posts by a user.
// ##### Permissions
// Must be user or have `manage_system` permission.

@name("Get a list of flagged posts")
GET "https://{{baseURL}}/users/{{user_id}}/posts/flagged"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
? "team_id"= "{{team_id}}"
? "channel_id"= "{{channel_id}}"
? "page"= "0"
? "per_page"= "60"



// Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server.
// ##### Permissions
// Requires an active session and `read_channel` and/or `view_team` permissions for any channels or teams specified in the request body.

@name("Search users")
POST "https://{{baseURL}}/users/search"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
data('Search criteria')


// Revokes a user session from the provided user id and session id strings.
// ##### Permissions
// Must be logged in as the user being updated or have the `edit_other_users` permission.

@name("Revoke a user session")
POST "https://{{baseURL}}/users/{{user_id}}/sessions/revoke"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in.
// ##### Permissions
// No permission required.

@name("Check MFA")
POST "https://{{baseURL}}/users/mfa"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Update a user's password. New password must meet password policy set by server configuration. Current password is required if you're updating your own password.
// ##### Permissions
// Must be logged in as the user the password is being changed for or have `manage_system` permission.

@name("Update a user's password")
PUT "https://{{baseURL}}/users/{{user_id}}/password"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a list of teams that a user is on.
// ##### Permissions
// Must be authenticated as the user or have the `manage_system` permission.

@name("Get a user's teams")
GET "https://{{baseURL}}/users/{{user_id}}/teams"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Get a list of users based on a provided list of user ids.
// ##### Permissions
// Requires an active session but no other permissions.

@name("Get users by ids")
POST "https://{{baseURL}}/users/ids"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
data('List of user ids')


// Get all the channels on a team for a user.
// ##### Permissions
// Logged in as the user, or have `edit_other_users` permission, and `view_team` permission for the team.

@name("Get channels for user")
GET "https://{{baseURL}}/users/{{user_id}}/teams/{{team_id}}/channels"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Save a list of the user's preferences.
// ##### Permissions
// Must be logged in as the user being updated or have the `edit_other_users` permission.

@name("Save the user's preferences")
PUT "https://{{baseURL}}/users/{{user_id}}/preferences"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
data('List of preference object')


// Gets a single preference for the current user with the given category and name.
// ##### Permissions
// Must be logged in as the user being updated or have the `edit_other_users` permission.

@name("Get a specific user preference")
GET "https://{{baseURL}}/users/{{user_id}}/preferences/{{category}}/name/{{preference_name}}"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"



// Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored.
// ##### Permissions
// Must be logged in as the user being updated or have the `edit_other_users` permission.

@name("Update a user")
PUT "https://{{baseURL}}/users/{{user_id}}"
"Authorization": "Bearer {{token}}"
"Content-Type": "application/json"
data('User object that is to be updated')



