#!/usr/bin/env dothttp

// A website has an API that returns stuff like text and images to display on your computer.
// 
// 1. **Send** this request, and then take a look at the response on the bottom. The **Pretty** tab of the response body shows the HTML skeleton of the webpage. The **Raw** tab shows the raw response from the server. The **Preview** tab looks kind of like the webpage in our browser, except with JavaScript and images disabled.
// 1. Look under the **Tests** tab in Postman. People usually write tests under the **Tests** tab. But you can write code to run after Postman receives a server response. For example, let’s add some JavaScript to scrape the webpage returned from the server. We’ll use [cheerio](https://cheerio.js.org/) to scrape all the hyperlinks. It’s one of the libraries that comes preinstalled in [the Postman Sandbox](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/).

@name("HTTP cats website")
GET "https://http.cat/"


// 1. We see `{{statusCode}}` at the end of the URL. The curly braces syntax allows you to use defined variables in the text fields. But wait, we haven’t defined a variable called `statusCode` yet.
// 1. Look under the **Pre-request Script** tab in Postman. People use pre-request scripts for setting up their main request, for example calculating or retrieving a variable. Let’s do that now. Under the **Pre-request Script** tab, we see code to retrieve all of our scraped hyperlinks and remove one to be used in this request. We also save this data as a variable so that it can be accessed in the main request. 
// 1. We can continue cycling through all the status codes remaining in `allCodes` by continuing to hit **Send**.
// 1. It can be tricky to see exactly what Postman is sending to the server since `{{statusCode}}` isn't defined until the pre-request script runs when the request is sent. Open the [Postman console](https://learning.postman.com/docs/sending-requests/troubleshooting-api-requests/#using-the-console) for more visibility into the network calls and log statements.
// 
// ![[422 unprocessable entity](https://http.cat/422)](https://http.cat/422)

@name("Get one cat")
GET "https://http.cat{{statusCode}}/"


// The let's you use HTML, CSS, and JavaScript to render HTML under the **Visualize** tab of the response viewer. Typically, this is used to visualizer the server response.
// 
// In this example, we can ignore the Postman Echo URL and any other information about this request. Instead, look under the **Pre-request Script** tab. We retrieve the `allCodes` environment variable, and then loop through all the responses with [Handlebars](https://handlebarsjs.com/). We can use the [Postman visualizer](https://learning.postman.com/docs/sending-requests/visualizer/) to create an image gallery or anything else we can style with HTML, CSS, and JavaScript.
// 
// ![[gallery](https://i.imgur.com/kEZIc74.png)](https://i.imgur.com/kEZIc74.png)

@name("Get all cats")
GET "https://postman-echo.com/get"



