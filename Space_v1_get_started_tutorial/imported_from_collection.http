#!/usr/bin/env dothttp

// <img src="https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/nasa.jpg" width="200px">
// 
// GET request for Astronomy Picture of the Day from NASA
// ===
// 
// Sending this request will return a picture posted by NASA. Review [documentation](https://api.nasa.gov/api.html#apod) for the NASA API.
// 
// Start in the Postman request builder. 
// 
//   - Method: Select `GET` from the dropdown menu of HTTP methods.
// 
//   - URL: Enter the URL endpoint provided by NASA - `https://api.nasa.gov/planetary/apod`
// 
//   - Parameters: This request will work without any additional parameters, and default to using NASA's demo key. However, we can choose to add query string parameters to our request. Click the Params button to reveal a key-value editor. As you input parameters, they are automatically added to the query string in the URL bar above.
// 
// Under the Postman **Tests** tab, we can write scripts in JavaScript to execute any logic after the request is sent. 
// 
// Postman tests are a good way to ensure that you're getting the correct, anticipated responses from your requests. You can include custom scripts to execute additional logic too.
// 
// [![tests tab](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/APODtests.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/APODtests.png)
// 
// - Under the Postman **Tests** tab, the first test ensures a successful 200 response status code.  
// - The second test will parse the JSON response object, and set environment variables (title, URL, etc.) that can be accessed in subsequent requests when the entire collection is run.
// - The third bit of code controls the workflow sequence and designates which request in the same collection to run next, instead of the next request in the list.
// 
// Read more about [writing tests](https://www.getpostman.com/docs/postman/scripts/test_scripts) and [controlling the workflow](https://www.getpostman.com/docs/postman/collection_runs/building_workflows) in the Postman docs.  

@name("Get the astronomy pic of the day")
GET "https://api.nasa.gov/planetary/apod"
? "api_key"= "DEMO_KEY"
? "hd"= "True"


// <img src="https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurLogo.png" width="200px">
// 
// Imgur access tokens are only valid for 1 month. We could add the access_token value to our environment under a new `imgurAccessToken` key, the same way we previously added our Imgur credentials to Postman, but we'd have to come back in a month and update our key.
// 
// Instead, let's automate the authorization process to make sure we always have a valid token. 
// 
// First, we will use [Imgur's OAuth 2.0 process](https://apidocs.imgur.com/#authorization-and-oauth) to get a refresh token. 
// 
// In the Postman app, under a new request (separate from this example collection), click on the **Authorization** tab, select OAuth 2.0, click on the **Get New Access Token** button, and fill in these values:
//     - Token Name: can be anything
//     - Auth URL: `https://api.imgur.com/oauth2/authorize`
//     - Access Token URL: `https://api.imgur.com/oauth2/token`
//     - Client ID: {{imgurClientId}}
//     - Client Secret: {{imgurClientSecret}}
//     - Grant Type: Authorization Code
//     - Request access token locally: checked
//   
// [![Postman OAuth 2.0](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurAccessTokenModal.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurAccessTokenModal.png) 
// 
// Click on **Request Token** to initiate the OAuth 2.0 flow authorizing the Postman app to connect to your Imgur account.
// 
// [![Imgur Oauth](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurOauth.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurOauth.png) 
//   
// Once that is completed, add the `refresh_token` value to your environment under the `imgurRefreshToken` key, the same way you added your Imgur credentials to Postman in Step 2.
//    
// [![Imgur refresh token](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/refreshTokenOauth.jpg)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/refreshTokenOauth.jpg) 
//   
// Now, we can submit a request using our `refresh_token` to get a new `access_token`.
// 
//   - Method: `POST`
// 
//   - URL: `https://api.imgur.com/oauth2/token`
// 
//   - Body: Under the **Body** tab of our second request, add the required parameter values using double curly braces to access our environment variables.
// 
// [![Imgur Authorization Request Body](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurAuthBody.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurAuthBody.png) 
// 
// Under the **Tests** tab, we can write scripts in JavaScript to execute any logic after the request is sent. Looking closer at the Imgur response object, we can parse the JSON object to retrieve and store our data, like a new access token.
// 
// [![Imgur Get Access Token](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurGetAccessToken_censored.jpg)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurGetAccessToken_censored.jpg) 
// 
// Let's set our environment variable based on the response from this request using Postmanâ€™s `setEnvironmentVariable()` method and pass in our key and value. 
// 
// [![Imgur Set Access Token](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurSetAccessToken.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurSetAccessToken.png) 
// 
// Creating an environment variable allows us to access this stored value in subsequent requests when the entire collection is run with our environment.
// 
// Read more about [OAuth 2.0 authentication](https://www.getpostman.com/docs/postman/sending_api_requests/authorization#oauth-20) and [environment variables](https://www.getpostman.com/docs/postman/environments_and_globals/variables) in the Postman docs.
//   

@name("Get Imgur auth token")
POST "https://api.imgur.com/oauth2/token"
files(
	("refresh_token", "{{imgurRefreshToken}}"),
	("client_id", "{{imgurClientId}}"),
	("client_secret", "{{imgurClientSecret}}"),
	("grant_type", "refresh_token")
)


// <img src="https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgur.png">
// 
// Upload an image to Imgur under your account
// ===
// 
// Usage of the Imgur API requires registration of your application. Review [documentation for the Imgur API](https://apidocs.imgur.com/). If you don't already have one, create an Imgur account, and [register a new application](https://api.imgur.com/oauth2/addclient).
// 
// We will be using the [image upload endpoint](https://apidocs.imgur.com/#226cd4dd-e8a2-8513-90d2-637c90b3ded5) from Imgur.
// 
// - In the Postman request builder, we've selected the `POST` method from the dropdown, and entered the `https://api.imgur.com/3/upload` endpoint in the URL bar.
// - Under the Postman **Headers** tab, we've entered an `Authorization` key with the environment variable of our new access token, accessed via the variable name surrounded by double curly brackets. Running our collection with the corresponding environment template will automatically populate this variable with the value stored in the environment template.
// 
//   [![update environment variable](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurAccessToken1.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurAccessToken1.png)
// 
// - Under the Postman **Body** tab, we've entered a few body parameters to include in the image upload. For the `image` key, we will use a URL for an image as the value. We can access the environment variable that we created in the previous request within this collection, by once again using double curly brackets surrounding the environment variable name (e.g. `{{spaceUrl}}`).
// 
//   [![format imgur parameters](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurAuthBody.png)](https://s3.amazonaws.com/postman-static-getpostman-com/postman-docs/imgurAuthBody.png)

@name("Upload image to Imgur")
POST "https://api.imgur.com/3/upload"
"Authorization": "Bearer {{imgurAccessToken}}"
files(
	("image", "{{spaceUrl}}"),
	("title", "{{spaceTitle}}"),
	("description", "{{spaceExplanation}}")
)



