#!/usr/bin/env dothttp

// GET - Returns JSON based on counter from POST score/counter.
// 
// {
//     "Game Round": "0"
// }

@name("http://localhost:8080/counter")
GET "http://localhost/counter"


// GET - Returns JSON based on POST /score/ties
// 
// {
//     "ties": "0"
// }

@name("http://localhost:8080/ties")
GET "http://localhost/ties"


// GET - Returns JSON based on POST /score/wins.
// 
// {
//     "wins": "0"
// }

@name("http://localhost:8080/wins")
GET "http://localhost/wins"


// GET - Returns JSON  based on POST /score/loss.
// 
// {
//     "losses": "0"
// }

@name("http://localhost:8080/losses")
GET "http://localhost/wins"


// GET - Returns JSON time with format: "Time":"HH//MM/SS"

@name("http://localhost:8080/time")
GET "http://localhost/time"
"Content-Type": "application/x-www-form-urlencoded"


// GET - Returns JSON. 
// {
// 	"wins":"value",
// 	"losses":"value",
// 	"ties":"value"
// }
// Shows total tally of the game.

@name("http://localhost:8080/score")
GET "http://localhost/score"


// PUT - Resets values on wins,losses and ties. Returns JSON with format
// {
// 	"wins":"0",
// 	"losses": "0",
// 	"ties":"0"
// }

@name("http://localhost:8080/reset")
PUT "http://localhost/reset"
? "wins"= "2"
? "losses"= "1"
? "ties"= "3"


// PUT - Set manual score with wins=value, losses=value,ties=value.
// API only accepts integers as value.
// 
// {
// 	"wins":"value",
// 	"losses": "value",
// 	"ties":"value"
// }

@name("http://localhost:8080/score?wins=1&losses=1&ties=1")
PUT "http://localhost/score"
? "wins"= "2"
? "losses"= "1"
? "ties"= "3"


// POST - Using this will increment variable wins with one each time its called. Use GET /wins to get return value in JSON.

@name("http://localhost:8080/score/wins")
POST "http://localhost/score/wins"


// POST - Using this will increment variable loss with one each time its called. Use GET /losses to get return value in JSON.

@name("http://localhost:8080/score/loss")
POST "http://localhost/score/loss"


// POST - Using this will increment variable ties with one each time its called. Use GET /ties to get return value in JSON.

@name("http://localhost:8080/score/ties")
POST "http://localhost/score/ties"


// POST - Using this will increment variable counter with one each time its called. Use GET /counter to get return value in JSON.

@name("http://localhost:8080/score/counter")
POST "http://localhost/score/counter"


// POST - Play against CPU. Player values are Rock, Paper or Scissor. Values are not case sensitive.
// Based on fallout, win/loss or tie is incremented and returns String with outcome, example: "It's a tie".

@name("http://localhost:8080/cpuGame?player=rock")
POST "http://localhost/cpuGame"
? "player"= "rock"


// POST - Play against another player. Player values are Rock, Paper or Scissor. Values are not case sensitive.
// Based on fallout, win/loss or tie is incremented and returns String with outcome: "It's a tie".

@name("http://localhost:8080/pvpGame?playerOne=rock&playerTwo=paper")
POST "http://localhost/pvpGame"
? "playerOne"= "rock"
? "playerTwo"= "scissor"


// GET - Generates random Integers between 0-1000 on each fetch.

@name("https://postman-echo.com/get?var={{$randomInt}}")
GET "https://postman-echo.com/get"
? "var"= "{{$randomInt}}"



