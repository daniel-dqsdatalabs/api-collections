#!/usr/bin/env dothttp

// There are 3 general types of nesting, which are used in the nesting strategies. 
// Valid values for the `NestingStrategy` are 1-7.
// 
// <br />
// 
// | Type                       		   | Description                                                   |
// | -------------------------------------|:--------------------------------------------------------------|
// | **PixeI nesting**                    | For each article an attempt is made to find a favorable position based on the given grid. The board is divided into a rectangular grid. The grid spacing corresponds to the grid. The finer the grid the better the box result. With a finer grid, the time for nesting increases. Well suited for low quantities per item. |
// | **Power nesting**                    | One article tries to find a cheap grid arrangement. Here, the articles are positioned in different arrangements to each other. The parameter Powernesting level specifies the number of arrangements to be tested. Well suited for higher quantities per item. |
// | **Plat nesting**                     | Per article trying to find a cheap parket arrangement. Here, the articles are positioned in different arrangements to each other. Well suited for higher volumes and small items. |
// 
// <br />
// 
// | Nestingstrategy 	   | Description                                                   |
// | ---------------------|:--------------------------------------------------------------|
// | **1**           	   | All articles are positioned via pixel nesting. 			   |
// | **2**           	   | The first article per board is positioned via power nesting. All following articles are positioned via pixel nesting 			   |
// | **3**           	   | All items are placed through power nesting. The gaps are filled via pixel nesting 			   |
// | **4**           	   | All articles are placed via power nesting and pixel nesting. The better result is taken over here. The gaps are filled via pixel nesting 			   |
// | **5**           	   | All items are positioned via place nesting. The gaps are filled via pixel nesting 			   |
// | **6**           	   | All items are placed through power nesting and plat nesting. The better result is taken over here. The gaps are filled via pixel nesting 			   |
// | **7**           	   | All items are placed through power nesting, plat nesting and pixel nesting. The better result is taken over here. 			   |

@name("NestingStrategy")
CONSTANT "https://- No Request - /"


// The higher the power level, the more combinations are tested during ponwer nesting. 
// This may possibly achieve a better result. The higher the power level, the higher the nesting time.
// 
// <br/>
// 
// Valid values for the `PowerNesting` are 1-6

@name("PowerNesting")
CONSTANT "https://- No Request - /"


// The part type defines what kind of geometry is detected in a 3D file. It is only available for 3D geometries and assembly parts.
// 
// 
// 
// | Value                 	| Description               | Example                           |
// | --------------------------|:--------------------------|-----------------------------------|
// | **1**                     | Special part              | Screw               				|
// | **2**                     | Unfoldable sheetmetal		| Valid geometry with bendings	    |
// | **3**                     | Flat sheetmetal			| Valid geometry without bendings   |
// | **4**                     | Small special part 		| Washer							|
// | **5**                     | Round tube 		        | Valid round tube      			|
// | **6**                     | Retangular tube    		| Valid rectangular tube    		|

@name("PartTypes")
CONSTANT "https://- No Request - /"


// The nestingoption defines how the calculation shoud nest the parts.
// 
// 
// 
// | Value                 	| Description                                                                                |
// | --------------------------|:-------------------------------------------------------------------------------------------|
// | **1**                     | Doesn't nest, only calculates the laser parameters and the rectangulat case around the part|
// | **2**                     | Nests all parts togher which match material and thickness                                  |
// | **3**                     | Each file will be nested on a seperate plate/nesting                                       |
// | **4**                     | Each file is nested on a seperate plate until the plate is full (maximum amount per plate) |
// | **5**                     | Same behaviour like option 1 but with improved path finding algorithm for tubes            |

@name("NestingOption")
CONSTANT "https://- No Request - /"



