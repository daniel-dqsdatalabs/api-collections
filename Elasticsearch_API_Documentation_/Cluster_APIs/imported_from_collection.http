#!/usr/bin/env dothttp

// Provides explanations for shard allocations in the cluster

@name("Cluster allocation explain API")
GET "https://{{host}}/_cluster/allocation/explain"
json({
    "index": "kibana_sample_data_ecommerce",
    "shard": 0,
    "primary": true
})


// Returns cluster-wide settings.
// By default, this API call only returns settings that have been explicitly defined, but can also include the default settings by calling the include_defaults parameter

@name("Cluster get settings API")
GET "https://{{host}}/_cluster/settings"


// Returns the health status of a cluster.
// 
// The cluster health API returns a simple status on the health of the cluster. The API can also be executed against one or more indices to get just the specified indices health.
// 
// The cluster health status is: green, yellow or red. On the shard level, a red status indicates that the specific shard is not allocated in the cluster, yellow means that the primary shard is allocated but replicas are not, and green means that all shards are allocated. The index level status is controlled by the worst shard status. The cluster status is controlled by the worst index status.
// 
// One of the main benefits of the API is the ability to wait until the cluster reaches a certain high water-mark health level. For example, the following will wait for 50 seconds for the cluster to reach the yellow level (if it reaches the green or yellow status before 50 seconds elapse, it will return at that point):

@name("Cluster health API")
GET "https://{{host}}/_cluster/health/:index"


// Changes the allocation of shards in a cluster

@name("Cluster reroute API")
POST "https://{{host}}/_cluster/reroute"
json({
    "commands": [
        {
            "move": {
                "index": "test",
                "shard": 0,
                "from_node": "node1",
                "to_node": "node2"
            }
        },
        {
            "allocate_replica": {
                "index": "test",
                "shard": 1,
                "node": "node3"
            }
        }
    ]
})


// Returns metadata about the state of the cluster

@name("Cluster state API")
GET "https://{{host}}/_cluster/state/:metrics/:index"


// Returns cluster statistics

@name("Cluster stats API")
GET "https://{{host}}/_cluster/stats/"


// Updates cluster-wide settings

@name("Cluster update settings API")
PUT "https://{{host}}/_cluster/settings"
? "flat_settings"= "true"
json({
    "persistent": {
        "indices.recovery.max_bytes_per_sec": "50mb"
    }
})


// Returns information on the usage of features

@name("Nodes feature usage API")
GET "https://{{host}}/_nodes/usage/:metric/:node_id"


// Returns the hot threads on each selected node in the cluster

@name("Nodes hot threads API")
GET "https://{{host}}/_nodes/hot_threads/:node_id"


// Returns cluster nodes information

@name("Nodes info API")
GET "https://{{host}}/_nodes/:metric/:node_id"


// Reloads the keystore on nodes in the cluster

@name("Nodes reload secure settings API")
POST "https://{{host}}/_nodes/reload_secure_settings/:node_id"
json({
    "secure_settings_password": "s3cr3t"
})


// Returns cluster nodes statistics

@name("Nodes stats API")
GET "https://{{host}}/_nodes/stats/:metric/:index_metric/:node_id"
? "filter_path"= "nodes.*.ingest"


// Returns cluster-level changes that have not yet been executed

@name("Pending cluster tasks API")
GET "https://{{host}}/_cluster/pending_tasks/:local/:master_timeout"


// Returns configured remote cluster information

@name("Remote cluster info API")
GET "https://{{host}}/_remote/info"


// Returns information about the tasks currently executing in the cluster.

@name("Task management API")
GET "https://{{host}}/_tasks/:task_id"


// Adds or removes master-eligible nodes from the voting configuration exclusion list

@name("Voting configuration exclusions API")
POST "https://{{host}}/_cluster/voting_config_exclusions"



