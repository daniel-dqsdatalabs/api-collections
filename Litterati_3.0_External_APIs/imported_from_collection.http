#!/usr/bin/env dothttp

// # Login.
// 
// 1. An API for login a user into our system.
// 
// 2. Parameters to be provided in a body of a request are either `email` or a `username` along with a `password`.
// 
// 3. In order to send an `email`, it will be send in `username` key and if you want to login with `username` then also the same `username` key will be used.

@name("Login")
POST "https://{{url}}/{{version}}/auth/login"
"Content-Type": "application/json"
"Accept-Language": "en"
json({
    "username": "{{username}}",
    "password": "{{password}}"
})


@name("Switch User Role")
POST "https://{{url}}/{{version}}/user/role/switch"
data('{
	"roleId": {{roleId}}
}')


// # Get All Litters.
// 
// 1. An API to Get all the litters in our database.
// 
// 2. It has capability of multiple *Query Params* for customized data to be get.
// 
// 3. Has a capability of Pagination.
// 
// ### Query Params
// 
// 1. `limit` amount of litter to get in a single response.
// 
// 2. `page` to bring up the next litters.
// 
// 3. `sort` sort's a  data according to the field provided. Field should be enclosed in double quotes where as sorting criteria should be without double quotes. Criteria means bringing up a data in Ascending (ASC) or Descending (DESC) order.
// 
// 4. `updatedAt` to fetch a litters which are updated after or at specified date. Date should be in this format **YYYY-MM-DD**.
// 
// 5. `countryCode` to get a litters which were collected in a specific country.
// 
// 6. `challengeId` to get a litters of specific challenge.
// 
// ## Instructions
// 
// #### STEP 1 Login:
// 1. URL "https://apiv3.litterati.org/auth/login"
// 2. Set Request type to POST
// 3. Enter the details of user in the body, its email and password. Here is sample request.
// {
//     "username": "xxxxx",
//     "password": "xxxxx"
// }
// 4. Response will come from server regarding user email / password.
// 
// #### STEP 2:
// COPY User Token from Body
// 
// #### STEP 3:
// Set Authorization Token Headers
// Authorization: Bearer xxxxxxxxxxx
// 
// #### STEP 4 Get Litters:
// 1. URL "https://apiv3.litterati.org/external/litters"
// 2. Set Request type to GET
// 3. Send API.

@name("Get Litters")
GET "https://{{url}}/{{version}}/external/litters"
? "limit"= "10"
? "page"= "1"
? "countryCode"= "nl"
? "challengeId"= "4431"
? "updatedAt"= "2020-07-22"
? 'sort'= '"photoTimestamp"'


// # Get All Litters.
// 
// 1. An API to Get all the litters in our database.
// 
// 2. It has capability of multiple *Query Params* for customized data to be get.
// 
// 3. Has a capability of Pagination.
// 
// ### Query Params
// 
// 1. `limit` amount of litter to get in a single response.
// 
// 2. `page` to bring up the next litters.
// 
// 3. `sort` sort's a  data according to the field provided. Field should be enclosed in double quotes where as sorting criteria should be without double quotes. Criteria means bringing up a data in Ascending (ASC) or Descending (DESC) order.
// 
// 4. `updatedAt` to fetch a litters which are updated after or at specified date. Date should be in this format **YYYY-MM-DD**.
// 
// 5. `countryCode` to get a litters which were collected in a specific country.
// 
// 6. `challengeId` to get a litters of specific challenge.
// 
// ## Instructions
// 
// #### STEP 1 Login:
// 1. URL "https://apiv3.litterati.org/auth/login"
// 2. Set Request type to POST
// 3. Enter the details of user in the body, its email and password. Here is sample request.
// {
//     "username": "xxxxx",
//     "password": "xxxxx"
// }
// 4. Response will come from server regarding user email / password.
// 
// #### STEP 2:
// COPY User Token from Body
// 
// #### STEP 3:
// Set Authorization Token Headers
// Authorization: Bearer xxxxxxxxxxx
// 
// #### STEP 4 Get Litters:
// 1. URL "https://apiv3.litterati.org/external/litters"
// 2. Set Request type to GET
// 3. Send API.

@name("Get All Litters")
GET "https://{{url}}/{{version}}/external/all-litters"
? "limit"= "10"
? "page"= "1"
? "countryCode"= "nl"
? "challengeId"= "4431"
? "updatedAt"= "2020-07-22"
? 'sort'= '"photoTimestamp"'


@name("Get Challenge Summary")
GET "https://{{url}}/{{version}}/external/challenge/summary"
? "challengeId"= "7250"


// # Get Segments List.
// 
// 1. An API to Get all the segments associated with a Partner.
// 
// 2. It has capability of multiple *Query Params* for customized data to be get.
// 
// 3. Has a capability of Pagination.
// 
// ### Query Params
// 
// 1. `limit` amount of litter to get in a single response.
// 
// 2. `page` to bring up the next segments.
// 
// 3. `updatedAt` to fetch a segments which are updated after or at specified date. Date should be in 13 Digit EPOCH Format.
// 
// 4. `userId` to get a segments of a specific User.
// 
// ## Instructions
// 
// #### STEP 1 Login:
// 1. URL "https://apiv3.litterati.org/auth/login"
// 2. Set Request type to POST
// 3. Enter the details of user in the body, its email and password. Here is sample request.
// {
//     "username": "xxxxx",
//     "password": "xxxxx"
// }
// 4. Response will come from server regarding user email / password.
// 
// #### STEP 2:
// COPY User Token from Body
// 
// #### STEP 3:
// Set Authorization Token Headers
// Authorization: Bearer xxxxxxxxxxx
// 
// #### STEP 4 Get Litters:
// 1. URL "https://apiv3.litterati.org/external/segment"
// 2. Set Request type to GET
// 3. Send API.

@name("Get Segments List")
GET "https://{{url}}/{{version}}/external/segment"
? "updatedAt"= "1609954733994"
? "userId"= "111412"
? "limit"= "2"
? "page"= "1"


// # Get Segment Details.
// 
// 1. An API to Get the details of segment.
// 2. If invalid segment id is provided or a segment is not assocaited with a partner then API will return error with code `412`.
// 3. It has capability of multiple *Query Params* for customized data to be get.
// 4. Has a capability of Pagination.
// 
// ### Route Params
// 
// `segmentId` ID of a segment whose data need to be fetched.
// 
// ## Instructions
// 
// #### STEP 1 Login:
// 1. URL "https://apiv3.litterati.org/auth/login"
// 2. Set Request type to POST
// 3. Enter the details of user in the body, its email and password. Here is sample request.
// {
//     "username": "xxxxx",
//     "password": "xxxxx"
// }
// 4. Response will come from server regarding user email / password.
// 
// #### STEP 2:
// COPY User Token from Body
// 
// #### STEP 3:
// Set Authorization Token Headers
// Authorization: Bearer xxxxxxxxxxx
// 
// #### STEP 4 Get Litters:
// 1. URL "https://apiv3.litterati.org/external/segment/:segmentId"
// 2. Set Request type to GET
// 3. Send API.

@name("Get Segment Details")
GET "https://{{url}}/{{version}}/external/segment/:segmentId"


@name("Partner Data for Google Data Connector")
GET "https://{{url}}/{{version}}/external/partner-challenge-data"
? "partnerId"= "21"
? "challengeId"= "7257"
? "startDate"= "2021-02-01"
? "endDate"= "2021-02-25"
? "countryCode"= "pk"


@name("All Challenges for Partner Data for Google Data Connector")
GET "https://{{url}}/{{version}}/external/all-challenges-partner-data"
? "partnerId"= "21"
? "startDate"= "2021-02-01"
? "endDate"= "2021-02-25"


@name("All Litter Tags Data for Partner")
GET "https://{{url}}/{{version}}/external/all-litter-tags-partner-data"
? "partnerId"= "21"
? "startDate"= "2021-02-01"
? "endDate"= "2021-02-25"



