#!/usr/bin/env dothttp

// Returns a listing of all agreements that user _may_ need to fill out along with currently known versions:
// 
// ```javascript
// {
// 	NA: 1, // NYSE/AMEX
// 	DJ: 1, // DowJones index
// 	O: 2,  // Options
// 	Q: 3   // NASDAQ
// }
// ```
// 
// The details for each agreement can be pulled via `{{url}}/contracts/{pro|nonpro}_{exchange code}_v{version}.html`. The desired style should be applied for classes outlined below. All classes are prefixed with `ag-`:
// 
// ### Main container ###
// * `.ag-mainContainer` - the main container for content on the page
// 
// 
// ### HEADERS ###
// * `h1.title` - the main page title
// * `h2.ag-subHeader` - page bold headers approximately 25% smaller than the Title used to seperate sections of the page ex. Summary, Terms and Condition
// * `h3.ag-sectionHead` - bold header approximately 25% smaller than the subHeader that seprates sections within subHeader sections
// 
// ### TERM AGREEMENT BOX ###
// * `.ag-termBox` - Term box that has a fixed height which scrolls if content overflows
// * `.ag-sectionHead` - bold header approximately 25% smaller than the subHeader that seprates sections within subHeader sections
// 
// ### FORM CONTAINER & ELEMENTS ###
// * `.ag-formSet` - contains the form set and the ag-form3Col
// * `.ag-form3Col` - creates a container column 1/3 the  width of the form set. Together with the label will should create the image below.
// * `.ag-3col` - creates a container which is 1/3 the width of the container.
// * `.ag-extendedLabel` - Used for paragraph type labels above textbox
// * `.ag-listNo` - lists the number to the left of the content `(display:block; float:left;width:35px;)`
// * `.ag-listContent` - lists the content to the right of the number `(display:block; float:left;width:95%")`
// * `.ag-text-input` - input box 1/3 the width of the ag-form3Col.
// * `.ag-text-input.3Col` - input box 1/3 the width of the ag-form3Col. Should be used with label to form the above image.
// * `.ag-text3Col` - used to add information or additional labels for the form entry see image.
// * `.ag-selectInput.3Col` - used to contain and format the select form element.
// * `.ag-radioSet` - container used for a set of radio buttons with Yes or No. There should be a slight background to highlight the set
// * `.ag-radio` - a form element format to be positioned left of the label see image below
// * `.ag-checkbox_indv` - a class for agreement checkbox
// * `.ag-emplBox` - Text box class
// * `.ag-subscriberTitle` - Textbox class for Subscriber title
// * `.ag-subscriberFunctions` - Textbox class for Subscriber function
// * `span.ag-sectionHead` - Heads a paragraph on a seperate line eg `style="font-weight: bold; font-size: 18px"`
// * `.ag-legal` - legal copy` - san-seriffed and font-size 14px;
// * `.ag-legalLine` - Highlighted checkbox and "I Agree" set
// * `.ag-buttonSet` - When using two or more buttons
// * `.ag-buttonClass` - Used for button styling
// 
// ### Tags ###
// * `label` - used to indicate section within forms. Labels should be formatted to be a block display,floated left and 1/3 the width of the form container to allow for the input box to fit next to it within the container.
// * `p` - container for body of text throughout the site. If necessar you can include a class reflecting what the content is for.

@name("Available")
GET "https://{{url}}/api/user/agreements/all/active"


// The details for each agreement in basic unstyled html. NOTE: this is still an API call that requires appropriate authorization. The desired style should be applied for classes outlined below. All classes are prefixed with `ag-`:
// 
// ### Main container ###
// * `.ag-mainContainer` - the main container for content on the page
// 
// 
// ### HEADERS ###
// * `h1.title` - the main page title
// * `h2.ag-subHeader` - page bold headers approximately 25% smaller than the Title used to seperate sections of the page ex. Summary, Terms and Condition
// * `h3.ag-sectionHead` - bold header approximately 25% smaller than the subHeader that seprates sections within subHeader sections
// 
// ### TERM AGREEMENT BOX ###
// * `.ag-termBox` - Term box that has a fixed height which scrolls if content overflows
// * `.ag-sectionHead` - bold header approximately 25% smaller than the subHeader that seprates sections within subHeader sections
// 
// ### FORM CONTAINER & ELEMENTS ###
// * `.ag-formSet` - contains the form set and the ag-form3Col
// * `.ag-form3Col` - creates a container column 1/3 the  width of the form set. Together with the label will should create the image below.
// * `.ag-3col` - creates a container which is 1/3 the width of the container.
// * `.ag-extendedLabel` - Used for paragraph type labels above textbox
// * `.ag-listNo` - lists the number to the left of the content `(display:block; float:left;width:35px;)`
// * `.ag-listContent` - lists the content to the right of the number `(display:block; float:left;width:95%")`
// * `.ag-text-input` - input box 1/3 the width of the ag-form3Col.
// * `.ag-text-input.3Col` - input box 1/3 the width of the ag-form3Col. Should be used with label to form the above image.
// * `.ag-text3Col` - used to add information or additional labels for the form entry see image.
// * `.ag-selectInput.3Col` - used to contain and format the select form element.
// * `.ag-radioSet` - container used for a set of radio buttons with Yes or No. There should be a slight background to highlight the set
// * `.ag-radio` - a form element format to be positioned left of the label see image below
// * `.ag-checkbox_indv` - a class for agreement checkbox
// * `.ag-emplBox` - Text box class
// * `.ag-subscriberTitle` - Textbox class for Subscriber title
// * `.ag-subscriberFunctions` - Textbox class for Subscriber function
// * `span.ag-sectionHead` - Heads a paragraph on a seperate line eg `style="font-weight: bold; font-size: 18px"`
// * `.ag-legal` - legal copy` - san-seriffed and font-size 14px;
// * `.ag-legalLine` - Highlighted checkbox and "I Agree" set
// * `.ag-buttonSet` - When using two or more buttons
// * `.ag-buttonClass` - Used for button styling
// 
// ### Tags ###
// * `label` - used to indicate section within forms. Labels should be formatted to be a block display,floated left and 1/3 the width of the form container to allow for the input box to fit next to it within the container.
// * `p` - container for body of text throughout the site. If necessar you can include a class reflecting what the content is for.

@name("Agreement")
GET "https://{{url}}/api/user/agreements/contents/{version}/{code}/body.html"


// Return list of agreements user has yet to sign:
// 
// ```javascript
// ['NA', 'O', 'DJ']
// ```

@name("Unsigned")
GET "https://{{url}}/api/user/agreements/unsigned"


// Confirms whether user is professional or not (optional step). Response:
// 
// ```javascript
// {success: true}
// ```

@name("Attest status")
POST "https://{{url}}/api/user/professional/attest"
"Content-Type": "application/json"
data('{professional: false}')


// Signs the agreement. Field names can be pulled from the form obtained via the given URL. Response:
// 
// ```javascript
// {success: true}
// ```

@name("Sign")
POST "https://{{url}}/api/user/agreements/sign"
"Content-Type": "application/json"
data("{
	code: 'NA',
	entries: [
		{field: 'name', value: 'Test'},
		{field: 'note', value: 'ALL VALUES MUST BE STRINGS!'
	]
}")


// Retrieves Crypto Agreement from APEX. The result will either be a server error or the following response:

@name("Crypto Agreement")
GET "https://{{url}}/api/user/agreements/crypto/Agreement"
"Content-Type": "application/json"


@name("Crypto Sign")
POST "https://{{url}}/api/user/agreements/crypto/sign"
"Content-Type": "application/json"
data('{
	"signature":"NAME OF PERSON", //Required
	"account":{
		"accountNumber":"A1B2C3D",
		"accountID": 12345 //optional
		
	}
}')



