#!/usr/bin/env dothttp

// This URI creates a new paymethod for the customer and returns a `paymethod_token`. Use this URI when creating permanent paymethod tokens from one-time tokens created in [Forte.js](http://www.forte.net/devdocs/forte.js/forte.js.htm). **NOTE**: You can also create a new paymethod for an existing customer by including the `customer_token` in the body of the request to the `/organizations/org_{{organization}}/locations/loc_{{location}}/paymethods` URI.
// 
// To associate an existing `billing_address_token` to a paymethod, include it in the body of the request.

@name("Customer Credit Card Paymethod")
POST "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/customers/cst_{{customertoken}}/paymethods"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{
       "notes":"Brwn Work Card",
       "card": {
          "name_on_card":"Emmett Brown",
          "card_type":"visa",
          "account_number":"4111111111111111",
          "expire_month":12,
          "expire_year":2020,
          "card_verification_value": "123"
       }   
}')


// This URI creates a new paymethod for the customer and returns a `paymethod_token`. Use this URI when creating permanent paymethod tokens from one-time tokens created in [Forte.js](http://www.forte.net/devdocs/forte.js/forte.js.htm). **NOTE**: You can also create a new paymethod for an existing customer by including the `customer_token` in the body of the request to the `/organizations/org_{{organization}}/locations/loc_{{location}}/paymethods` URI.
// 
// To associate an existing `billing_address_token` to a paymethod, include it in the body of the request.

@name("Customer ECheck Paymethod")
POST "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/customers/cst_{{customertoken}}/paymethods"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{
       "notes":"Brwn echeck",
       "echeck": {
          "account_holder": "Emmett Brown",
          "account_number":"1111111111111",
          "routing_number":"021000021",
          "account_type":"checking"
       }
}')


// Use this call to associate a paymethod to a locationless customer (see the [POST Locationless Customer](https://restdocs.forte.net/?version=latest#5c1592d5-a0e3-46af-9a65-f43603ad93ac) call).

@name("Paymethod to a Locationless Customer")
POST "https://{{baseURI}}/customers/cst_{{customertoken}}/paymethods"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{
  "notes": "IVR",
  "organization_id": "org_334277",
  "card": {
    "name_on_card": "Marty McFly",
    "card_type": "VISA",
    "account_number": "4111111111111111",
    "expire_month": "10",
    "expire_year": "2026"
  }
}
')


// This URI creates a clientless credit card payment method  and returns a `paymethod_token` (i.e., a payment method that is not associated with a customer). To associate this payment method with an existing customer, include that customer's `customer_token` in the body of the request or include the `customer_token` value in the route (e.g., `/organizations/org_{{organization}}/locations/loc_{{location}}/customers/cst_{{customer_token}}/paymethods`).
// 
// To associate an existing `billing_address_token` to the paymethod, include it in the body of the request.

@name("Clientless Credit Card Paymethod")
POST "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/paymethods"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{  
       "label": "Visa - 1234",
       "notes": "Brown Work CC",
       "card": {
          "account_number": "4488563295465231",
          "expire_month": 12,
          "expire_year": 2020,
          "card_verification_value": "645",
          "card_type": "visa",
          "name_on_card": "Dr. Emmett Brown"
       }
}')


// This URI creates a clientless echeck payment method and returns a `paymethod_token` (i.e., a payment method that is not associated with a customer). To associate this payment method with an existing customer, include that customer's `customer_token` in the body of the request or include the `customer_token` value in the route (e.g., `/organizations/org_{{organization}}/locations/loc_{{location}}/customers/cst_{{customer_token}}/paymethods`).
// 
// To associate an existing `billing_address_token` to a paymethod, include it in the body of the request.

@name("Clientless eCheck Paymethod")
POST "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/paymethods"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{
       "label": "Brown Work- 1111",
       "notes": "Brown Work Checking",
       "echeck": {
          "account_holder": "Marty McFly",
          "account_number": "1111111111111",          
          "routing_number": "021000021",
          "item_description": "1001",
          "account_type": "checking"
       }
}')


// Use this URI to create a permanent token from the one-time token you created in [Forte.js](http://www.forte.net/devdocs/forte.js/forte.js.htm). You can also create a permanent token from a one-time token by including the existing customer's `customer_token` in the body of the request to the `/organizations/org_{{organization}}/locations/loc{{location}}/paymethods` URI. **NOTE**: At this time, one-time tokens cannot be used to create [organization-level paymethod tokens](http://www.forte.net/devdocs/reference/tokens.htm).
// 
// To associate an existing `billing_address_token` to a paymethod, include it in the body of the request.

@name("Permanent Paymethod Token from a One-Time Token (Credit Card)")
POST "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/customers/cst_{{customertoken}}/paymethods"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{
   "label": "Brown VISA",
   "notes": "Brown Work Card",
   "card": {
     "one_time_token": "ott_ki99oclmr8c0gduavrcjww",
     "name_on_card":"Marty McFly"
   }
}')


// Use this URI to create a permanent token from the one-time token you created in [Forte.js](http://www.forte.net/devdocs/forte.js/forte.js.htm). You can also create a permanent token from a one-time token by including the existing customer's `customer_token` in the body of the request to the `/organizations/org_{{organization}}/locations/loc{{location}}/paymethods` URI. **NOTE**: At this time, one-time tokens cannot be used to create [organization-level paymethod tokens](http://www.forte.net/devdocs/reference/tokens.htm).
// 
// To associate an existing `billing_address_token` to a paymethod, include it in the body of the request.

@name("Permanent Paymethod Token from a One-Time Token (eCheck)")
POST "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/customers/cst_{{customertoken}}/paymethods"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{
       "notes": "McFly_Checking",
       "echeck": {
          "one_time_token": "ott_ki99oclmr8c0gduavrcjww",
          "account_holder":"Marty McFly"
       }
}')


// This URI returns all paymethods associated with the specified `customer_token`.

@name("Customer's Paymethods")
GET "https://{{baseURI}}/organizations/org_{{organization}}/locations/loc_{{location}}/customers/cst_{{customertoken}}/paymethods"
basicauth("352b1fcd5fc49590755a3f78c3dd973d", "0c8ede0196f7a16a41aef40465fc6952")



// Returns the payment method details associated with a `paymethod_token`.

@name("Paymethod by ID")
GET "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/paymethods/mth_{{paymethodtoken}}"
basicauth("352b1fcd5fc49590755a3f78c3dd973d", "0c8ede0196f7a16a41aef40465fc6952")



// This URI returns all the payment methods owned by a Location. To narrow your search data using specific criteria, use the following parameters to filter your results:
// <ul>
// <li> customer_token</li>
// <li> customer_id</li>
// <li> start_au_updated_date / end_au_updated_date</li>
// <li> paymethod_type</li>
// </ul>
// 
// 
// **NOTES**: 
// <ul>
// <li>All date filter parameters are time aware.</li>
// <li>As a best practice, Forte recommends running your Account Updater report on the first day of the month for the previous month's data. This method provides the most accurate Account Updater data to match to merchant invoice items.</li>
// </ul>

@name("All Paymethods for a Location")
GET "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/paymethods"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")



// This URI returns all the payment methods owned by an Organization. [Account Updater](https://www.forte.net/account-updater) customers use this URI to view the payment tokens that were updated in the prior months using the following filter parameters: <ul><li> start_au_updated_date</li><li> end_au_updated_date</li></ul> These filters ensure that Forte only returns card payment token results within the specified date range. **NOTE**: Account Updater services cannot be tested in Sandbox. 
// </br></br>
// To narrow your search data using specific criteria, use the following parameters to filter your results. 
// <ul>
// <li> location_id</li><li> customer_token</li><li> customer_id</li><li> start_au_updated_date / end_au_updated_date</li><li> paymethod_type</li></ul>
// 
// 
// **NOTE**: All date filter parameters are time aware.

@name("All Paymethods for an Organization")
GET "https://{{baseURI}}/organizations/org_{{organizationID}}/paymethods"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")



// [Account Updater](https://www.forte.net/account-updater) customers use this URI with the `start_au_updated_date` and `end_au_updated_date` filters to view the payment tokens that were updated in the prior months. 
// 
// **NOTES**: 
// <ul>
// <li>Account Updater services cannot be tested in Sandbox.</li>
// <li>As a best practice, Forte recommends running your Account Updater report on the first day of the month for the previous month's data. This method provides the most accurate Account Updater data to match to merchant invoice items.</li>
// </ul>

@name("Account Updater Token Updates")
GET "https://{{baseURI}}/organizations/org_{{organizationID}}/paymethods/"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
? "filter"= "start_au_updated_date+eq+'2020-01-08'+and+end_au_updated_date+eq+'2020-12-08'"



// This URI updates the specified payment method (via the `paymethod_token` parameter) and assigns it to the `customer_token` specified in the request payload.

@name("Update the Customer Token Associated with the Paymethod")
PUT "https://{{baseURI}}/v3/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/paymethods/mth_{{paymethodtoken}}"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{
"customer_token":"cst_r0RxeHj4U0e2wpfOA09B_g"
}')


// This URI updates the payment method specified in the route via the `paymethod_token` parameter. **NOTE**: You cannot update the `account_number` parameter when updating an echeck payment method.

@name("Update an eCheck Paymethod")
PUT "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/paymethods/mth_{{paymethodtoken}}"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{
       "label": "Brown Work- 1111",
       "notes": "Brown Work Checking",
       "echeck": {
          "account_holder": "Jennifer McFly",
          "routing_number": "021000021",
          "item_description": "1001",
          "account_type": "checking"
       }
}')


// This URI updates the `billing_address_token` associated with the payment method. The billing address you associate to a payment method must belong to the same organization referenced in the route.

@name("Update Billing Address Associated with a Paymethod")
PUT "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/paymethods/mth__{{paymethodtoken}}"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{
"billing_address_token":"add_xzDoohIiK0uj5wjPairb-g"
}')


// This URI updates the payment method specified in the route via the `paymethod_token` parameter. **NOTE**: You cannot update the `account_number` or the `card_verification_value` parameters when updating a credit card payment method.

@name("Update a Clientless Credit Card Paymethod")
PUT "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/paymethods/mth_{{paymethodtoken}}"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{
       "card": {
          "expire_month": 04,
          "expire_year": 2020,
          "card_verification_value": "123"
       }
} ')


// This URI updates the payment method specified in the route via the `paymethod_token` parameter. **NOTE**: You cannot update the `account_number` parameter when updating an echeck payment method.

@name("Update a Clientless eCheck Paymethod")
PUT "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/paymethods/mth_{{paymethodtoken}}"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{
       "card": {
          "expire_month": 04,
          "expire_year": 2020,
          "card_verification_value": "123"
       }
} ')


// This URI excludes a credit card token from the monthly Account Updater run when passed with the `"suppress_account_updater"="true"` parameter in the body of the request. **NOTE**: [Account Updater](https://www.forte.net/account-updater) functionality cannot be tested in Sandbox. 

@name("Exclude a Paymethod from Account Updater Run")
PUT "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/paymethods/mth_{{paymethodtoken}}"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")
data('{
       "card": {
          "suppress_account_updater": "true"
       }
}')


// This URI deletes the payment method specified in the route via the `paymethod_token` parameter. **NOTE**: A payment method cannot be deleted if it is tied to a schedule in the `active` status.

@name("Paymethod")
DELETE "https://{{baseURI}}/organizations/org_{{organizationID}}/locations/loc_{{locationID}}/paymethods/mth_{{paymethodtoken}}"
basicauth("{{apiaccessid}}", "{{apisecurekey}}")




