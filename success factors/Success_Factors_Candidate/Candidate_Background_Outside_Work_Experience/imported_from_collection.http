#!/usr/bin/env dothttp

@name("Get entities from CandidateBackground_OutsideWorkExperience")
GET "https://{{baseUrl}}/CandidateBackground_OutsideWorkExperience"
basicauth("<Basic Auth Username>", "<Basic Auth Password>")
? "$top"= "20"
? "$skip"= "26126779"
? "$search"= "exercitation mollit reprehenderit ad"
? "$filter"= "exercitation mollit reprehenderit ad"
? "$count"= "true"
? "$orderby"= "endDate,employerZip desc"
? "$select"= "presentEmployer,endDate"
? "$expand"= "candidate,*"


@name("Add new entity to CandidateBackground_OutsideWorkExperience")
POST "https://{{baseUrl}}/CandidateBackground_OutsideWorkExperience"
basicauth("<Basic Auth Username>", "<Basic Auth Password>")
"Content-Type": "application/json"
data('{
    "backgroundElementId": "in sit eu enim Duis",
    "bgOrderPos": "dolore irure",
    "businessType": "quis sunt",
    "candidateId": "culpa deserunt ullamco",
    "employer": "Excepteur deserunt in sed incididunt",
    "employerAddress": "reprehenderit sint incididunt",
    "employerCity": "proident non",
    "employerContact": "dolore aliquip sint Ut irure",
    "employerCountry": "ut nostrud sint",
    "employerEmail": "pariatur qui quis",
    "employerPhone": "magna aliquip ex dolor",
    "employerState": "quis nostrud consequat proident",
    "employerZip": "nostrud id magna",
    "endDate": "/Date(1492098664000)/",
    "lastModifiedDateTime": "/Date(1492098664000)/",
    "presentEmployer": "tempor irure cillum officia",
    "startDate": "/Date(1492098664000)/",
    "startTitle": "nisi",
    "candidate": {
        "address": "exercitation do",
        "address2": "laborum occaecat mollit consecte",
        "agreeToPrivacyStatement": "in voluptate eu",
        "anonymized": "Excepteur veniam eu ullamco",
        "anonymizedDateTime": "/Date(1492098664000)/",
        "candidateId": "pariatur Lorem Excepteur",
        "candidateLocale": "consectetur commodo cillum",
        "cellPhone": "fugiat minim cillum",
        "city": "eu in labore ipsum ex",
        "contactEmail": "pariatur dolor proident",
        "country": "laborum quis",
        "creationDateTime": "/Date(1492098664000)/",
        "currentTitle": "officia Duis",
        "dataPrivacyId": "deserunt elit dolor",
        "dateofAvailability": "/Date(1492098664000)/",
        "externalCandidate": false,
        "firstName": "dolor ex",
        "homePhone": "laborum nulla",
        "lastLoginDateTime": "/Date(1492098664000)/",
        "lastModifiedDateTime": "/Date(1492098664000)/",
        "lastName": "Duis laborum cillum do",
        "middleName": "ut u",
        "partnerMemberId": "eiusmod laboris",
        "partnerSource": "est in enim",
        "password": "aliquip fu",
        "primaryEmail": "Excepteur ipsum reprehenderit anim dolore",
        "privacyAcceptDateTime": "/Date(1492098664000)/",
        "publicIntranet": true,
        "shareProfile": "Ut in irure exercitation",
        "usersSysId": "s",
        "visibilityOption": true,
        "zip": "in reprehenderit Excepteur ad",
        "candidateProfileExtension": {
            "candidateId": "deserunt incididunt occaecat",
            "createdBy": "nulla occaecat mo",
            "createdDateTime": "/Date(1492098664000)/",
            "lastModifiedBy": "eiu",
            "lastModifiedDateTime": "/Date(1492098664000)/",
            "mdfSystemRecordStatus": "reprehenderit cupidatat cillum quis"
        },
        "certificates": {
            "results": [
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                }
            ]
        },
        "education": {
            "results": [
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                }
            ]
        },
        "insideWorkExperience": {
            "results": [
                {
                    "value": "<Circular reference to #/components/schemas/SFOData.CandidateBackground_InsideWorkExperience detected>"
                },
                {
                    "value": "<Circular reference to #/components/schemas/SFOData.CandidateBackground_InsideWorkExperience detected>"
                }
            ]
        },
        "languages": {
            "results": [
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                }
            ]
        },
        "outsideWorkExperience": {
            "results": [
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                }
            ]
        },
        "tags": {
            "results": [
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                }
            ]
        },
        "talentPool": {
            "results": [
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                }
            ]
        },
        "talentPoolcorp": {
            "results": [
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                },
                {
                    "value": "<Error: Too many levels of nesting to fake this schema>"
                }
            ]
        }
    }
}')



