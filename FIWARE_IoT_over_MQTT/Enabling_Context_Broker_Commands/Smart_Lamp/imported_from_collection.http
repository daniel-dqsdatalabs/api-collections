#!/usr/bin/env dothttp

// This example registers the `on` and `off` commands for the entity with
// the `id="urn:ngsi-ld:Lamp:001"`
// 
// To register the commands we need to inform Orion that the URL `http://orion:1026/v1` is able to provide
// the missing  attributes. This will then be forwarded on to the IoT Agent. As you see this is an NGSI v1 
// endpoint and therefore the `legacyForwarding` attribute must also be set.

@name("Register Smart Lamp Commands")
POST "http://{{orion}}/v2/registrations"
"Content-Type": "application/json"
"fiware-service": "openiot"
"fiware-servicepath": "/"
? "type"= "Store"
? "attrs"= "name"
json({
    "description": "Lamp Commands",
    "dataProvided": {
        "entities": [
            {
                "id": "urn:ngsi-ld:Lamp:001",
                "type": "Lamp"
            }
        ],
        "attrs": [
            "on",
            "off"
        ]
    },
    "provider": {
        "http": {
            "url": "http://orion:1026/v1"
        },
        "legacyForwarding": true
    }
})


// To switch on the **Smart Lamp**, the `on` attribute must be updated in the context.

@name("Switch On a Lamp")
PATCH "http://{{orion}}/v2/entities/urn:ngsi-ld:Lamp:001/attrs"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
json({
    "on": {
        "type": "command",
        "value": ""
    }
})


// The result of the invocation of **Smart Lamp** commands can be read by querying the entity within the Orion Context Broker. 
// 
// The `TimeInstant` shows last the time any command associated with the entity has been invoked. 
// 
// * The result of `on` command can be see in the value of the `on_info` attribute
// * The result of `off` command can be see in the value of the `off_info` attribute

@name("Lamp Status")
GET "http://{{orion}}/v2/entities/urn:ngsi-ld:Lamp:001"
"fiware-service": "openiot"
"fiware-servicepath": "/"
? "options"= "keyValues"




