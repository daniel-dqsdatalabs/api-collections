#!/usr/bin/env dothttp

// From [this community tutorial](https://www.codetraveler.io/2019/01/12/how-to-use-postman-with-a-graphql-api/), we learn that each GraphQL endpoint is a `POST` API, and its request body is a `JSON` object containing a key called `query` that has the value of your query.
// 
// Under the **Body** tab, select the `raw` type with `JSON (application/json)` format. Construct your query here in the request body using proper JSON formatting.
// 
// ![[JSON object containing query](https://i.imgur.com/x9MriXU.png)](https://i.imgur.com/x9MriXU.png)
// 
// You can also use optional query parameters like `operationName` or `variables`. Review [more guidelines for setting up a GraphQL server to operate over HTTP](https://graphql.org/learn/serving-over-http/).

@name("Using JSON request body")
POST "https://swapi.apis.guru/"
"Content-Type": "application/json"
json({
    "query": "query { allFilms { films { id title episodeID } } }"
})


// Similar to the previous example from [this community tutorial](https://www.codetraveler.io/2019/01/12/how-to-use-postman-with-a-graphql-api/), we learn that if the GraphQL endpoint accepts the header `application/graphql`, then we don't need to use JSON in the request body.
// 
// Add the header `Content-type: application/graphql`, and then you can use a standard graphQL query in the request body.
// 
// ![[standard graphQL query](https://i.imgur.com/GMP3Eiz.png)](https://i.imgur.com/GMP3Eiz.png)

@name("Using GraphQL query")
POST "https://swapi.apis.guru/"
"Content-Type": "application/graphql"
data('query{
  allFilms
  {
   films {
      id
      title
      episodeID
    }
  }
}')


// 1. **Import a cURL command**: See below for an example cURL request representing a GraphQL query. Copy this request (or another one) to your clipboard. Then, click the **Import** button in the top left of the Postman app. Under the **Paste Raw Text** tab, paste your cURL command and confirm Import. 
// ```
// curl -i -H 'Content-Type: application/json' -H "Authorization: Bearer {{myGithubAccessToken}}" -X POST -d '{"query": "query {repository(owner: \"loopDelicious\", name: \"cat-kube-stateless\") {description}}"}' https://api.github.com/graphql
// ```
// ![[Import and paste the cURL as raw text](https://i.imgur.com/7q2O5Rf.png)](https://i.imgur.com/7q2O5Rf.png)
// 1. Update the repository owner (`\"loopDelicious\"`) with your own GitHub username (`\"yourName\"`) under the **Body** tab. Remember to properly escape the double quotes so it can be interpreted as JSON, and leave your `\`'s' in place.
// 1. Update the repository name (`\"cat-kube-stateless\"`) with your own GitHub repo (`\"yourRepo\"`) under the **Body** tab. Again, remember to properly escape the double quotes.
// 1. Update `{{myGitHubAccessToken}}` with your own token under the **Headers** tab, or [use an environment](https://learning.getpostman.com/docs/postman/environments_and_globals/manage_environments) to plug in the variable value. You can [request your personal access token](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line) here: https://github.com/settings/tokens

@name("Import as cURL")
POST "https://api.github.com/graphql"
"Content-Type": "application/json"
"Authorization": "Bearer {{myGitHubAccessToken}}"
json({
    "query": "query {repository(owner: \"loopDelicious\", name: \"cat-kube-stateless\") {description}}"
})


// > Postman launched built-in support for GraphQL in version 7.2.
// 
// If you're using Postman v7.2 or later, the app supports the following:
// 
// * Sending GraphQL queries in request body as POST requests
// * Support for GraphQL variables
// * Creating APIs in Postman with GraphQL schema type
// * Query autocompletion integrated with user-defined GraphQL schemas
//  
// This example is from this step-by-step tutorial about [how to use Postman with the Spotify GraphQL API](https://blog.getpostman.com/2019/06/18/postman-v7-2-supports-graphql/).
// 
// ![[GraphQL in Postman](https://i.imgur.com/4nKoPU7.png)](https://i.imgur.com/4nKoPU7.png)
// 
// To enable the autocompletion, you will need to add a GraphQL schema under the APIs tab, and then select the schema while typing your query. An example GraphQL schema:
// 
// ```
// type Album {
//   name: String
//   id: ID
//   image: String
//   tracks: [Track]
// }
// 
// type Artist {
//   name: String!
//   id: ID
//   image: String
//   albums(limit: Int = 10): [Album]
// }
// 
// type Query {
//   hi(message: String = "Hi"): String
//   queryArtists(byName: String = "Red Hot Chili Peppers"): [Artist]
// }
// 
// type Track {
//   name: String!
//   artists: [Artist]
//   preview_url: String
//   id: ID
// }
// ```

@name("Built-in support for GraphQL")
POST "https://spotify-graphql-server.herokuapp.com/graphql"




