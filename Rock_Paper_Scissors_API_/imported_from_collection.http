#!/usr/bin/env dothttp

// **API endpoint to get a value of all scores:**
// * scores for player 1: scoresPlayer1
// * scores for player 2: scoresPlayer2
// * scores for ties: ties 
// 
// Returns scores for Player 1, Player 2 and ties.
// 
// >*A succesfull API request will return HTTP 200 status.*

@name("Get a value of all scores")
GET "http://localhost/scores"



// **API endpoint to get a value of choice of Player 1 in PvP game:**
// 
// Params to choose (choose only 1):
// * KEY: getPlayer1Choice, VALUE: rock
// * KEY: getPlayer1Choice, VALUE: paper
// * KEY: getPlayer1Choice, VALUE: scissors
// 
// Returns information who winns, choises for Players, and scores for Player 1, Player 2 and ties.
// 
// 
// >*A succesfull API request will return HTTP 200 status.*

@name("Get a value of choice of Player 1 (PvP)")
GET "http://localhost/scores/player1"
? "getPlayer1Choice"= "rock"
? "getPlayer1Choice"= "paper"
? "getPlayer1Choice"= "scissors"



// **API endpoint to get a value of choice of Player 2 in PvP game:**
// 
// Params to choose (choose only 1):
// * KEY: getPlayer2Choice, VALUE: rock
// * KEY: getPlayer2Choice, VALUE: paper
// * KEY: getPlayer2Choice, VALUE: scissors
// 
// Returns information who winns, choises for Players, and scores for Player 1, Player 2 and ties.
// 
// 
// >*A succesfull API request will return HTTP 200 status.*

@name("Get a value of choice of Player 2 (PvP)")
GET "http://localhost/scores/player2"
? "getPlayer2Choice"= "rock"
? "getPlayer2Choice"= "paper"
? "getPlayer2Choice"= "scissors"



// **API endpoint to get a value of choice of Player 1 in PvC game:**
// 
// Params to choose (choose only 1):
// * KEY: getPlayer1Choice, VALUE: rock
// * KEY: getPlayer1Choice, VALUE: paper
// * KEY: getPlayer1Choice, VALUE: scissors
// 
// Params for computer choose computer in random selection funktion.
// 
// Params which computer choose for getPlayer2choice (only 1):
// * KEY: getPlayer2Choice, VALUE: rock
// * KEY: getPlayer2Choice, VALUE: paper
// * KEY: getPlayer2Choice, VALUE: scissors
// 
// Returns information who winns, choises for Players, and scores for Player 1, Player 2 and ties.
// 
// >*A succesfull API request will return HTTP 200 status.*

@name("Get a value of choice of Player 1 and Player 2 (PvC)")
GET "http://localhost/scores/playerVsComp"
? "getPlayer1Choice"= "rock"
? "getPlayer1Choice"= "paper"
? "getPlayer1Choice"= "scissors"



// **API endpoint to post scores for Player 1:**
// * scores for player 1: scoresPlayer1 
// 
// Player 1 wins when chooses:
// * "rock" when Player 2 chooses "scissors"
// * "paper" when Player 2 chooses "rock"
// * "scissors" when Player 2 chooses "paper"
// 
// Returns a number of scores for Player 1.
// 
// >*A succesfull API request will return HTTP 200 status.*

@name("Post scores for Player 1")
POST "http://localhost/scores/scoresPlayer1"



// **API endpoint to post scores for Player 2:**
// * scores for player 2: scoresPlayer2
// 
// Player 2 wins when chooses:
// * "rock" when Player 1 chooses "paper"
// * "paper" when Player 2 chooses "scissors"
// * "scissors" when Player 2 chooses "rock"
// 
// Returns a number of scores for Player 2.
// 
// >*A succesfull API request will return HTTP 200 status.*

@name("Post scores for Player 2")
POST "http://localhost/scores/scoresPlayer2"



// **API endpoint to post scores for ties:**
// * scores for ties: ties
// 
// A tie is when both Players (1 and 2) have the same choice:
// * "rock" / "rock"
// * "paper" / "paper"
// * "scissors" / "scissors"
// 
// Returns a number of scores for ties.
// 
// >*A succesfull API request will return HTTP 200 status.*

@name("Post scores for ties")
POST "http://localhost/scores/ties"



// **API endpoint to post reset game:**
// * scores for player 1: scoresPlayer1
// * scores for player 2: scoresPlayer2
// * scores for ties: ties 
// 
// Params:
// 
// resetValue=0
// 
// Sets value 0 on each score-variable.
// 
// Returns scores with value 0 for Player 1, Player 2 and ties.
// 
// >*A succesfull API request will return HTTP 200 status.*

@name("Post reset game")
POST "http://localhost/reset"
? "resetValue"= "0"



// **API endpoint to put and update a value of all scores:**
// * scores for player 1: scoresPlayer1
// * scores for player 2: scoresPlayer2
// * scores for ties: ties 
// 
// Returns scores for Player 1, Player 2 and ties.
// 
// >*A succesfull API request will return HTTP 200 status.*

@name("Put a value of all scores")
PUT "http://localhost/scores"
? "scoresPlayer1"= "2"
? "scoresPlayer2"= "4"
? "ties"= "6"



