#!/usr/bin/env dothttp

// From the [Spotify Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/), follow one of 3 optional flows to obtain app authorization.
// 
// ### Refreshable app authorization: [Client Credentials](https://developer.spotify.com/documentation/general/guides/authorization-guide/#client-credentials-flow)
// 
// > The Client Credentials flow is used in server-to-server authentication. Only endpoints that do not access user information can be accessed. 
// 
// > You do: Login with your **Client ID** and **Secret Key**
// 
// > You get: **Access token**
// 
// This method uses `https://accounts.spotify.com/api/token`.
// 
// ### In Postman
// 
// Under the **Authorization** tab, select `Basic Auth`. You'll need to input `spotify_client_id` as the username and `spotify_client_secret` as the password. You can update these credentials under the **Authorization** tab, or better yet, update these [environment variables](https://learning.postman.com/docs/postman/variables-and-environments/managing-environments/). 
// 
// ![[Auth tab](https://i.imgur.com/lWEZ80e.png)](https://i.imgur.com/lWEZ80e.png)
// 
// Once you do this, Postman adds an `Authorization` header with your credentials encoded to Base64 under the **Headers** tab.
// 
// ![[Headers tab](https://i.imgur.com/07BHrU8.png)](https://i.imgur.com/07BHrU8.png)
// 
// This request is an example of using the Authorization helper in Postman. The following request shows an example of how to do this by manually adding a header, instead.

@name("Spotify - Client Credentials flow (via helper)")
POST "https://accounts.spotify.com/api/token"
basicauth("{{spotify_client_id}}", "{{spotify_client_secret}}")
data({
    "grant_type": [
        "client_credentials"
    ]
})


// From the [Spotify Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/), follow one of 3 optional flows to obtain app authorization.
// 
// ### Refreshable app authorization: [Client Credentials](https://developer.spotify.com/documentation/general/guides/authorization-guide/#client-credentials-flow)
// 
// > The Client Credentials flow is used in server-to-server authentication. Only endpoints that do not access user information can be accessed. 
// 
// > You do: Login with your **Client ID** and **Secret Key**
// 
// > You get: **Access token**
// 
// This method uses `https://accounts.spotify.com/api/token`.
// 
// ### In Postman
// 
// Under the **Headers** tab, add an `Authorization` header with a placeholder for a value of `Basic {{encodedIdAndKey}}`. The variable `encodedIdAndKey` is currently unresolved. Let's define this variable in the next step.
// 
// ![[Headers tab](https://i.imgur.com/W6OYi94.png)](https://i.imgur.com/W6OYi94.png)
// 
// Under the **Pre-request Script** tab, encode your `spotify_client_id` and `spotify_client_secret` to Base64, and then set a local variable called `encodedIdAndKey` so you can use it in the Header. When you **Send** the request, Postman will attach the encoded header.
// 
// ![[pre-request script](https://i.imgur.com/t9fqNeK.png)](https://i.imgur.com/t9fqNeK.png)
// 
// This request shows how to manually add a header in Postman. The previous request was an example of how to do this by using the Authorization helper.

@name("Spotify - Client Credentials flow (via manual header)")
POST "https://accounts.spotify.com/api/token"
"Authorization": "Basic {{encodedIdAndKey}}"
data({
    "grant_type": [
        "client_credentials"
    ]
})


// From the [Spotify Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/), follow one of 3 optional flows to obtain app authorization.
// 
// ### Refreshable user authorization: [Authorization Code](https://developer.spotify.com/documentation/general/guides/authorization-guide/#authorization-code-flow)
// 
// > This flow is suitable for long-running applications in which the user grants permission only once. It provides an **access token** that can be _refreshed_. 
// 
// > You do: Prompt your user to a webpage where they can choose to grant you access to their data.
// 
// > You get: **access token** and **refresh token**
// 
// ### In Postman
// 
// Let's use the Authorization Code flow helper for this request from the [Spotify Web API](https://developer.spotify.com/documentation/web-api/).
// 
// Under the **Authorization** tab, select `OAuth 2.0`. Input the required information.
// - **Grant Type** is `Authorization Code`
// - **Callback URL** is the exact `Redirect URI` you entered when creating your Spotify app
// - **Auth URL** is `https://accounts.spotify.com/authorize`
// - **Access Token URL** is `https://accounts.spotify.com/api/token`
// - **Client ID** is your Spotify `Client ID`
// - **Client Secret** is your Spotify `Client Secret`
// 
// ![[Get new access token modal](https://i.imgur.com/mc6YUxZ.png)](https://i.imgur.com/mc6YUxZ.png)
// 
// Click **Request Token** and walk through the process to authorize access. Click **Use Token** to populate the **Access Token** field in Postman. When you hit **Send**, Postman will attach an Authorization header formatted like `Bearer <your-token>` substituting in your access token for `<your-token>`.
// 
// ![[authorization gif](https://i.imgur.com/L5aTx3x.gif)](https://i.imgur.com/L5aTx3x.gif)
// 
// This request shows how to use the Authorization Code helper in Postman to get a token and add it in an Authorization header automatically formatted like `Bearer <your-token>`. The next request will walk through using the Implicit Grant helper to add an Authorization header.

@name("Spotify - Authorization Code flow (via helper)")
GET "https://api.spotify.com/v1/search"
? "q"= "classical"
? "type"= "track"
? "market"= "US"



// From the [Spotify Authorization Guide](https://developer.spotify.com/documentation/general/guides/authorization-guide/), follow one of 3 optional flows to obtain app authorization.
// 
// ### Temporary user authorization: [Implicit Grant](https://developer.spotify.com/documentation/general/guides/authorization-guide/#implicit-grant-flow)
// 
// > Implicit grant flow is for clients that are implemented entirely using JavaScript and running in the resource ownerâ€™s browser. You do not need any server-side code to use it. 
// 
// > You do: You direct user to Spotify Accounts Service.
// 
// > You get: **access token**
// 
// ### In Postman
// 
// Let's use the Authorization Code flow helper for this request from the [Spotify Web API](https://developer.spotify.com/documentation/web-api/).
// 
// Under the **Authorization** tab, select `OAuth 2.0`. Input the required information.
// - **Grant Type** is `Implicit`
// - **Callback URL** is the exact `Redirect URI` you entered when creating your Spotify app
// - **Auth URL** is `https://accounts.spotify.com/authorize`
// - **Client ID** is your Spotify `Client ID`
// 
// ![[Request modal](https://i.imgur.com/WPjxgoK.png)](https://i.imgur.com/WPjxgoK.png)
// 
// Click **Request Token** and walk through the process to authorize access. Click **Use Token** to populate the **Access Token** field in Postman. When you hit **Send**, Postman will attach an Authorization header formatted like `Bearer <your-token>` substituting in your access token for `<your-token>`.
// 
// This request shows how to use the Authorization Code helper in Postman to get a token and add it in an Authorization header automatically formatted like `Bearer <your-token>`. The next request will walk through how to get a token and then use it in a custom Authorization header.

@name("Spotify - Implicit flow (via helper)")
GET "https://api.spotify.com/v1/search"
? "q"= "classical"
? "type"= "track"
? "market"= "US"



// From the PagerDuty Developer Platform, read the documentation for [Creating incidents using the REST API](https://community.pagerduty.com/forum/t/creating-incidents-using-our-rest-api/548), and [Authentication of REST API calls](https://developer.pagerduty.com/docs/rest-api-v2/authentication/).
// 
// ### In PagerDuty
// 
// Generate a General Access REST API key as described in the [PagerDuty docs](https://support.pagerduty.com/docs/generating-api-keys#section-generating-a-general-access-rest-api-key).
// 
// ### In Postman
// 
// In the previous example, we used the OAuth 2.0 authorization helper to automatically add a header formatted like `Bearer <your-token>`. The PagerDuty REST API accepts an Authorization header formatted differently.
// 
// Copy the PagerDuty API key to your clipboard, or better yet, save it as an [environment variable](https://learning.postman.com/docs/postman/variables-and-environments/managing-environments/). Once again, we won't use the Auth helper to automatically add the Header. Now that you have your API token saved somewhere, manually add the Authorization header formatted like `Token token=<the-token>`.
// 
// ![[pagerduty header](https://i.imgur.com/XalXCqj.png)](https://i.imgur.com/XalXCqj.png)

@name("PagerDuty - Authentication (via manual header)")
GET "https://api.pagerduty.com/incidents"
"Accept": "application/vnd.pagerduty+json;version=2"
"Authorization": "Token token={{pagerduty_api_key}}"


// From the PagerDuty Developer Platform, read the [documentation for OAuth 2.0: PKCE Flow](https://developer.pagerduty.com/docs/app-integration-development/oauth-2-pkce/) for mobile and browser apps.
// 
// ### In Postman
// 
// Under the **Authorization** tab of any request, select `OAuth 2.0`. Click **Get New Access Token**. From there, select a **Grant Type** of `Authorization Code (With PKCE)`. Input your data like in the previous request. The **Code Challenge Method** can be either `SHA-256` or `Plain`. You can also optionally provide a custom **Code Verifier**.
// 
// ![[get new access token modal](https://i.imgur.com/sYQeJ1c.png)](https://i.imgur.com/sYQeJ1c.png)
// 
// Click **Request Token** and walk through the authorization process to generate a new token. The access token can then be used according to your specific APIâ€™s documentation. 
// 
// ![[pagerduty gif](https://i.imgur.com/xZdnp43.gif)](https://i.imgur.com/xZdnp43.gif)
// 
// Copy the access token to your clipboard, or better yet, save it as an [environment variable](https://learning.postman.com/docs/postman/variables-and-environments/managing-environments/). At this time, we can either manually add a header as we did in the previous example. Or we can continue using the Auth helper for OAuth 2.0. 
// 
// ![[pagerduty header](https://i.imgur.com/bMKXd4e.png)](https://i.imgur.com/bMKXd4e.png)
// 
// Remember if you're working with a bunch of different Auth tokens, you can **MANAGE TOKENS** next to where you created them.
// 
// ![[pagerduty header](https://i.imgur.com/yGKytZl.png)](https://i.imgur.com/yGKytZl.png)

@name("PagerDuty - PKCE flow (via helper)")
GET "https://api.pagerduty.com/incidents"
"Accept": "application/vnd.pagerduty+json;version=2"



