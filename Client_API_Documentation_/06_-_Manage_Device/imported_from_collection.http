#!/usr/bin/env dothttp

// # RegisterDevice API
//   
// This is a request to register a physical device in our system in addition to associating it with the subscriber on the session. This will
// determine if a physical device already exists based on the physical device passed in. It will use the DeviceId and SerialNumber
// fields to determine if the device already exists.
// 
// If a device exists, that will be associated to. If it is determined that a device does not exist, then a new one is created to be
// associated to. DeviceType and PhysicalDeviceType must be populated on the PhysicalDevice. If a physical device needs
// to be created, they need to be there.
// 
// NOTE: the physical device on the response will contain a populated authentication key. This is the only time the authentication
// key will ever be accessible. The device must save this authentication key off in secure storage for use on subsequent session
// creations in order to obtain a session with elevated privileges for accessing content without a password.
// 
// Can also register a physical device in our system by associating it with the subscriber on the session via a rendezvous code
// obtained from a previous call.
// 
// NOTE: the rendezvous code is only valid for an hour. If more than an hour has elapsed a new code must be requested.
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * Sessions are optional for this method. However, if one is provided, it will be validated and any invalid session will be rejected.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 806 | DeviceNotFound | Fault indicating that a device could not be found |
// | 812 | DuplicateDeviceNickname | Fault indicating that the device's nickname is already used by the subscriber on another device |
// | 804 | DeviceAlreadyAssociated | Fault indicating that the device is already associated to the subscriber |
// | 805 | DeviceNotAvailable | Fault indicating that the device is already associated with another subscriber and the association can not be removed |
// | 810 | InvalidPhysicalDeviceType | Fault indicating that the associated physical device type code for a device is not valid |
// | 811 | AssociationLimitViolation | Fault indicating that the subscriber has reached the limit on device associations |
// | 813 | ExternalDeviceRegistrationFailure | Fault indicating that external device registration failed, e.g. the UV coordinator returned and error during registration |
// 
// # Response
// 
// ![Diagram to follow](http://custom.sbx1.cdops.net/Util/Screenshots/XYZ/RegisterDevice.jpg)
// 
// **AuthenticationKey** - this is rquired by the UnregisterDevice API when removing a removing the registered device.
// 
// **RemainingDeviceAssociations** - shows the remaining number of device registration that can be made.  This value can be set through configuration.
// 
// **SessionId** - this is a device level authenticated token.  The timeouts held by this token are configured separately from the user level authenicated token.
// 
// **DeviceId** - This is an Id supplied by the user and is required by the UnregisterDevice API.
// 
// # Request
// 

@name("RegisterDevice")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/RegisterDevice"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionID": "{{CD_SESSION_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"
json({
    "PhysicalDevice": {
        "DeviceId": "FA4D2EE1-B55B-4655-8799-5CE87BE41EA4_XYZcore",
        "DeviceTypeCode": 10,
        "PhysicalDeviceTypeCode": 1002,
        "SerialNumber": "3767945:1002:FA4D2EE1-B55B-4655-8799-5CE87BE41EA4_XYZcore"
    },
    "Nickname": "Apple iOS - iPhone/iTouch App",
    "AllowPinlessPurchase": true
})


// # RetrieveDevices API
//   
// Retrieve a subscriber's list of registered devices.
// 
// Supply the device "Id" to retrieve details about a single registered device, otherwise all devices registered with the subscriber are returned.
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires a minimum session level of an authenticated device.
// 
// # Request

@name("RetrieveDevices")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/RetrieveDevices"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionID": "{{CD_SESSION_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"



// # UnregisterDevice API
// 
// Unregister a physical device in our system associated to the subscriber on the session
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires a minimum session level of an authenticated device.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 806 | DeviceNotFound | Fault indicating that a device could not be found |
// | 804 | DeviceAlreadyAssociated | Fault indicating that the device is already associated to the subscriber |
// | 805 | DeviceNotAvailable | Fault indicating that the device is already associated with another subscriber and the association can not be removed |
// | 810 | InvalidPhysicalDeviceType | Fault indicating that the associated physical device type code for a device is not valid |
// | 811 | AssociationLimitViolation | Fault indicating that the subscriber has reached the limit on device associations |
// | 801 | CannotRemoveDevice | Fault indicating that the device could not be removed |
// | 813 | ExternalDeviceRegistrationFailure | Fault indicating that external device registration failed, e.g. the UV coordinator returned and error during registration |
// 
// # Request

@name("UnregisterDevice")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/UnregisterDevice"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionID": "{{CD_SESSION_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"




