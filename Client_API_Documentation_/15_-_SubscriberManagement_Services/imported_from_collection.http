#!/usr/bin/env dothttp

// # CreateSession API
// 
// Create a new authenticated session with SS0.
// 
// A single sign-on token which can be used to auto-login a subscriber and receive an authenticated session. 
// The layout of the SSO token is as follows: nonce value;current date;token hash where:
//  
// * nonce value is an optional non-repeatable string. If used, any attempts to replay the request will be rejected. As a result, when using the nonce option, it must be uniquely generated on every request.
// * current date is the current date in UTC. The date must not be in the future and no more than 5 minutes old. 
// Note: Ascendon syncs with NTP time servers, therefore the system generating the time stamp must be accurate. If the calling server is not time synced it is recommended to send a time value that is a minute old.
// * token hash is a SHA1 hash of the following layout: sharedSecret;systemId;externalreference;nonce;currentDate;sharedSecret
// 
// Where
// 
// * sharedSecret is a secret key shared between Content Direct and the business unit, your secret key is set up in the configuration portal
// * systemId is the Content Direct identifier of the business unit
// * externalReference is the subscriber external reference.
// * nonce is the nonce value described above
// * currentDate is the current date described above
// 
// Using the following example data:
// 
// * system id: 14096c47-cbda-4cd3-923e-47943b845a0e
// * externalReference: subscriber external reference
// * nonce: 1cd612b0-725f-3126-262a-453bd12e089c
// * currentDate: 2017-10-13T21:57:35Z
// * sharedSecret: secret
// 
// Where the hash is calculated as the SHA1 hash of "secret;2355ebf6-7208-4a75-a630-66d23c64991e;externalReference;6XYZ0be7b-3fac-4d32-b8b5-10f2b0b16296;2017-10-11 17:31:58Z;secret"
// 
// The SSO token passed in the CreateSession call is built up from nonce value, current date, token hash (SHA1) with each element being separated with a “;”. For example:
// 
// "9b9ef3bb-260f-b557-fb3a-3774843f4ce4;2017-10-31T20:25:17.00Z;b163303e1c70462b4522d11cda623544081e17f6"
// 
// # Security
// 
// This method requires HTTPS. Any request without SSL will be rejected.
// Sessions are optional for this method. However, if one is provided, it will be validated and any invalid session will be rejected.
// This method is available when the system is in maintenance mode.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 117 | AccessDenied | The session does not have rights to the requested resource |
// | 806 | DeviceNotFound | Fault indicating that a device could not be found |
// | 1120 | SubscriberNotFound | The requested subscriber was not found |
// | 113 | LoginExists | The requested login already exists |
// | 1145 | SecurityTokenValidationFailed | Fault indicating that an external security token could not be validated |
// | 115 | PasswordStrengthViolation | The requested password failed the password complexity rules |
// |116 | NonUniquePasswordViolation | The requested password failed to meet the password history rules |
// | 126 | AlternateCountryNotFound | The alternate country provided in the request headers is not valid. |
// | 812 | DuplicateDeviceNickname | Fault indicating that the device's nickname is already used by the subscriber on another device |
// 
// # Session Token
// 
// The session token is returned in the SessionId property.  This value must be passed to subsequent API calls requiring an authenticated session.
// 
// # Request

@name("Subscriber/CreateSession (SSO)")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/CreateSession"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"
data('{
    "SsoCredentials": {
        "Subscriber": {
            "Email": "test-1513962486@test.com",
            "ExternalReference": "d3960667a7de88d3064ef098d0b37d6f",
            "Language": "en-US"
        },
        "Token": "2351c3dc-c8fb-f2f8-706c-53f8edaa8eef;2017-12-22T17:54:36.00Z;6b2da50d8e838d3bb5d2db98d80f52f24cdd2e64"
    }
}
')


// # CreateSubscriber API
//   
// Create a subscriber.
// 
// NOTE: The email address used in this example (ABC Corp_1@sharklasers.com) is a disposable email address created at sharklasers.com and emails sent to this address can be viewed by entering the ABC Corp_1@sharklasers.com id at the Shark Lasers site.  They remain available for 1 hour and are then automatically deleted whether read or not.
// 
// NOTE: The Consent additional properties (ConsentContact, ConsentThirdPartyContact, ConsentAccessTC, ConsentOttTC and ConsentEventApp) are configured as string data type (max size 500).  BAU values are expect to be 1 (consent given) and 0 (consent not given).  In the future these fields are expected to hold the date consent was given or blank if consent is not given.
// 
// # Security
// 
// + This method requires HTTPS. Any request without SSL will be rejected.
// + This method requires either a user session or user credentials.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 1101 | AddressValidationFailed | Indicates the address could not be validated |
// | 1193 | FullSuiteAddressValidationFailed | Indicates the address could not be validated for convergent billing |
// | 1118 | AgeViolation | Fault indicating that the provided age did not meet the age requirements configured for the business unit |
// | 1128 | SubscriberExtensionFault | Fault thrown involving a Subscriber Extension |
// | 113 | LoginExists | The requested login already exists |
// | 115 | PasswordStrengthViolation | The requested password failed the password complexity rules |
// | 217 | AdditionalPropertyNotFound | Indicates that the requested additional property was not found |
// | 4 | ConvergentBillerIssue | Unknown Convergent Biller error |
// | 606 | InvalidPaymentInstrument | Fault indicating that the requested payment instrument is not valid |
// | 131 | CommercialHouseholdNotAllowed | A household cannot be created for a commercial subscriber |
// 
// # Request

@name("CreateSubscriber")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/SubscriberManagement/CreateSubscriber"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-User": "{{USER_LOGIN}}"
"CD-Password": "{{USER_PWD}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"
data('{
    "Addresses": [
        {
            "City": "Chicago",
            "Country": "USA",
            "DefaultBilling": true,
            "DefaultHome": true,
            "DefaultPostal": true,
            "DefaultService": true,
            "DefaultShipping": true,
            "DefaultWork": false,
            "LineOne": "48 Warwick Street",
            "PostalCode": "60606",
            "Locked": false,
            "Name": "48 Warwick Street",
            "Status": 1,
            "Verified": true
        }
    ],
    "AutoLogin": true,
    "Credentials": {
        "Login": "{{LOGIN_2}}",
        "Password": "{{PASSWORD_2}}",
        "PasswordChallenge": "Mother\'s maiden name",
        "PasswordChallengeResponse": "Smith"
    },
    "Subscriber": {
        "AdditionalProperties": [
            {
                "ExternalReference": "SpoilerAlertEnabled",
                "Values": [
                    "True"
                ]
            },
            {
                "ExternalReference": "FavouriteDrivers",
                "Values": [
                    "Driver 1",
                    "Driver 2"
                ]
            },
            {
                "ExternalReference": "FavouriteTeams",
                "Values": [
                    "Team 1",
                    "Team 2"
                ]
            },
            {
                "ExternalReference": "OneOffConsentsEnabled",
                "Values": [
                    "True"
                ]
            },
            {
                "ExternalReference": "DriverOfTheDayVote",
                "Values": [
                    "Driver ABC"
                ]
            },
            {
                "ExternalReference": "ConsentContact",
                "Values": [
                    "1"
                ]
            },
            {
                "ExternalReference": "ConsentThirdPartyContact",
                "Values": [
                    "0"
                ]
            },
            {
                "ExternalReference": "ConsentAccessTC",
                "Values": [
                    "1"
                ]
            },
            {
                "ExternalReference": "ConsentOttTC",
                "Values": [
                    "0"
                ]
            },
            {
                "ExternalReference": "ConsentEventApp",
                "Values": [
                    "1"
                ]
            }
        ],
        "Email": "ABC Corp_1@sharklasers.com",
        "ExternalReference": "{{SUBSCRIBER_EXT_REF_2}}",
        "FirstName": "CSG",
        "Language": "en-US",
        "LastName": "Test",
        "Status": 1,
        "Title": "Mr",
        "Gender": 1,
        "ContactPreferences": [
            {
                "ContactEventType": 54,
                "ContactMethod": 1,
                "OptIn": true
            },
            {
                "ContactEventType": 57,
                "ContactMethod": 1,
                "OptIn": true
            },
            {
                "ContactEventType": 56,
                "ContactMethod": 1,
                "OptIn": true
            },
            {
                "ContactEventType": 55,
                "ContactMethod": 1,
                "OptIn": true
            },
            {
                "ContactEventType": 58,
                "ContactMethod": 1,
                "OptIn": true
            }
        ]
    }
}')


// # RetrieveSubscriber API
//   
// Retrieve the requested subscriber
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires either a user session or user credentials.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 1120 | SubscriberNotFound | The requested subscriber was not found |
// | 1223 | HierarchyNodeNotFound | Hierarchy node not found |
// 
// # Request

@name("RetrieveSubscriber")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/SubscriberManagement/RetrieveSubscriber"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-User": "{{USER_LOGIN}}"
"CD-Password": "{{USER_PWD}}"
"CD-Language": "{{CD_LANGUAGE}}"
"CD-SubscriberID": "{{SUBSCRIBER_ID_1}}"
data('{}')


// # UpdateSubscriber API
//   
// Update the requested subscriber
// 
// The example show in this documentation demonstrates how to add an additional property to the subscriber's profile.
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires either a user session or user credentials.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 1120 | SubscriberNotFound | The requested subscriber was not found |
// | 1193 | FullSuiteAddressValidationFailed | Indicates the address could not be validated for convergent billing |
// | 4 | ConvergentBillerIssue | Unknown Convergent Biller error |
// | 113 | LoginExists | The requested login already exists |
// | 1118 | AgeViolation | Fault indicating that the provided age did not meet the age requirements configured for the business unit |
// | 131 | CommercialHouseholdNotAllowed | A household cannot be created for a commercial subscriber |
// 
// # Request

@name("UpdateSubscriber")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/SubscriberManagement/UpdateSubscriber"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-User": "{{USER_LOGIN}}"
"CD-Password": "{{USER_PWD}}"
"CD-Language": "{{CD_LANGUAGE}}"
"CD-SubscriberId": "{{SUBSCRIBER_ID_1}}"
"Content-Type": "application/json"
data('{
    "Subscriber": {
        "Category": 0,
        "Created": "2017-12-14T12:32:31.090Z",
        "Email": "john.boyd@csgi.com",
        "ExternalReference": "1234567890",
        "FirstName": "John",
        "HasActiveSubscriptions": true,
        "Id": 2211540,
        "Language": "en-US",
        "LastName": "Boyd",
        "Login": "john.boyd@csgi.com",
        "Status": 1,
        "AdditionalProperties": [
            {
                "ExternalReference": "FavouriteTeams",
                "Id": 1043,
                "Name": "Favourite Teams",
                "Values": [
                    "Team 1",
                    "Team 2"
                ]
            },
            {
                "ExternalReference": "SpoilerAlertEnabled",
                "Id": 1044,
                "Name": "Spoiler Alert Enabled",
                "Values": [
                    "True"
                ]
            },
            {
                "ExternalReference": "OneOffConsentsEnabled",
                "Id": 1045,
                "Name": "One Off Consents Enabled",
                "Values": [
                    "True"
                ]
            },
            {
                "ExternalReference": "ConsentThirdPartyContact",
                "Id": 1049,
                "Name": "Consent Third Party Contact",
                "Values": [
                    "15/12/2016 13:24:05"
                ]
            },
            {
                "ExternalReference": "ConsentOttTC",
                "Id": 1051,
                "Name": "Consent OTT T&C",
                "Values": [
                    "15/12/2016 13:24:05"
                ]
            },
            {
                "ExternalReference": "FavouriteDrivers",
                "Id": 1071,
                "Name": "Favourite Drivers",
                "Values": [
                    "Driver 1",
                    "Driver 2"
                ]
            },
            {
                "ExternalReference": "ConsentAccessTC",
                "Id": 1072,
                "Name": "Consent Access T&C",
                "Values": [
                    "15/12/2016 13:24:05"
                ]
            },
            {
                "ExternalReference": "ConsentContact",
                "Id": 1073,
                "Name": "Consent Contact",
                "Values": [
                    "15/12/2016 13:24:05"
                ]
            },
            {
                "ExternalReference": "Marketing_Country",
                "Id": 1136,
                "Name": "Marketing Country",
                "Values": []
            }
        ],
        "ContactPreferences": [],
        "ExternalAuthenticationReference": "1234567890",
        "ExternalAuthorizations": [
            {
                "ContextData": "GB",
                "Id": 182423,
                "Provider": 6002,
                "SubscriberExternalReference": "643141",
                "TokenActive": null
            }
        ],
        "Gender": 1,
        "HomeCountry": "GBR",
        "InvoiceConfiguration": {},
        "LastFailedLogin": "2018-06-29T14:37:59.840Z",
        "LastSessionCountry": "GBR",
        "LastSuccessfulLogin": "2018-06-29T14:38:20.780Z",
        "StatusName": "Active",
        "SubscriberConsents": [],
        "SubscriberTypeDetails": {
            "CreditClass": "Low Risk",
            "IsReadOnly": false
        },
        "TaxExemption": {
            "CountyExempt": false,
            "FederalExempt": false,
            "Id": 11452,
            "Lifeline": false,
            "LocalExempt": false,
            "StateExempt": false,
            "Unincorporated": false,
            "WholesaleFlag": false
        },
        "TermsAndConditionsAccepted": "2017-12-14T12:32:24.553Z"
    }
}')


// # SubmitOrder API
// 	
// Submit an order for requested shopping cart products.
// 
// Ordered products will be fulfilled through workflow process and assigned to subscriber account.
// 
// Orders with non-zero charges must be submitted using a fully authenticated session.
// 
// If a payment instrument is not supplied in the request, the system will use the default payment instrument.  If the supplied payment instrument does not exist, it will be created.
// 
// ## API Call Flow
// 
// 1.	User loads the app and proceeds to purchase the Subscription Product.
// 2.	The app walks the user through the purchase options and then user clicks BUY with his/her iTunes account.
// 3.	iTunes will then send back the iTunes receipt for the purchase.
// 4.	The app will then make a SubmitOrder call to CSG.
// 	1.	Pass the Google payment instrument in the SubmitOrder call.
// 		1.	There are two fields for PaymentInstrument:
// 			+ Username – iTunes user name
// 			+ iTunesTransactionReceipt – the receipt returned by iTunes for an in-app purchase
// 			+ Note: The receipt from iTunes need to be escaped so that it passes the JSON parser
// 	2.	Pass the CSG Product Id and Plan Id in the Shopping Cart
// 5.	If successful, the iTunes account will be saved on file for future subscription charges.
// 
// If the purchased product is a subscription, then an iTunes payment instrument will be stored on the subscriber wallet to handle billing cycles.  For one-time products, no payment instrument is stored on the subscriber account.
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires a minimum session level of an authenticated device.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 920 | ProductNotFound | Fault indicating that the requested product could not be found |
// | 916 | PricingPlanNotFound | Fault indicating that the requested pricing plan is not found |
// | 1014 | InvalidOrderPayment | Fault when the order payment doesn't match the cost of the order |
// | 1015 | InvalidOrderPaymentInstrumentAmount | Fault to be returned when an invalid order payment instrument amount is passed in an order |
// | 1019 | InvalidShoppingCart | Fault exception thrown for invalid shopping carts |
// | 1010 | InvalidInstanceProperty | Fault indicating that an invalid instance property has been provided on the request |
// | 1011 | InvalidItemCurrency | Fault exception thrown when one item's currency is different from the rest in an order |
// | 1012 | InvalidItemOrderingType | Fault indicating that a requested pricing plan is not orderable |
// | 623 | SpendingLimitViolation | Fault indicating that a subscriber has exceeded their spending limit |
// | 1028 | ProductNotOrderable | Fault thrown when an order is attempted on a non-stand alone product |
// | 1034 | SubscriptionNotOrderable | Fault thrown when a subscriber attempts to order a subscription product of which they already have an active subscription |
// | 1021 | InvalidSubscriberProductStatus | Fault thrown when an order is attempted on a subscriber product that is in an invalid state |
// | 1009 | InvalidDiscount | Fault exception thrown when a discount is not valid for an order item |
// | 1008 | InvalidDevice | Fault indicating that an invalid physical device was provided |
// | 1006 | DeviceRequired | Fault indicating that a physical device id was required by the associated delivery capability, but was not provided |
// | 1040 | CouponRequired | Fault indicating that a coupon was required by the requested pricing plan but was not provided in the request |
// | 1039 | InvalidSubscriptionPaymentInstrument | Fault thrown when a valid payment instrument is not provided for a subscription pricing plan that requires a payment instrument. |
// | 616 | RevenueTaxFailure | Fault thrown on tax processing failures. |
// | 617 | TransactionFailure | The financial transaction failed to process |
// | 607 | InvalidPaymentRequest | Fault thrown when an invalid payment request is made. |
// | 606 | InvalidPaymentInstrument | Fault indicating that the requested payment instrument is not valid |
// | 603 | InsufficientBalance | Fault thrown when insufficient funds are provided to cover the purchase |
// | 1018 | InvalidShippingMethod | Fault thrown when a shipping order is requested with an invalid shipping method |
// | 1049 | ProductAlreadyPurchased | Fault indicating that request product has already been purchased and may not be purchased again based on the product's configuration |
// | 943 | ShippingMethodNotFound | Fault indicating that the requested shipping method could not be found |
// | 1101 | AddressValidationFailed | Indicates the address could not be validated |
// | 1100 | AddressNotFound | Indicates the requested address could not be found |
// | 611 | PaymentInstrumentNotFound | The requested payment instrument was not found |
// | 1144 | CaptchaVerificationFailed | Fault indicating Captcha is required on the method and the challenge-response provided is invalid. |
// | 1052 | InvalidExternalRedemptionRequest | Fault thrown when unable to handle external redemption request |
// | 1038 | InvalidCouponRedemption | Fault that occurs when a coupon code is cannot be applied to an order or subscription |
// | 1106 | InvalidBillingAddress | Fault thrown when there is mismatch between the session or home country and the payment instrument's billing addresses based on system configuration |
// | 217 | AdditionalPropertyNotFound | Indicates that the requested additional property was not found |
// | 626 | ExternalGiftCardFailure | Fault there is an error during an external gift card call to a provider |
// | 1197 | GeneralLedgerGuidenceCodeNotConfigured | Indicates that the general ledger code was not found |
// | 1059 | InvalidBulkItemDetail | Fault exception thrown for invalid bulk item details |
// | 1061 | DuplicateOrderFault | Trying to submit a duplicate order |
// 
// # Request
// 
// There are two options to identify the subscriber with either of the following headers:
// 
// * CD-SubscriberExternalReference
// * CD-SubscriberId

@name("SubmitOrder (Google Token)")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/SubscriberManagement/SubmitOrder"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-User": "{{USER_LOGIN}}"
"CD-Password": "{{USER_PWD}}"
"CD-Language": "{{CD_LANGUAGE}}"
"CD-SubscriberId": "55520939"
"Content-Type": "application/json"
data('{
    "AdditionalProperties": [
        {
            "ExternalReference": "country_code",
            "Values": ["AUS"]
        }
    ],
    "ShoppingCart": {
        "Items": [
            {
                "ProductExternalReferenceType": "Product Reference",
                "ProductExternalReference": "XYZ_TV_Access_Annual",
                "PricingPlanExternalReferenceType": "Google Play Product Id EXTREF",
                "PricingPlanExternalReference": "643142"
            }
        ]
    },
    "PaymentInstruments": [
        {
            "Type": 12,
            "Name": "GooglePlay1535897867837",
            "Default": false,
            "GooglePlayAccount": {
                "PurchaseToken": "nmpnefnopmjbhnahinndgiip.AO-J1OzKYJGUGkWIeICLmqxF2XVEmurspXo_v0ASRZcsvC3pz3biv3M26tec9OASArzzRXMG5QiGwLbO7xW7KgRK8TuhyrWhP2Ge70isVtwSFikPYx4ddLggJNRXTYeWKKW2TUJgJCKl"
            }
        }
    ]
}')


// # SubmitOrder API
//   
// Submit an order for requested shopping cart products.
// 
// Ordered products will be fulfilled through workflow process and assigned to subscriber account.
// 
// Orders with non-zero charges must be submitted using a fully authenticated session.
// 
// If a payment instrument is not supplied in the request, the system will use the default payment instrument.  If the supplied payment instrument does not exist, it will be created.
// 
// ## API Call Flow
// 
// 1.  User loads the app and proceeds to purchase the Subscription Product.
// 2.  The app walks the user through the purchase options and then user clicks BUY with his/her iTunes account.
// 3.  iTunes will then send back the iTunes receipt for the purchase.
// 4.  The app will then make a SubmitOrder call to CSG.
//   1.  Pass the Google payment instrument in the SubmitOrder call.
//     1.  There are two fields for PaymentInstrument:
//       + Username – iTunes user name
//       + iTunesTransactionReceipt – the receipt returned by iTunes for an in-app purchase
//       + Note: The receipt from iTunes need to be escaped so that it passes the JSON parser
//   2.  Pass the CSG Product Id and Plan Id in the Shopping Cart
// 5.  If successful, the iTunes account will be saved on file for future subscription charges.
// 
// If the purchased product is a subscription, then an iTunes payment instrument will be stored on the subscriber wallet to handle billing cycles.  For one-time products, no payment instrument is stored on the subscriber account.
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires a minimum session level of an authenticated device.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 920 | ProductNotFound | Fault indicating that the requested product could not be found |
// | 916 | PricingPlanNotFound | Fault indicating that the requested pricing plan is not found |
// | 1014 | InvalidOrderPayment | Fault when the order payment doesn't match the cost of the order |
// | 1015 | InvalidOrderPaymentInstrumentAmount | Fault to be returned when an invalid order payment instrument amount is passed in an order |
// | 1019 | InvalidShoppingCart | Fault exception thrown for invalid shopping carts |
// | 1010 | InvalidInstanceProperty | Fault indicating that an invalid instance property has been provided on the request |
// | 1011 | InvalidItemCurrency | Fault exception thrown when one item's currency is different from the rest in an order |
// | 1012 | InvalidItemOrderingType | Fault indicating that a requested pricing plan is not orderable |
// | 623 | SpendingLimitViolation | Fault indicating that a subscriber has exceeded their spending limit |
// | 1028 | ProductNotOrderable | Fault thrown when an order is attempted on a non-stand alone product |
// | 1034 | SubscriptionNotOrderable | Fault thrown when a subscriber attempts to order a subscription product of which they already have an active subscription |
// | 1021 | InvalidSubscriberProductStatus | Fault thrown when an order is attempted on a subscriber product that is in an invalid state |
// | 1009 | InvalidDiscount | Fault exception thrown when a discount is not valid for an order item |
// | 1008 | InvalidDevice | Fault indicating that an invalid physical device was provided |
// | 1006 | DeviceRequired | Fault indicating that a physical device id was required by the associated delivery capability, but was not provided |
// | 1040 | CouponRequired | Fault indicating that a coupon was required by the requested pricing plan but was not provided in the request |
// | 1039 | InvalidSubscriptionPaymentInstrument | Fault thrown when a valid payment instrument is not provided for a subscription pricing plan that requires a payment instrument. |
// | 616 | RevenueTaxFailure | Fault thrown on tax processing failures. |
// | 617 | TransactionFailure | The financial transaction failed to process |
// | 607 | InvalidPaymentRequest | Fault thrown when an invalid payment request is made. |
// | 606 | InvalidPaymentInstrument | Fault indicating that the requested payment instrument is not valid |
// | 603 | InsufficientBalance | Fault thrown when insufficient funds are provided to cover the purchase |
// | 1018 | InvalidShippingMethod | Fault thrown when a shipping order is requested with an invalid shipping method |
// | 1049 | ProductAlreadyPurchased | Fault indicating that request product has already been purchased and may not be purchased again based on the product's configuration |
// | 943 | ShippingMethodNotFound | Fault indicating that the requested shipping method could not be found |
// | 1101 | AddressValidationFailed | Indicates the address could not be validated |
// | 1100 | AddressNotFound | Indicates the requested address could not be found |
// | 611 | PaymentInstrumentNotFound | The requested payment instrument was not found |
// | 1144 | CaptchaVerificationFailed | Fault indicating Captcha is required on the method and the challenge-response provided is invalid. |
// | 1052 | InvalidExternalRedemptionRequest | Fault thrown when unable to handle external redemption request |
// | 1038 | InvalidCouponRedemption | Fault that occurs when a coupon code is cannot be applied to an order or subscription |
// | 1106 | InvalidBillingAddress | Fault thrown when there is mismatch between the session or home country and the payment instrument's billing addresses based on system configuration |
// | 217 | AdditionalPropertyNotFound | Indicates that the requested additional property was not found |
// | 626 | ExternalGiftCardFailure | Fault there is an error during an external gift card call to a provider |
// | 1197 | GeneralLedgerGuidenceCodeNotConfigured | Indicates that the general ledger code was not found |
// | 1059 | InvalidBulkItemDetail | Fault exception thrown for invalid bulk item details |
// | 1061 | DuplicateOrderFault | Trying to submit a duplicate order |
// 
// # Request
// 
// There are two options to identify the subscriber with either of the following headers:
// 
// * CD-SubscriberExternalReference
// * CD-SubscriberId

@name("SubmitOrder (iTunes Receipt)")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/SubscriberManagement/SubmitOrder"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-User": "{{USER_LOGIN}}"
"CD-Password": "{{USER_PWD}}"
"CD-Language": "{{CD_LANGUAGE}}"
"CD-SubscriberId": "55520939"
"Content-Type": "application/json"
data('{
    "AdditionalProperties": [
        {
            "ExternalReference": "country_code",
            "Values": ["AUT"]
        }
    ],
  "PaymentInstruments": [
    {
      "Default": false,
      "ITunesAccount": {
        "TransactionReceipt": "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",
        "UserName": "kolbfabian@yahoo.de"
      },
      "Name": "XYZ TV Pro Monthly_2018-09-02 09:16:59 +0000",
      "Status": 1,
      "Type": 6
    }
  ],
  "RecordPaymentInformation": true,
  "SendNotification": false,
  "ShoppingCart": {
    "Items": [
      {
        "ProductExternalReference": "XYZ_TV_Pro_Monthly",
        "ProductExternalReferenceType": "iTunes Connect Product ID",
        "PricingPlanExternalReference": "XYZ_TV_Pro_Monthly",
        "PricingPlanExternalReferenceType": "iTunes App Store Product Id",
        "Quantity": 1
      }
    ]
  }
}')


// # RetrieveProductContext API
// 
// Retrieve a product's context personalized for the subscriber, device, and geography
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires either a user session or user credentials.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 920 | ProductNotFound | Fault indicating that the requested product could not be found |
// | 16 | ElasticSearchFault | Indicates a fault thrown for failed ElasticSearch operation |
// 
// # Request
// 
// Request to retrieve a product's context personalized for the subscriber, device, and geography
// Either the id, product external reference or product pricing plan association external reference must be provided

@name("RetrieveProductContext (single product)")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/SubscriberManagement/RetrieveProductContext"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-User": "{{USER_LOGIN}}"
"CD-Password": "{{USER_PWD}}"
"CD-Language": "{{CD_LANGUAGE}}"
"CD-SubscriberExternalReference": "{{SUBSCRIBER_EXT_REF_2}}"
"Content-Type": "application/json"
data('{
    "ProductExternalReferenceType": "Product Reference",
    "ProductExternalReference": "XYZ_Access_Monthly",
    "IncludeEntitlementContext": true,
    "IncludeOrderablePricingPlans": true 
}
')


// # RetrieveProductContext API
// 
// Retrieve a product's context personalized for the subscriber, device, and geography
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires either a user session or user credentials.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 920 | ProductNotFound | Fault indicating that the requested product could not be found |
// | 16 | ElasticSearchFault | Indicates a fault thrown for failed ElasticSearch operation |
// 
// # Request
// 
// Request to retrieve a product's context personalized for the subscriber, device, and geography
// Either the id, product external reference or product pricing plan association external reference must be provided
// 
// NOTE:
// 
// 1. IncludeOrderablePricingPlans - Indicates if qualified related products should be determined, but is not supported for multiple product requests.
// 2. ProductExternalReferences - A list of product external references in which context is being requested for. When requesting a list, the ProductContexts list is populated instead. Only a single type of external reference is supported in a single request.

@name("RetrieveProductContext (multiple products)")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/SubscriberManagement/RetrieveProductContext"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-User": "{{USER_LOGIN}}"
"CD-Password": "{{USER_PWD}}"
"CD-Language": "{{CD_LANGUAGE}}"
"CD-SubscriberExternalReference": "{{SUBSCRIBER_EXT_REF_2}}"
"Content-Type": "application/json"
data('{
    "ProductExternalReferenceType": "Product Reference",
    "ProductExternalReferences": [
        "XYZ_Access_Monthly",
        "XYZ_Access_Annual"
    ],
    "IncludeEntitlementContext": true,
    "IncludeOrderablePricingPlans": true
}')


// # ResetRevokedPassword API
// 
// Request to un-revoke a subscriber, generate a new password and email it to a subscriber.  SubscriberId is required in order to use this service
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires either a user session or user credentials.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 108 | EmailSendFailed | The requested email was failed during send |
// 
// # Session Level
// 
// AuthenticatedUser
// 
// # Request
// 
// Request to un-revoke a subscriber, generates a new password and emails it to the subscriber to their email address on file.
// 
// The email will contain text similar to this:
// 
// Hi there,
// 
// You have requested a new password. Please use this as your temporary password to sign in:
// 
// xl7nm7
// 
// Please click __[here](https://account.ABC Corp1.com/#/en/login)__ to log in with your temporary password or copy the URL below and paste it into your web browser's navigation bar. You will then be prompted to change your password to something more memorable.
// 
// https://account.ABC Corp1.com/#/en/login

@name("ResetRevokedPassword")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/SubscriberManagement/ResetRevokedPassword"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-User": "{{USER_LOGIN}}"
"CD-Password": "{{USER_PWD}}"
"CD-Language": "{{CD_LANGUAGE}}"
"CD-SubscriberId": "{{SUBSCRIBER_ID_1}}"
"Content-Type": "application/json"
data('{}')



