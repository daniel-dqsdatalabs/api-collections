#!/usr/bin/env dothttp

// # CreateSubscriber API
//   
// Create a subscriber.
// 
// NOTE: The email address used in this example (ABC Corp_1@sharklasers.com) is a disposable email address created at sharklasers.com and emails sent to this address can be viewed by entering the ABC Corp_1@sharklasers.com id at the Shark Lasers site.  They remain available for 1 hour and are then automatically deleted whether read or not.
// 
// NOTE: The Consent additional properties (ConsentContact, ConsentThirdPartyContact, ConsentAccessTC, ConsentOttTC and ConsentEventApp) are configured as string data type (max size 500).  BAU values are expect to be 1 (consent given) and 0 (consent not given).  In the future these fields are expected to hold the date consent was given or blank if consent is not given.
// 
// # Security
// 
// + This method requires HTTPS. Any request without SSL will be rejected.
// + Sessions are optional for this method. However, if one is provided, it will be validated and any invalid session will be rejected.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 1101 | AddressValidationFailed | Indicates the address could not be validated |
// | 1193 | FullSuiteAddressValidationFailed | Indicates the address could not be validated for convergent billing |
// | 1118 | AgeViolation | Fault indicating that the provided age did not meet the age requirements configured for the business unit |
// | 1128 | SubscriberExtensionFault | Fault thrown involving a Subscriber Extension |
// | 113 | LoginExists | The requested login already exists |
// | 1144 | CaptchaVerificationFailed | Fault indicating Captcha is required on the method and the challenge-response provided is invalid |
// | 1115 | PaymentSourceNotValid | For rechargable stored value accounts, indicates the specired payment source is not valid |
// | 1112 | PaymentInstrumentAuthorizationFailed | Fault indicating that payment instrument authorization failed |
// | 1113 | PaymentInstrumentDetailNotFound | Fault indicating the payment instrument and/or its details could not be found |
// | 612 | PaymentInstrumentTypeNotSupported | Fault thrown when a payment instrument type that is not supported is used in a transaction |
// | 617 | TransactionFailure | The financial transaction failed to process |
// | 611 | PaymentInstrumentNotFound | The requested payment instrument was not found |
// | 606 | InvalidPaymentInstrument | Fault indicating that the requested payment instrument is not valid |
// | 613 | PayPalProcessingFailure | Fault exception occurring from Pay Pal processing |
// | 616 | RevenueTaxFailure | Fault thrown on tax processing failures. |
// | 115 | PasswordStrengthViolation | The requested password failed the password complexity rules |
// | 217 | AdditionalPropertyNotFound | Indicates that the requested additional property was not found |
// | 4 | ConvergentBillerIssue | Unknown Convergent Biller error |
// 
// # Request

@name("CreateSubscriber (L & PW)")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/CreateSubscriber"
"CD-SystemId": "{{CD_SYSTEM_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"CD-DeviceType": "{{CD_DEVICE_TYPE}}"
"Content-Type": "application/json"
json({
    "Subscriber": {
        "BirthDate": "1980-01-01T12:00:00Z",
        "Category": 0,
        "ContactPreferences": [],
        "Created": "2018-03-20T09:22:33.482Z",
        "Email": "{{LOGIN_1}}",
        "FirstName": "Csg",
        "Gender": 0,
        "HomeCountry": "USA",
        "Language": "en-GB",
        "LastName": "Test",
        "TermsAndConditionsAccepted": "2018-03-20T09:22:33.482Z",
        "Title": "Mr"
    },
    "Credentials": {
        "Login": "{{LOGIN_1}}",
        "Password": "{{PASSWORD_1}}"
    },
    "Addresses": [],
    "AutoLogin": true
})


// # RegisterDevice API
//   
// This is a request to register a physical device in our system in addition to associating it with the subscriber on the session. This will
// determine if a physical device already exists based on the physical device passed in. It will use the DeviceId and SerialNumber
// fields to determine if the device already exists.
// 
// If a device exists, that will be associated to. If it is determined that a device does not exist, then a new one is created to be
// associated to. DeviceType and PhysicalDeviceType must be populated on the PhysicalDevice. If a physical device needs
// to be created, they need to be there.
// 
// NOTE: the physical device on the response will contain a populated authentication key. This is the only time the authentication
// key will ever be accessible. The device must save this authentication key off in secure storage for use on subsequent session
// creations in order to obtain a session with elevated privileges for accessing content without a password.
// 
// Available device types for ABC Corp 1:
// 
// * Windows PC (DeviceTypeCode 4, PhysicalDeviceTypeCode 1111)
// * Apple iOS - iPhone/iTouch App (DeviceTypeCode 10, PhysicalDeviceTypeCode 1002)
// * Apple iOS - iPad  App (DeviceTypeCode 11, PhysicalDeviceTypeCode 1003)
// * Apple iOS - Apple TV App (DeviceTypeCode 12, PhysicalDeviceTypeCode 1004)
// * Android Mobile Phone (DeviceTypeCode 16, PhysicalDeviceTypeCode 1000)
// * Android Tablet (DeviceTypeCode 17, PhysicalDeviceTypeCode 1001)
// * Amazon Fire TV (DeviceTypeCode 20055, PhysicalDeviceTypeCode 10045)
// * Amazon Fire Stick (DeviceTypeCode 20056, PhysicalDeviceTypeCode 10046) 
// * Amazon Fire Tablet (DeviceTypeCode 20057, PhysicalDeviceTypeCode 10047)
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * Sessions are optional for this method. However, if one is provided, it will be validated and any invalid session will be rejected.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 806 | DeviceNotFound | Fault indicating that a device could not be found |
// | 812 | DuplicateDeviceNickname | Fault indicating that the device's nickname is already used by the subscriber on another device |
// | 804 | DeviceAlreadyAssociated | Fault indicating that the device is already associated to the subscriber |
// | 805 | DeviceNotAvailable | Fault indicating that the device is already associated with another subscriber and the association can not be removed |
// | 810 | InvalidPhysicalDeviceType | Fault indicating that the associated physical device type code for a device is not valid |
// | 811 | AssociationLimitViolation | Fault indicating that the subscriber has reached the limit on device associations |
// | 813 | ExternalDeviceRegistrationFailure | Fault indicating that external device registration failed, e.g. the UV coordinator returned and error during registration |
// 
// # Response
// 
// ![Diagram to follow](http://custom.sbx1.cdops.net/Util/Screenshots/XYZ/RegisterDevice.jpg)
// 
// **AuthenticationKey** - this is rquired by the UnregisterDevice API when removing a removing the registered device.
// 
// **RemainingDeviceAssociations** - shows the remaining number of device registration that can be made.  This value can be set through configuration.
// 
// **SessionId** - this is a device level authenticated token.  The timeouts held by this token are configured separately from the user level authenicated token.
// 
// **DeviceId** - This is an Id supplied by the user and is required by the UnregisterDevice API.
// 
// # Request
// 

@name("RegisterDevice")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/RegisterDevice"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionID": "{{CD_SESSION_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"
data('{
   "PhysicalDevice": {
      "DeviceId": 123456,
      "DeviceTypeCode": {{DEVICE_TYPE_CODE}},
      "PhysicalDeviceTypeCode": {{PHYSICAL_DEVICE_TYPE_CODE}},
      "SerialNumber": "{{SERIAL_NUMBER}}"
   },
   "Nickname": "Android Mobile Phone",
   "AllowPinlessPurchase": true
}')



