#!/usr/bin/env dothttp

@name("RefreshSession")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/RefreshSession"
"CD-SystemId": "{{CD_SYSTEM_ID}}"
"CD-SessionId": "{{CD_SESSION_ID}}"
"CD-DeviceType": "{{CD_DEVICE_TYPE}}"
"Content-Type": "application/json"
data('{
  "RequireAuthenticatedSession": true
}')


// # CreatePaymentInstrument API
// 
// Create payment instrument on subscriber account
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires a fully authenticated subscriber session.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 1115 | PaymentSourceNotValid | For rechargable stored value accounts, indicates the specired payment source is not valid |
// | 1112 | PaymentInstrumentAuthorizationFailed | Fault indicating that payment instrument authorization failed |
// | 1101 | AddressValidationFailed | Indicates the address could not be validated |
// | 1193 | FullSuiteAddressValidationFailed | Indicates the address could not be validated for convergent billing |
// | 1113 | PaymentInstrumentDetailNotFound | Fault indicating the payment instrument and/or its details could not be found |
// | 612 | PaymentInstrumentTypeNotSupported | Fault thrown when a payment instrument type that is not supported is used in a transaction |
// | 617 | TransactionFailure | The financial transaction failed to process |
// | 611 | PaymentInstrumentNotFound | The requested payment instrument was not found |
// | 606 | InvalidPaymentInstrument | Fault indicating that the requested payment instrument is not valid |
// | 613 | PayPalProcessingFailure | Fault exception occurring from Pay Pal processing |
// | 616 | RevenueTaxFailure | Fault thrown on tax processing failures |
// | 1144 | CaptchaVerificationFailed | Fault indicating Captcha is required on the method and the challenge-response provided is invalid |
// | 602 | GiftCardActivationFailure | Fault indicating that an error occurred activating the gift card |
// | 615 | RevenueConfigurationNotFound | Error reading documentation: Object reference not set to an instance of an object |
// | 626 | ExternalGiftCardFailure | Fault there is an error during an external gift card call to a provider |
// 
// # Response
// 
// ![Diagram to follow](http://custom.sbx1.cdops.net/Util/Screenshots/XYZ/CreatePaymentInstrument.jpg)
// 
// **Id** - Internal unique identifier.  Pass to other API when identifying a particular payment instrument.
// 
// **Default** - Indicates if this payment instrument is the default.  The default payment instrument is selected when a payment instrument is not supply in a SubmitOrder call when one is required.
// 
// # Request

@name("CreatePaymentInstrument (Visa)")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/CreatePaymentInstrument"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionID": "{{CD_SESSION_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"
data('{
    "ApplyToSubscriptions": true,
    "OverrideFraudValidation": false,
    "PaymentInstrument": {
        "BillingAddress": {
            "City": "Chicago",
            "Country": "USA",
            "DefaultBilling": true,
            "DefaultHome": true,
            "DefaultPostal": true,
            "DefaultService": true,
            "DefaultShipping": true,
            "DefaultWork": true,
            "LineOne": "44 West Street",
            "LineTwo": "",
            "PostalCode": "60604",
            "State": "IL",
            "Name": "MR CSG",
            "PhoneNumber": "123456789",
            "Status": 1
        },
        "Created": "2018-01-10T09:43:34.393Z",
        "Default": false,
        "Name": "VISA - 5100",
        "Type": 0,
        "CreditCard": {
            "AccountNumber": "4111111111111111",
            "Cvv": "789",
            "ExpirationMonth": "03",
            "ExpirationYear": "2023",
            "NameOnCard": "Mr CSG",
            "PhoneNumber": "123456789",
            "Type": "1"
        }
    }
}')


// # RetrieveAddresses API
//   
// Retrieve the addresses for a subscriber.  Optional and can be used of it is necessary to displayed the addessed listed on the subscriber.
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires a minimum session level of an authenticated device.
// 
// # Request

@name("RetrieveAddresses")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/RetrieveAddresses"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionID": "{{CD_SESSION_ID}}"
"Content-Type": "application/json"
data('{}')


// # RetrieveWallet API
//   
// Retrieve payment instruments from subscriber account. Optional - Returned payment instruments will not contain detail entities.  RetrievePatmentInstrument must be used to see payment instrument details.
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires a minimum session level of an authenticated device.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 1113 | PaymentInstrumentDetailNotFound | Fault indicating the payment instrument and/or its details could not be found |
// 
// # Request

@name("RetrieveWallet")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/RetrieveWallet"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionID": "{{CD_SESSION_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"
data('{
  "Currency": "USD",
  "ReturnAccountBalances" : true
}')


// # RetrievePaymentInstrument API
//   
// Retrieve payment instrument from subscriber account.  Optional - Returned payment instrument will contain full details.
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires a minimum session level of an authenticated device.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 1113 | PaymentInstrumentDetailNotFound | Fault indicating the payment instrument and/or its details could not be found |
// | 1114 | PaymentInstrumentTypeNotFound | Fault indicating the request payment instrument type could not be found, typically due to invalid configuration |
// | 611 | PaymentInstrumentNotFound | The requested payment instrument was not found |
// 
// # Request

@name("RetrievePaymentInstrument")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/RetrievePaymentInstrument"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionID": "{{CD_SESSION_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"
data('{
    "Id" : {{PAYMENT_INSTRUMENT_ID}}
}')


// # RetrieveProductContext API
// 
// Retrieve a product's context personalized for the subscriber, device, and geography.
// 
// The single product form of RetrieveProductContext together with the "IncludeOrderablePricingPlans" property provides the list orderable pricing plans for the subscriber's context.
// 
// # Security
// 
// + This method must be called using HTTPS. 
// + Sessions are optional for this method. However, if one is provided, it will be validated and any invalid session will be rejected.
// + This method is available when the system is in maintenance mode.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 920 | ProductNotFound | Fault indicating that the requested product could not be found |
// 
// # Request

@name("RetrieveProductContext")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/RetrieveProductContext"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionID": "{{CD_SESSION_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"
data('{
  "ProductExternalReferenceType": "Product Reference",
  "ProductExternalReference": "XYZ_TV_Pro_Monthly",
  "IncludeEntitlementContext": true,
  "IncludeOrderablePricingPlans": true 
}
')


@name("CalculateOrderQuote")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/CalculateOrderQuote"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionID": "{{CD_SESSION_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"
data('{
    "ShoppingCart": {
        "Items": [
            {
                "ProductExternalReferenceType": "Product Reference",
                "ProductExternalReference": "XYZ_TV_Access_Annual",
                "PricingPlanExternalReferenceType": "Subscription",
                "PricingPlanExternalReference": "XYZ_TV_Access_Annual_USA_USD"
            }
        ]
    }
}
')


// # SubmitOrder API
//   
// Submit an order for requested shopping cart products.
// 
// Ordered products will be fulfilled through workflow process and assigned to subscriber account.
// 
// Orders with non-zero charges must be submitted using a fully authenticated session.
// 
// **NOTE:** If a payment instrument is not supplied in the the PaymentInstruments property, the system will use the default payment instrument.  If a payment instrument details are supply and it does not exist, it will be created.
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires a minimum session level of an authenticated device.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 920 | ProductNotFound | Fault indicating that the requested product could not be found |
// | 916 | PricingPlanNotFound | Fault indicating that the requested pricing plan is not found |
// | 1014 | InvalidOrderPayment | Fault when the order payment doesn't match the cost of the order |
// | 1015 | InvalidOrderPaymentInstrumentAmount | Fault to be returned when an invalid order payment instrument amount is passed in an order |
// | 1019 | InvalidShoppingCart | Fault exception thrown for invalid shopping carts |
// | 1010 | InvalidInstanceProperty | Fault indicating that an invalid instance property has been provided on the request |
// | 1011 | InvalidItemCurrency | Fault exception thrown when one item's currency is different from the rest in an order |
// | 1012 | InvalidItemOrderingType | Fault indicating that a requested pricing plan is not orderable |
// | 623 | SpendingLimitViolation | Fault indicating that a subscriber has exceeded their spending limit |
// | 1028 | ProductNotOrderable | Fault thrown when an order is attempted on a non-stand alone product |
// | 1034 | SubscriptionNotOrderable | Fault thrown when a subscriber attempts to order a subscription product of which they already have an active subscription |
// | 1021 | InvalidSubscriberProductStatus | Fault thrown when an order is attempted on a subscriber product that is in an invalid state |
// | 1009 | InvalidDiscount | Fault exception thrown when a discount is not valid for an order item |
// | 1008 | InvalidDevice | Fault indicating that an invalid physical device was provided |
// | 1006 | DeviceRequired | Fault indicating that a physical device id was required by the associated delivery capability, but was not provided |
// | 1040 | CouponRequired | Fault indicating that a coupon was required by the requested pricing plan but was not provided in the request |
// | 1039 | InvalidSubscriptionPaymentInstrument | Fault thrown when a valid payment instrument is not provided for a subscription pricing plan that requires a payment instrument. |
// | 616 | RevenueTaxFailure | Fault thrown on tax processing failures. |
// | 617 | TransactionFailure | The financial transaction failed to process |
// | 607 | InvalidPaymentRequest | Fault thrown when an invalid payment request is made. |
// | 606 | InvalidPaymentInstrument | Fault indicating that the requested payment instrument is not valid |
// | 603 | InsufficientBalance | Fault thrown when insufficient funds are provided to cover the purchase |
// | 1018 | InvalidShippingMethod | Fault thrown when a shipping order is requested with an invalid shipping method |
// | 1049 | ProductAlreadyPurchased | Fault indicating that request product has already been purchased and may not be purchased again based on the product's configuration |
// | 943 | ShippingMethodNotFound | Fault indicating that the requested shipping method could not be found |
// | 1101 | AddressValidationFailed | Indicates the address could not be validated |
// | 1100 | AddressNotFound | Indicates the requested address could not be found |
// | 611 | PaymentInstrumentNotFound | The requested payment instrument was not found |
// | 1144 | CaptchaVerificationFailed | Fault indicating Captcha is required on the method and the challenge-response provided is invalid. |
// | 1052 | InvalidExternalRedemptionRequest | Fault thrown when unable to handle external redemption request |
// | 1038 | InvalidCouponRedemption | Fault that occurs when a coupon code is cannot be applied to an order or subscription |
// | 1106 | InvalidBillingAddress | Fault thrown when there is mismatch between the session or home country and the payment instrument's billing addresses based on system configuration |
// | 217 | AdditionalPropertyNotFound | Indicates that the requested additional property was not found |
// | 626 | ExternalGiftCardFailure | Fault there is an error during an external gift card call to a provider |
// | 1197 | GeneralLedgerGuidenceCodeNotConfigured | Indicates that the general ledger code was not found |
// | 1059 | InvalidBulkItemDetail | Fault exception thrown for invalid bulk item details |
// | 1061 | DuplicateOrderFault | Trying to submit a duplicate order |
// 
// # Request

@name("SubmitOrder")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/SubmitOrder"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionId": "{{CD_SESSION_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"
data('{
    "AdditionalProperties": [
        {
            "ExternalReference": "country_code",
            "Values": [
                "USA"
            ]
        }
    ],
    "ShoppingCart": {
        "Items": [
            {
                "ProductExternalReferenceType": "Product Reference",
                "ProductExternalReference": "XYZ_TV_Access_Annual",
                "PricingPlanExternalReferenceType": "Subscription",
                "PricingPlanExternalReference": "XYZ_TV_Access_Annual_USA_USD"
            }
        ]
    }
}')


// UpdateExternalAuthorizations API
//   
// Update external authorizations for the subscriber. UpdateExternalAuthorizations has been re-purposed to support the ABC Corp 1 EU Portability solution to store the country the product was purchased from.
// 
// * "ContextData" : "GB", # country code (ISO-2 or ISO-3)
// * "Provider" : 6002, # Fix value to identofy the country code external authorisation.
// * "SubscriberExternalReference" : "19685" # Pricing plan id.
// 
// NOTE:  The system using external authorisations for checking EU Poratability must be able to process both ISO-2 or ISO-3 country code formats.
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires a fully authenticated subscriber session.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// |1120 | SubscriberNotFound | The requested subscriber was not found
// |1126 | SubscriberExternalAuthorizationNotFound | Fault indicating the requested subscriber external authorization could not be found
// 
// # Request
// 

@name("UpdateExternalAuthorizations")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/UpdateExternalAuthorizations"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionId": "{{CD_SESSION_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"CD-DistributionChannel": "{{CD_DISTRIBUTION_CHANNEL}}"
"Content-Type": "application/json"
data('{
    "ExternalAuthorizations": [
        {
            "ContextData": "GB",
            "Provider": 6002,
            "SubscriberExternalReference": "{{PRICING_PLAN_ID_1}}"
        }
    ]
}')


// # SearchSubscriptions API
//   
// Search subscriber subscriptions.  Can be used to determine which, if any, subscriptions the subscriber already has.
// 
// **IncludeRemoved** - If set to "true", active and removed subscriptions are returned in the results.  If ommitted or set to "false" only active subscriptons are returned. Default is "false".
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires a fully authenticated subscriber session.
// 
// # Request

@name("SearchSubscriptions")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/SearchSubscriptions"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionId": "{{CD_SESSION_ID}}"
"Content-Type": "application/json"
data('{}')


// # RetrieveSubscription API
//   
// Retrieve subscription details.  This optional and can be used if details of existing subscription should be displayed.
// 
// # Security
// 
// * This method requires HTTPS. Any request without SSL will be rejected.
// * This method requires a fully authenticated subscriber session.
// 
// # Error Codes
// 
// In addition to the common error codes, this method also returns the following error codes:
// 
// | Code | Name | Description |
// | ---- | ---- | ----------- |
// | 1033 | SubscriptionNotFound | Fault thrown when a subscription cannot be found matching the provided identifier |
// 
// # Request
// 

@name("RetrieveSubscription")
POST "https://{{CD_CORE_SERVICE_DOMAIN}}/Subscriber/RetrieveSubscription"
"CD-SystemID": "{{CD_SYSTEM_ID}}"
"CD-SessionId": "{{CD_SESSION_ID}}"
"CD-Language": "{{CD_LANGUAGE}}"
"Content-Type": "application/json"
data('{
    "Id": {{SUBSCRIPTION_ID}},
    "IncludeChangeOptions": true
}')



