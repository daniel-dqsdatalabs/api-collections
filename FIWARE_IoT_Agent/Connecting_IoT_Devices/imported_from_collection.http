#!/usr/bin/env dothttp

// Once the IoT Agent is running, You can check the status by making an HTTP request to the exposed port. 
// If the response is blank, this is usually because the MongoDB database holding the context information is not running or not connected.
// 
// >**Troubleshooting:** What if the response is blank ?
// >
// > * To check that a docker container is running try
// >
// >```bash
// >docker ps
// >```
// >
// >You should see several containers running. If `iot-agent` is not running, you can restart the containers as necessary.

@name("IoT Agent - Obtain Version Information")
GET "http://{{iot-agent}}/iot/about"



// Invoking group provision is always the the first step in connecting devices since it is always necessary to
// supply an authentication key with each measurement and the IoT Agent will not initially know which URL 
// the context broker is responding on.
// 
// It is possible to set up default commands and attributes for all devices as well, but this
// is not done within this tutorial as we will be provisioning each device separately.
// 
// This example provisions an anonymous group of devices. It tells the IoT Agent that a series of devices
// will be sending messages to the `IOTA_HTTP_PORT` (where the IoT Agent is listening for **Northbound** communications)
// 
// In the example the IoT Agent is informed that the `/iot/d` endpoint will be used and that devices will authenticate
// themselves by including the token `4jggokgpepnvsb2uv4s40d59ov`. For an UltraLight IoT Agent this means devices will
// be sending GET or POST requests to: 
// 
// ```
// http://iot-agent:7896/iot/d?i=<device_id>&k=4jggokgpepnvsb2uv4s40d59ov
// ```
// 
// Which should be familiar UltraLight 2.0 syntax from the previous tutorial.
// 
// When a measurement from an IoT device is received on the resource url it needs to be 
// interpreted and passed to the context broker. The `entity_type` attribute provides a
// default `type` for each device which has made a  request (in this case anonymous devices
// will be known as `Thing` entities. Furthermore the location of the
// context broker (`cbroker`) is needed, so that the IoT Agent can pass on any measurements 
// received to the  correct URL. `cbroker` is an optional attribute - if it is not provided, 
// the IoT Agent uses the context broker URL as defined in the configuration file, however
// it has been included here for completeness.

@name("IoT Agent - Create a Service Group")
POST "http://{{iot-agent}}/iot/services"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
 "services": [
   {
     "apikey":      "4jggokgpepnvsb2uv4s40d59ov",
     "cbroker":     "http://orion:1026",
     "entity_type": "Motion",
     "resource":    "/iot/d"
   }
 ]
}')


// It is common good practice to use URNs following the NGSI-LD [draft recommendation](https://docbox.etsi.org/ISG/CIM/Open/ISG_CIM_NGSI-LD_API_Draft_for_public_review.pdf) when creating entities. Furthermore it is easier to understand
// meaningful names when defining data attributes. These mappings can be defined by provisioning a device individually.
// 
// Three types of meaasurement attributes can be provisioned:
// 
// * `attributes` are active readings from the device
// * `lazy` attributes are only sent on request -  The IoT Agent will inform the device to return the measurement
// * `static_attributes` are as the name suggests static data about the device (such as relationships) passed on 
//   to the context broker.
// 
// >**Note**: in the case where individual `id`s are not required, or aggregated data is sufficient 
// > the `attributes` can be defined within the provisioning service rather than individually.
// 
// In the request we are assiociating the device `motion001` with the URN `urn:ngsd-ld:Motion:001`
// and mapping the device reading `c` with the context attribute `count` (which is defined as an `Integer`)
// A `refStore` is defined as a `static_attribute`, placing the device within **Store** `urn:ngsi-ld:Store:001`

@name("IoT Agent - Provision a Sensor")
POST "http://{{iot-agent}}/iot/devices"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
 "devices": [
   {
     "device_id":   "motion001",
     "entity_name": "urn:ngsi-ld:Motion:001",
     "entity_type": "Motion",
     "timezone":    "Europe/Berlin",
     "attributes": [
       { "object_id": "c", "name":"count", "type":"Integer"}
      ],
      "static_attributes": [
         {"name":"refStore", "type": "Relationship","value": "urn:ngsi-ld:Store:001"}
      ]
   }
 ]
}
')


// This example simulates a request coming from the device `motion001`
// 
// The request to the previously provisioned resource `iot/d` is in UltraLight 2.0 format
// and identifies the device `motion001` and passes a known API key.
// 
// A similar request was made in the previous tutorial (before the IoT Agent was connected)
// when the door was unlocked, you will have seen the state of each motion sensor changing
// and a Northbound request will be logged in the device monitor.

@name("Dummy Device  - Measurement")
POST "http://localhost/iot/d"
"Content-Type": "text/plain"
? "k"= "4jggokgpepnvsb2uv4s40d59ov"
? "i"= "motion001"
data('c|1')


// This example returns the data for the `Motion` entity with the `id=urn:ngsd-ld:Motion:001` within the context data.
// 
// The response shows that the device with `id=motion001` has been successfully identifed by the IoT Agent and mapped to the
// entity `id=urn:ngsd-ld:Motion:001`. This new entity has been created within the context data. The `c` 
// attribute from the dummy device measurement request has been mapped to the more meaningful `count` attribute
// within the context. As you will notice, a `TimeInstant` attribute has been added to both the entity and the
// meta data of the attribute - this represents the last time the entity and attribute have been updated, and is
// automatically added to each new entity because the `IOTA_TIMESTAMP`  environment variable was set when the
// IoT Agent was started up. The `refStore` attribute comes from the `static_attributes` set when the device was provisioned.

@name("Context Broker - Read the Motion Sensor")
GET "http://{{orion}}/v2/entities/urn:ngsi-ld:Motion:001"
"fiware-service": "openiot"
"fiware-servicepath": "/"


// Provisioning an actuator is similar to provisioning a sensor. This time an `endpoint` attribute holds
// the location where the IoT Agent needs to send the UltraLight command and the `commands` array includes
// a list of each command that can be invoked. The example below provisions a bell with the `deviceId=bell001`.
// The endpoint is `http://context-provider:3001/iot/bell001` and it can accept the `ring` command.

@name("IoT Agent - Provision an Actuator")
POST "http://{{iot-agent}}/iot/devices"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
  "devices": [
    {
      "device_id": "bell001",
      "entity_name": "urn:ngsi-ld:Bell:001",
      "entity_type": "Bell",
      "protocol": "PDI-IoTA-UltraLight",
      "transport": "HTTP",
      "endpoint": "http://context-provider:3001/iot/bell001",
      "commands": [ 
        {
          "name": "ring",
          "type": "command"
        }
       ],
       "static_attributes": [
         {"name":"refStore", "type": "Relationship","value": "urn:ngsi-ld:Store:001"}
    	]
    }
  ]
}
')


// An actuator can also be provisioned using a bidirectional attribute. Once again an `endpoint` attribute holds
// the location where the IoT Agent needs to send the UltraLight command. The `ring` attribute is defined using an `expression` and mapped to  itself in the `reverse` direction. When un update to the `ring` attribute is received, it is also send to the device itself.

@name("IoT Agent - Provision a Bidrectional Attribute")
POST "http://{{iot-agent}}/iot/devices"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
  "devices": [
    {
      "device_id": "bell002",
      "entity_name": "urn:ngsi-ld:Bell:002",
      "entity_type": "Bell",
      "protocol": "PDI-IoTA-UltraLight",
      "transport": "HTTP",
      "endpoint": "http://context-provider:3001/iot/bell002",
      "attributes": [
          {
          "name":"ring",
          "type":"Text",
          "expression": "${@ring}",
          "reverse": [
            {
              "object_id":"ring",
              "type": "Text",
              "expression": "${@ring}"
            }
          ]
        }
      ],
       "static_attributes": [
         {"name":"refStore", "type": "Relationship","value": "urn:ngsi-ld:Store:002"}
    	]
    }
  ]
}
')


// Before we wire-up the context broker, we can test that a command can be send to a device by making a REST request 
// directly to the IoT Agent's North Port using the `/v1/updateContext` endpoint.
// It is this endpoint that will eventually be invoked by the context broker once we have connected it up. 
// To test the configuration you can run the command directly as shown.
// 
// If you are viewing the device monitor page, you can also see the state of the bell change.
// 
// ![](https://fiware.github.io/tutorials.IoT-Agent/img/bell-ring.gif)

@name("IoT Agent - Invoke a Command")
POST "http://{{iot-agent}}/v2/op/update"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
    "actionType": "update",
    "entities": [
        {
            "type": "Bell",
            "id": "urn:ngsi-ld:Bell:001",
            "ring" : {
                "type": "command",
                "value": ""
            }
        }
    ]
}')


// The result of the command to ring the bell can be read by querying the entity within the Orion Context Broker. 
// 
// The `TimeInstant` shows last the time any command associated with the entity has been invoked. the result of `ring` command can be see in the value of the `ring_info` attribute

@name("Context Broker - Read the Command Result")
GET "http://{{orion}}/v2/entities/urn:ngsi-ld:Bell:001"
"fiware-service": "openiot"
"fiware-servicepath": "/"
? "options"= "keyValues"



// Provisioning  a device which offers both commands and measurements is merely a matter of making an HTTP POST request
// with both `attributes` and `command` attributes in the body of the request.
// 
// This example provisions a smart door with four commands `lock`, `unlock`, `open` and `close` and maps a single attribute.

@name("IoT Agent - Provision a Smart Door")
POST "http://{{iot-agent}}/iot/devices"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
  "devices": [
    {
      "device_id": "door001",
      "entity_name": "urn:ngsi-ld:Door:001",
      "entity_type": "Door",
      "protocol": "PDI-IoTA-UltraLight",
      "transport": "HTTP",
      "endpoint": "http://context-provider:3001/iot/door001",
      "commands": [ 
        {"name": "unlock","type": "command"},
        {"name": "open","type": "command"},
        {"name": "close","type": "command"},
        {"name": "lock","type": "command"}
       ],
       "attributes": [
       	{"object_id": "s", "name": "state", "type":"Text"}
       ],
       "static_attributes": [
         {"name":"refStore", "type": "Relationship","value": "urn:ngsi-ld:Store:001"}
       ]
    }
  ]
}
')


// Provisioning  a device which offers both commands and measurements is merely a matter of making an HTTP POST request
// with both `attributes` and `command` attributes in the body of the request.
// 
// This example provisions a smart door with two commands `on` and `off` and maps two attributes.

@name("IoT Agent - Provision a Smart Lamp")
POST "http://{{iot-agent}}/iot/devices"
"fiware-service": "openiot"
"fiware-servicepath": "/"
"Content-Type": "application/json"
data('{
  "devices": [
    {
      "device_id": "lamp001",
      "entity_name": "urn:ngsi-ld:Lamp:001",
      "entity_type": "Lamp",
      "protocol": "PDI-IoTA-UltraLight",
      "transport": "HTTP",
      "endpoint": "http://context-provider:3001/iot/lamp001",
      "commands": [ 
        {"name": "on","type": "command"},
        {"name": "off","type": "command"}
       ],
       "attributes": [
       	{"object_id": "s", "name": "state", "type":"Text"},
        {"object_id": "l", "name": "luminosity", "type":"Integer"}
       ],
       "static_attributes": [
         {"name":"refStore", "type": "Relationship","value": "urn:ngsi-ld:Store:001"}
    	]
    }
  ]
}
')


// This example lists all provisioned devices by making a GET request to the `/iot/devices` endpoint.
// 
// The response includes all the commands and attributes mappings associated with all provisioned IoT devices.

@name("IoT Agent - List all Provisioned Devices")
GET "http://{{iot-agent}}/iot/devices"
"fiware-service": "openiot"
"fiware-servicepath": "/"




