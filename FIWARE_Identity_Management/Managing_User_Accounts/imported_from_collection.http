#!/usr/bin/env dothttp

// ## REST API
// 
// To create a new user via the REST API, send a POST request to the `/v1/users` endpoint containing
// the `username`,`email` and `password` along with the `X-Auth-token` header from a previously logged in administrative user.
// 
// ## GUI 
// 
// Alternatively, Users are able to sign-up for themselves using the GUI. The only requirement is an email address and a password.
// 
// ![](https://fiware.github.io/tutorials.Identity-Management/img/sign-up.png)
// 
// Once an account is created, the user is sent an eMail to confirm their existence and activate their account.
// 
// ![](https://fiware.github.io/tutorials.Identity-Management/img/email.png)
// 
// The REST API is also able to create and amend users without their own interaction - this could be useful for
// bulk CRUD actions for example.
// 
// > **Note** - an eMail server must be configured to send out invites properly, otherwise the invitation
// > may be deleted as spam. For testing purposes, it is easier to update the users table directly:
// >`update user set enabled = 1;`

@name("Create a User")
POST "http://{{keyrock}}/v1/users"
"Accept": "application/json"
"Content-Type": "application/json"
"X-Auth-token": "{{X-Auth-token}}"
data('{
  "user": {
    "username": "admin2",
    "email": "admin2@test.com",
    "password": "test",
    "admin": true
  }
}')


// Making a GET request to a resource under the `/v1/users/{{user-id}}` endpoint will return the user listed under that id.
// The `X-Auth-token` must be supplied in the headers.
// 
// The response contains basic details of the account in question.

@name("Read info about a User")
GET "http://{{keyrock}}/v1/users/{{user-id}}"
"Accept": "application/json"
"Content-Type": "application/json"
"X-Auth-token": "{{X-Auth-token}}"



// Obtaining a complete list of all users is a super-admin permission requiring the `X-Auth-token`  - most users will 
// only be permitted to return users within their own organization. Listing users can be done by making a GET request to 
// the  `/v1/users` endpoint

@name("List Users")
GET "http://{{keyrock}}/v1/users"
"Accept": "application/json"
"Content-Type": "application/json"
"X-Auth-token": "{{X-Auth-token}}"



// Within the GUI, users can be updated from the settings page. This can also be done from the command line
// by making PATCH request to  `/v1/users/<user-id>` endpoint when the user id is known. The `X-Auth-token`
// header must also be set.
// 
// The response lists the fields which have been updated.

@name("Update a User")
PATCH "http://{{keyrock}}/v1/users/{{user-id}}"
"Accept": "application/json"
"Content-Type": "application/json"
"X-Auth-token": "{{X-Auth-token}}"
data('{
	"user": {
	    "username": "alice",
	    "email": "alice@test.com",
	    "enabled": true,
	    "gravatar": false,
	    "date_password": "2018-07-26T15:25:14.000Z",
	    "description": "Alice works for FIWARE",
	    "website": "http://www.fiware.org"
	}
}')


// Within the GUI, users can delete their account from the settings page, selecting the **Cancel Account** Option,
// once again a super-admin user can do this from the command line by sending a DELETE request to the 
// `/v1/users/{{user-id}}` endpoint. The `X-Auth-token` header must also be set.

@name("Delete a User")
DELETE "http://{{keyrock}}/v1/users/{{user-id}}"
"Accept": "application/json"
"Content-Type": "application/json"
"X-Auth-token": "{{X-Auth-token}}"




