#!/usr/bin/env dothttp

// Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."

@name("Get a repository webhook")
GET "https://{{baseUrl}}/repos/:owner/:repo/hooks/:hook_id"


// Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."

@name("Update a repository webhook")
PATCH "https://{{baseUrl}}/repos/:owner/:repo/hooks/:hook_id"
"Content-Type": "application/json"
data('{
    "config": {
        "url": "<uri>",
        "content_type": "<string>",
        "secret": "<string>",
        "insecure_ssl": "<string>",
        "address": "<string>",
        "room": "<string>"
    },
    "events": [
        "push"
    ],
    "add_events": [
        "<string>",
        "<string>"
    ],
    "remove_events": [
        "<string>",
        "<string>"
    ],
    "active": true
}')


@name("Delete a repository webhook")
DELETE "https://{{baseUrl}}/repos/:owner/:repo/hooks/:hook_id"


// This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.

@name("Ping a repository webhook")
POST "https://{{baseUrl}}/repos/:owner/:repo/hooks/:hook_id/pings"


// This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
// 
// **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`

@name("Test the push repository webhook")
POST "https://{{baseUrl}}/repos/:owner/:repo/hooks/:hook_id/tests"



