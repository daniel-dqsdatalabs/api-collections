#!/usr/bin/env dothttp

@name("Product - 404 Not Found")
GET "https://{{warehouseUrl}}/{{provider}}/v1/products/:dsku"


@name("Create Product - missing barcode")
POST "https://{{warehouseUrl}}/{{provider}}/v1/products"
"Content-Type": "application/json"
data('{"product":{
    "sku": "{{warehouseId}}{{testRun}}",
    "description": "HELLOKITTY likes apples",
    "name": "HELLOKITTY likes apples",
    "cost": 13,
    "weight": 5.2,
    "length": 3,
    "width": 2,
    "height": 1,
    "caseQty": 0,
    "weightUnit": "lb",
    "lengthUnit": "in",
    "hsTariffCode": "123-456",
    "countryOfOrigin":"US"
}}')


@name("Create Product - success")
POST "https://{{warehouseUrl}}/{{provider}}/v1/products"
"Content-Type": "application/json"
data('{"product":{
    "sku": "D000000000{{testRun}}",
    "name": "HELLOKITTY",
    "description": "HELLOKITTY likes apples",
    "cost": 13,
    "weight": 5.2,
    "length": 3,
    "width": 2,
    "height": 0,
    "caseQty": 0,
    "weightUnit": "lb",
    "lengthUnit": "in",
    "hsTariffCode": "123-456",
    "countryOfOrigin":"US",
    "barcodes": ["{{warehouseId}}{{testRun}}"]
}}')


@name("Create Product - duplicate barcode (except Logiwa)")
POST "https://{{warehouseUrl}}/{{provider}}/v1/products"
"Content-Type": "application/json"
data('{"product":{
    "sku": "{{warehouseId}}-DUPEBARCODE{{testRun}}",
    "name": "HELLOKITTY",
    "description": "HELLOKITTY likes apples",
    "cost": 13,
    "weight": 5.2,
    "length": 3,
    "width": 2,
    "height": 1,
    "caseQty": 0,
    "weightUnit": "lb",
    "lengthUnit": "in",
    "hsTariffCode": "123-456",
    "countryOfOrigin":"US",
    "barcodes": ["{{warehouseId}}{{testRun}}"]
}}')


@name("Update Product Detail - add barcode")
PUT "https://{{warehouseUrl}}/{{provider}}/v1/products"
"Content-Type": "application/json"
data('{"product":{
    "sku": "D000000000{{testRun}}",
    "name": "HELLOKITTY",
    "description": "HELLOKITTY likes apples",
    "cost": 13,
    "weight": 5.2,
    "length": 3,
    "width": 2,
    "height": 1,
    "caseQty": 0,
    "weightUnit": "lb",
    "lengthUnit": "in",
    "hsTariffCode": "123-456",
    "countryOfOrigin":"US",
    "barcodes": ["{{warehouseId}}{{testRun}}", "APPLES{{testRun}}"]
}}')


@name("Send ASN with unknown sku")
POST "https://{{warehouseUrl}}/:provider/v1/asns"
"Content-Type": "application/json"
"If-Match": "AAAAAAABXAk"
data('{"deliverrAsnId": "{{testRun}}",
"purchaseOrder": "{{testRun}}",
  "createdDate": "{{timestamp}}",
  "expectedDate": "{{expectedDate}}",
  "trackingNumbers": ["tracking-123"],
  "shipToWarehouse": "{{warehouseId}}",
  "notes": "",
  "asnItems": [
    {
      "sku": "{{warehouseId}}-DOESNOTEXIST",
      "quantityExpected": 10
    }
  ]}')


@name("Send ASN with qty 1")
POST "https://{{warehouseUrl}}/:provider/v1/asns"
"Content-Type": "application/json"
"If-Match": "AAAAAAABXAk"
data('{"deliverrAsnId": "1{{testRun}}",
"purchaseOrder": "1{{testRun}}",
  "createdDate": "{{timestamp}}",
  "trackingNumbers": ["tracking-123{{testRun}}"],
  "expectedDate": "{{expectedDate}}",
  "shipToWarehouse": "{{warehouseId}}",
  "notes": "",
  "asnItems": [
    {
      "sku": "D000000000{{testRun}}",
      "quantityExpected": 1
    }
  ]}')


@name("Send ASN with qty 5")
POST "https://{{warehouseUrl}}/:provider/v1/asns"
"Content-Type": "application/json"
"If-Match": "AAAAAAABXAk"
data('{"deliverrAsnId": "5{{testRun}}",
"purchaseOrder": "5{{testRun}}",
  "createdDate": "{{timestamp}}",
  "trackingNumbers": ["tracking-1235{{testRun}}"],
  "expectedDate": "{{expectedDate}}",
  "shipToWarehouse": "{{warehouseId}}",
  "notes": "",
  "asnItems": [
    {
      "sku": "D000000000{{testRun}}",
      "quantityExpected": 5
    }
  ]}')


@name("Send ASN with qty 10")
POST "https://{{warehouseUrl}}/:provider/v1/asns"
"Content-Type": "application/json"
"If-Match": "AAAAAAABXAk"
data('{"deliverrAsnId": "10{{testRun}}",
"purchaseOrder": "10{{testRun}}",
  "createdDate": "{{timestamp}}",
  "trackingNumbers": ["tracking-12310{{testRun}}"],
  "expectedDate": "{{expectedDate}}",
  "shipToWarehouse": "{{warehouseId}}",
  "notes": "",
  "asnItems": [
    {
      "sku": "D000000000{{testRun}}",
      "quantityExpected": 10
    }
  ]}')


@name("ASN status with qty 1")
GET "https://{{warehouseUrl}}/:provider/v1/asns/:asnId"
? "warehouseId"= "{{warehouseId}}"


@name("ASN status with qty 5")
GET "https://{{warehouseUrl}}/:provider/v1/asns/:asnId"
? "warehouseId"= "{{warehouseId}}"


@name("ASN status with qty 10")
GET "https://{{warehouseUrl}}/:provider/v1/asns/:asnId"
? "warehouseId"= "{{warehouseId}}"


@name("Create Product - success #2")
POST "https://{{warehouseUrl}}/{{provider}}/v1/products"
"Content-Type": "application/json"
data('{"product":{
    "sku": "D00000000{{testRun}}2",
    "name": "HELLOKITTY",
    "description": "HELLOKITTY likes apples",
    "cost": 13,
    "weight": 5.2,
    "length": 3,
    "width": 2,
    "height": 1,
    "caseQty": 0,
    "weightUnit": "lb",
    "lengthUnit": "in",
    "hsTariffCode": "123-456",
    "countryOfOrigin":"US",
    "barcodes": ["{{warehouseId}}{{testRun}}_#2"]
}}')


@name("Product - Found")
GET "https://{{warehouseUrl}}/{{provider}}/v1/products/:dsku"


@name("Inventory by SKU and Warehouse with 0 on hand")
GET "https://{{warehouseUrl}}/:provider/v1/inventories"
"Content-Type": "application/json"
? "sku"= "D000000000{{testRun}}"
? "warehouse"= "{{warehouseId}}"


@name("Get list of inventory movements")
GET "https://{{warehouseUrl}}/:provider/v1/inventories/movements"
? "fromTime"= "{{fromTimeUtc}}"
? "toTime"= "{{toTimeUtc}}"
? "warehouse"= "{{warehouseId}}"


// Not a warehouse API test, but a warehouse data test. Before enabling a warehouse for inbounds it needs to have outbound cost estimates

@name("Warehouse has outbound costs (for production testing)")
GET "https://{{outboundCostUrl}}/v1/validate/{{warehouseId}}"
basicauth("{{outboundCostAuthUser}}", "{{outboundCostAuthPassword}}")



