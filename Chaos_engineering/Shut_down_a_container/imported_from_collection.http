#!/usr/bin/env dothttp

// Get all active containers.
// 
// Review Gremlin API docs about [getting all active containers](https://www.gremlin.com/docs/api-reference/overview/#/containers). To attack a specific container, you will need its `id`.
// 
// This sample application has a service called `cartservice` that stores the items in the user's shipping cart in Redis and retrieves it. Under the **Tests** tab, we will look for the container responsible for cartservice, and then initialize an environment variable called `containerId`, in order to pass this info to any subsequent requests.

@name("Get active containers")
GET "https://{{gremlin_api}}/containers"
"Authorization": "Key {{gremlin_api_key}}"


// Create a new attack.
// 
// Review Gremlin API docs about [creating, halting, and listing](https://www.gremlin.com/docs/api-reference/overview/#/attacks/create) attacks, [examples of creating](https://www.gremlin.com/docs/api-reference/examples/#creating-attacks) attacks, and [attack parameters that can be included](https://www.gremlin.com/docs/infrastructure-layer/attacks/#parameter-reference).
// 
// Under the request **Body** tab, we will configure our attack and include the `containerId` environment variable initialized in the previous request. Additionally we will pass a parameter so there is zero delay in shutting down this container. 
// 
// Under the **Tests** tab, we will initialize a new environment variable called `guid` to identify the attack, in order to pass this info to any subsequent requests.

@name("Create shutdown attack")
POST "https://{{gremlin_api}}/attacks/new"
"Authorization": "Key {{gremlin_api_key}}"
"Content-Type": "application/json"
data('{
  "command": {
    "type": "shutdown",
    "args": ["-d", "0"]
  },
  "target": {
  	"type": "Exact",
  	"containers": {
  		"ids": ["{{containerId}}"]
  		}
  }
}')


// Observe your app's health **before** and then **after** shutting down a container.
// 
// Our hypothesis is that if we shut down the cartservice container, EKS will give us a new one and we won't suffer any downtime. However, if we experience unintended effects, let's be prepared to stop the attack.
// 
// For this particular response, pay attention to the HTTP status code.

@name("Verify app health")
GET "https://{{your_deployed_app_URL}}/"


// Idempotently halt the specified active attack.
// 
// Review Gremlin API docs about [creating, halting, and listing attacks](https://www.gremlin.com/docs/api-reference/overview/#/attacks/create) and [examples of creating attacks](https://www.gremlin.com/docs/api-reference/examples/#creating-attacks).
// 
// In our URL, we will include the path variable `guid` of the attack initialized in the previous request.
// 
// When you [run this folder](https://learning.getpostman.com/docs/postman/collection_runs/starting_a_collection_run/#collection-or-folder) in its entirety, this request to stop the attack will only execute if the server returned a 500 status code with the preceding request. You can review this logic under the **Tests** tab of the preceding request entitled `Verify app health`.
// 
// ![[collection runner](https://i.imgur.com/UPPy3bQ.png)](https://i.imgur.com/UPPy3bQ.png)

@name("Stop the attack")
DELETE "https://{{gremlin_api}}/attacks/{{guid}}"
"Authorization": "Key {{gremlin_api_key}}"



