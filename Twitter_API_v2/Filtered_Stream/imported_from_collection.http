#!/usr/bin/env dothttp

// Create filter rules. To create one or more rules, submit an add payload as an array of rules and operators.
@name("Add Rules")
POST "https://api.twitter.com/2/tweets/search/stream/rules"
json({
    "add": [
        {
            "value": "",
            "tag": ""
        }
    ]
})


// Returns a list of filter rules currently active on the streaming endpoint.
@name("Retrieve Rules")
GET "https://api.twitter.com/2/tweets/search/stream/rules"


// Delete filter rules. To delete one or more rules, submit a delete object payload with an array of rule IDs to delete.
@name("Delete Rules (by rule ID)")
POST "https://api.twitter.com/2/tweets/search/stream/rules"
json({
    "delete": {
        "ids": [
            ""
        ]
    }
})


// Delete filter rules. To delete one or more rules, submit a delete object payload with an array of rule values to delete.
@name("Delete Rules (by rule value)")
POST "https://api.twitter.com/2/tweets/search/stream/rules"
json({
    "delete": {
        "values": [
            ""
        ]
    }
})


// Streams Tweets in real-time based on a specific set of filter rules.// // Please note streaming responses are currently [not supported](https://github.com/postmanlabs/postman-app-support/issues/5040) in Postman. Use this to help form your request, then click on Code > cURL. Copy the cURL command and paste in terminal to view the response.
@name("Stream (see description)")
GET "https://api.twitter.com/2/tweets/search/stream"



