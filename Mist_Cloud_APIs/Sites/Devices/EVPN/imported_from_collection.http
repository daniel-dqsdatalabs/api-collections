#!/usr/bin/env dothttp

// While all the evpn_id / downlink_ips can be sspecifidd by hand, the easiest way is to call the build_vpn_topology API, allowing you to examine the diff, and update it yourself. You can also simply call it with overwrite=true which will apply the updates for you.
// 
// Notes:
// 
// 1. you can use `core` / `distribution` / `access` to create a CLOS topology (or `super-spine` / `spine` / `leaf`)
// 2. you can also use `core` / `distribution` to form a 2-tier EVPN topology where ESI-Lag is configured distribution to connect to access switches
// 3. in a small/medium campus, `collapsed-core` can be used where core switches are the inter-connected to do EVPN
// 4. The API uses a few pre-defined parameters and best-practices to generate the configs. It can be customized by using evpn_options in Site Setting / Network Template. (e.g. a different subnet for the underlay)

@name("getSiteEVPN")
GET "https://{{host}}/api/v1/sites/:site_id/devices/evpn_topology"


// While all the `evpn_id` / `downlink_ips` can be specifidd by hand, the easiest way is to call the `build_vpn_topology` API, allowing you to examine the diff, and update it yourself. You can also simply call it with `overwrite=true` which will apply the updates for you.
// 
// *Notes:*
// 1. You can use `core` / `distribution` / `access` to create a CLOS topology (or `super-spine` / `spine` / `leaf`)
// 2. You can also use `core` / `distribution` to form a 2-tier EVPN topology where ESI-Lag is configured distribution to connect to access switches
// 3. In a small/medium campus, `collapsed-core` can be used where core switches are the inter-connected to do EVPN
// 4. The API uses a few pre-defined parameters and best-practices to generate the configs. It can be customized by using `evpn_options` in Site Setting / Network Template. (e.g. a different subnet for the underlay)
// 
// #### Collapsed Core
// In a small-medium campus, EVPN can also be enabled only at the core switches (up to 4) by assigning all participating switches with `collapsed-core role`. When there are more than 2 switches, a ring-like topology will be formed.
// 
// #### ESI-Lag
// If the access switchess does not have EVPN support, you can still take advantage of EVPN by setting up ESI-Lag on distribution switches
// 
// #### Leaf / Access / Collapsed-Core
// For leaf nodes in a EVPN topology, youâ€™d have to configure the IPs for networks that would participate in EVPN. Optionally, VRFs to isolate traffic from one tenant verus another

@name("createSiteEVPN")
POST "https://{{host}}/api/v1/sites/:site_id/devices/evpn_topology"
json({
    "overwrite": true,
    "switches": [
        {
            "mac": "5c5b35000003",
            "role": "collapsed-core"
        },
        {
            "mac": "5c5b35000004",
            "role": "collapsed-core"
        }
    ]
})


// While all the evpn_id / downlink_ips can be sspecifidd by hand, the easiest way is to call the build_vpn_topology API, allowing you to examine the diff, and update it yourself. You can also simply call it with overwrite=true which will apply the updates for you.
// 
// Notes:
// 
// 1. you can use `core` / `distribution` / `access` to create a CLOS topology (or `super-spine` / `spine` / `leaf`)
// 2. you can also use `core` / `distribution` to form a 2-tier EVPN topology where ESI-Lag is configured distribution to connect to access switches
// 3. in a small/medium campus, `collapsed-core` can be used where core switches are the inter-connected to do EVPN
// 4. The API uses a few pre-defined parameters and best-practices to generate the configs. It can be customized by using evpn_options in Site Setting / Network Template. (e.g. a different subnet for the underlay)

@name("updateSiteEVPN")
PUT "https://{{host}}/api/v1/sites/:site_id/devices/evpn_topology"
data('{
    "overwrite": false,

    "switches": [
        // to add a new node to the topology, add it with the desired role
        {
            "mac": "5c5b35000003",
            "role": "collapsed-core"
        },

        // to remove a node from the topology, set the role to \'none\'
        {
            "mac": "5c5b35000004",
            "role": "none"
        }        
    ]
    // to add switches to topology

}')


// While all the evpn_id / downlink_ips can be sspecifidd by hand, the easiest way is to call the build_vpn_topology API, allowing you to examine the diff, and update it yourself. You can also simply call it with overwrite=true which will apply the updates for you.
// 
// Notes:
// 
// 1. you can use `core` / `distribution` / `access` to create a CLOS topology (or `super-spine` / `spine` / `leaf`)
// 2. you can also use `core` / `distribution` to form a 2-tier EVPN topology where ESI-Lag is configured distribution to connect to access switches
// 3. in a small/medium campus, `collapsed-core` can be used where core switches are the inter-connected to do EVPN
// 4. The API uses a few pre-defined parameters and best-practices to generate the configs. It can be customized by using evpn_options in Site Setting / Network Template. (e.g. a different subnet for the underlay)

@name("deleteSiteEVPN")
DELETE "https://{{host}}/api/v1/sites/:site_id/devices/evpn_topology"



