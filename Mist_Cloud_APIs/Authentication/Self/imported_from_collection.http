#!/usr/bin/env dothttp

// Get ‘whoami’ and privileges (which org and which sites I have access to)
// 
//  #### Response Parameter
// **Parameter**|**Type**|**Description** 
//  :-------------: |:-------------: |:-------------: 
//  email|string|email of logged-in user
//  first_name|string|first name of logged-in user
//  last_name|string|last name of logged-in user
//  phone|string|phone number (numbers only, including country code)
//  via_sso|boolean|an admin alogin via_sso is more restircted. (password and email cannot be changed)
//  privileges|list|list of permission-against-scope
//  scope|string|currently org / site / msp
//  org_id|string|org_id of the org or site
//  org_name|string|name of the org of site
//  msp_id|string|id of MSP (if the org belongs to an MSP)
//  msp_name|string|name of the MSP (if the org belongs to an MSP)
//  orggroup_ids|list|list of orggroup ids (if the org belongs to an MSP)
//  name|string|name of org or site
//  role|string|admin / write / read / helpdesk / installer
//  site_id|string|site_id of site
//  sitegroup_ids|list|list of sitegroup ids
//  tags|list|list of strings indicating capabilities. e.g. what to show/hide/disable/enable for this user

@name("getSelf")
GET "https://{{host}}/api/v1/self"


// #### Body Parameters
// **Parameter**|**Type**|**Description** 
// :-------------: |:-------------: |:-------------: 
// first_name|string|first name of logged-in user
// last_name|string|last name of logged-in user
// phone|string|phone number (numbers only, including country code)
// phone2|string|secondary phone number
// password|string|new password
// enable_two_factor|boolean|to enable or disable two-factory authentication
// persona|string|optional, different persona presents differnt UI for optimized user experience
// enable_two_factor|boolean|enable two factor authentication
// 
// Note: when `two-factor` authentication is enabled (from disabled-state), the two_factor_seed is re-generated and two_factor_verified is reset to false. The OTP will need to be verified before it takes effect.

@name("updateSelf")
PUT "https://{{host}}/api/v1/self"
"Accept": "application/json"
"X-CSRFToken": "{{csrftoken}}"
"Content-Type": "application/json"
json({
    "password": "foryoureyesonly",
    "first_name": "John",
    "last_name": "Smith",
    "phone": "14081112222",
    "phone2": "14083334444",
    "persona": "security",
    "enable_two_factor": true
})


// We require the user to verify that they actually own the email address they intend to change it to.
// 
// After the API call, the user will receive an email to the new email address with a link like https://manage.mist.com/verify/update?expire=:exp_time&email=:admin_email&token=:token
// 
// Upon clicking the link, the user is provided with a login page to authenticate using existing credentials. After successful login, the email address of the user gets updated
// 
// Note: The request parameter email can be used by UI to validate that the current session (if any) belongs to the admin or provide a login page (by pre-populating the email on login screen). UI can also use the request parameter expire to validate token expiry.

@name("updateSelfEmail")
POST "https://{{host}}/api/v1/self/update"
"Accept": "application/json"
"X-CSRFToken": "{{csrftoken}}"
"Content-Type": "application/json"
json({
    "email": "new@mistsys.com"
})


// We require the user to verify that they actually own the email address they intend to change it to.
// 
// After the API call, the user will receive an email to the new email address with a link like https://manage.mist.com/verify/update?expire=:exp_time&email=:admin_email&token=:token
// 
// Upon clicking the link, the user is provided with a login page to authenticate using existing credentials. After successful login, the email address of the user gets updated
// 
// Note: The request parameter email can be used by UI to validate that the current session (if any) belongs to the admin or provide a login page (by pre-populating the email on login screen). UI can also use the request parameter expire to validate token expiry.

@name("verifySelfEmail")
POST "https://{{host}}/api/v1/self/update/verify/:token"
"Accept": "application/json"
"Content-Type": "application/json"
json({
    "email": "new@mistsys.com"
})


@name("generateQrCodeForVerification")
GET "https://{{host}}/api/v1/self/two_factor/token"
? "by"= "qrcode"


// To verify two-factor authentication by using a code generated by app (e.g. Google Authenticator, Authy) or by SMS. Upon successful verification, the ```otp_verified``` will be set to true if it hasn’t already been.

@name("verifyTwoFactor")
POST "https://{{host}}/api/v1/self/two_factor/verify"
"Accept": "application/json"
"X-CSRFToken": "{{csrftoken}}"
"Content-Type": "application/json"
json({
    "two_factor": "123456"
})


//  #### Request Parameter
// **Parameter**|**Type**|**Description** 
//  :-------------: |:-------------: |:-------------: 
// email|string|Required. max legnth is 64
// recaptcha|string|reCAPTCHA
// 
// An email will also be sent to the user with a link to https://manage.mist.com/verify/recover?token=:token
// 

@name("recoverPassword")
POST "https://{{host}}/api/v1/recover"
"Accept": "application/json"
"Content-Type": "application/json"
json({
    "email": "test@mistsys.com",
    "recaptcha": "see https://www.google.com/recaptcha/"
})


// With correct verification, the user will be authenticated. UI can then prompt for new password
// 

@name("verifyRecoverPasssword")
POST "https://{{host}}/api/v1/recover/verify/:token"
"Accept": "application/json"
"Content-Type": "application/json"


// To delete ones account and every associated with it. The effects:
// 
// 1. the account would be deleted
// 2. any orphaned Org (that only has this account as admin) will be deleted
// 3. along with all data with Org (sites, wlans, devices) will be gone.

@name("deleteSelf")
DELETE "https://{{host}}/api/v1/self"
"Accept": "application/json"
"X-CSRFToken": "{{csrftoken}}"
"Content-Type": "application/json"
json({
    "email": "test@mistsys.com",
    "password": "foryoureyesonly",
    "first_name": "John",
    "last_name": "Smith",
    "org_name": "TestCompany",
    "recaptcha": "see https://www.google.com/recaptcha/",
    "referer_invite_token": "Dm2gtT8dwMeM4Bc2E8FLIaA96VHOjPat",
    "return_to": "http://mist.zendesk.com/hc/quickstart.pdf",
    "account_only": false,
    "allow_mist": false,
    "invite_code": "MISTROCKS"
})



