#!/usr/bin/env dothttp

// Just like in programming, [Postman variables](https://learning.postman.com/docs/sending-requests/variables/#variable-scopes) make it easy to change a value in one spot and propagate those changes throughout a collection so you can keep your code DRY (Don’t Repeat Yourself) instead of WET (Write Everything Twice). // // In the text areas, set variables by highlighting a value to "Set as variable", and get variables by using the double curly braces like this: `{{variableName}}`. In the pre-request and test script areas, you can set and get variables using JavaScript.
@name("Use variables")
GET "https://postman-echo.com/get"
? "test"= "{{variableName}}"


// Postman supports several variable types and scopes to support different scenarios. For example, a collection variable is useful when the value is inextricably linked to a particular collection. Environment variables can be decoupled from the collection to be used with another collection (e.g. user authorization tokens or server configuration details).// // In the text areas, hover over the variable to see a tool tip displaying the variable scope. Take a look under the **Params** tab.
@name("Consider variable scopes")
GET "https://postman-echo.com/get"
? "foo1"= "{{somethingForThisCollection}}"
? "foo2"= "{{somethingForThisEnvironment}}"


// Postman relies on string substitution to render variable values in the web documentation. Use placeholder text as a variable’s value to indicate what value to use. If you leave the value blank, as shown with `foo3`, Postman displays no information in the documentation.// // ![[variable with no value displayed in web documentation](https://postman-web-property-assets.s3.amazonaws.com/blogs/variable-with-no-value.png)](https://postman-web-property-assets.s3.amazonaws.com/blogs/variable-with-no-value.png)
@name("Add placeholder text")
GET "https://postman-echo.com/get"
? "foo1"= "{{somethingForThisCollection}}"
? "foo2"= "{{somethingForThisEnvironment}}"
? "foo3"= "{{variableWithNoValue}}"



