#!/usr/bin/env dothttp

// Area coverage performs a radial sweep around a transmitter out to a user defined radius. It factors in system parameters, antenna patterns, environmental characteristics and terrain data to show a heatmap in customisable colours and units.
// 
// ![Area Coverage](https://cloudrf.com/files/ibiza.vhf.jpg "Area coverage")
// 
// ## Hello world! ##
// Click the link. Hello world! doesn't come any easier.
// 
// https://cloudrf.com/API/area?res=30&col=RAINBOW.dBm&rxs=-120&rad=10&frq=868&pm=1&cll=0&azi=0&txw=0.1&fmt=4&out=2&net=IBIZA&nam=hello_world&txg=2.15&tlt=0&ant=39&dis=m&rxg=2.15&uid=101&key=IBIZA.DEMO.KEY&txh=8&rxh=1&lat=38.916&lon=1.448
// 
// ## Colours and thresholds ##
// 
// The colour schema used is defined by the col value. The default 'rainbow' scheme used in CloudRF is col=10. Advanced users can define their own colour schemas and call them by name like col="LORA.dBm".
// The range of colours and levels shown is limited by the receiver threshold which overrides what is in your colour key.
// 
// # Clients and demos
// https://github.com/Cloud-RF/CloudRF-API-clients/

@name("Area (Point-to-Multipoint)")
POST "https://cloudrf.com/API/area"
"Content-Type": "application/x-www-form-urlencoded"
data({
    "uid": [
        "101"
    ],
    "key": [
        "IBIZA.DEMO.KEY"
    ],
    "lat": [
        "50.355108"
    ],
    "lon": [
        "-4.152938"
    ],
    "txh": [
        "8"
    ],
    "frq": [
        "2450"
    ],
    "rxh": [
        "2"
    ],
    "dis": [
        "m"
    ],
    "txw": [
        "0.1"
    ],
    "txg": [
        "2.14"
    ],
    "rxg": [
        "2.14"
    ],
    "pm": [
        "1"
    ],
    "pe": [
        "1"
    ],
    "res": [
        "30"
    ],
    "rad": [
        "6"
    ],
    "out": [
        "2",
        "2"
    ],
    "rxs": [
        "-95"
    ],
    "ant": [
        "38"
    ],
    "azi": [
        "0"
    ],
    "bwi": [
        "0.1"
    ],
    "ber": [
        "0"
    ],
    "blu": [
        "-120"
    ],
    "clm": [
        "0"
    ],
    "cli": [
        "5"
    ],
    "cll": [
        "2"
    ],
    "fbr": [
        "0"
    ],
    "file": [
        "kmz"
    ],
    "grn": [
        "-90"
    ],
    "hbw": [
        "0"
    ],
    "ked": [
        "0"
    ],
    "mod": [
        "0"
    ],
    "nam": [
        "DRONE"
    ],
    "net": [
        "IBIZA"
    ],
    "pol": [
        "v"
    ],
    "red": [
        "-60"
    ],
    "ter": [
        "4"
    ],
    "tlt": [
        "0"
    ],
    "vbw": [
        "0"
    ],
    "col": [
        "10"
    ],
    "rel": [
        "90"
    ],
    "nf": [
        "-101"
    ],
    "mat": [
        "0.1"
    ]
})


// Path Profile studies the link from one site to another in a direct line. It factors in system parameters, antenna patterns, environmental characteristics and terrain data to produce a JSON report containing enough values to incorporate into your analysis or create a chart from.
// Each successful API call is debited from your balance as one 'calculation'. A standard plan has 1000 calculations.
// To use the API you must authenticate with a UID and KEY which you can find at https://cloudrf.com/my%20balance.
// 
// ![Path Profile Analysis](https://cloudrf.com/files/ppa_demo2.png "Path Profile Analysis")
// 
// # Process a spreadsheet
// Use [this python script](https://github.com/Cloud-RF/CloudRF-API-clients/blob/master/python/python3.X/pathprofile.py) to process [a spreadsheet of data](https://github.com/Cloud-RF/CloudRF-API-clients/blob/master/python/python3.X/pathprofile.csv).
// 
// # Other clients
// https://github.com/Cloud-RF/CloudRF-API-clients/

@name("Path Profile (Point-to-Point)")
POST "https://cloudrf.com/API/path"
"Content-Type": "application/x-www-form-urlencoded"
data({
    "uid": [
        "21531"
    ],
    "key": [
        "b353f1ceae63fd07931722b5f39e7bd87a1b138d"
    ],
    "lat": [
        "50.355108"
    ],
    "lon": [
        "-4.152938"
    ],
    "txh": [
        "8"
    ],
    "frq": [
        "868"
    ],
    "rxh": [
        "2"
    ],
    "dis": [
        "m"
    ],
    "txw": [
        "0.1"
    ],
    "txg": [
        "2.14"
    ],
    "rxg": [
        "2.14"
    ],
    "pm": [
        "1"
    ],
    "pe": [
        "1"
    ],
    "res": [
        "30"
    ],
    "rad": [
        "6"
    ],
    "out": [
        "2",
        "2"
    ],
    "rxs": [
        "-95"
    ],
    "ant": [
        "38"
    ],
    "azi": [
        "0"
    ],
    "bwi": [
        "0.1"
    ],
    "ber": [
        "0"
    ],
    "clm": [
        "0"
    ],
    "cli": [
        "5"
    ],
    "cll": [
        "2"
    ],
    "fbr": [
        "0"
    ],
    "hbw": [
        "0"
    ],
    "ked": [
        "0"
    ],
    "mod": [
        "0"
    ],
    "nam": [
        "DRAKES_ISLAND"
    ],
    "net": [
        "DEVON"
    ],
    "pol": [
        "v"
    ],
    "ter": [
        "5"
    ],
    "tlt": [
        "0"
    ],
    "vbw": [
        "0"
    ],
    "rel": [
        "90"
    ],
    "rlat": [
        "50.355108"
    ],
    "rlon": [
        "-4.12"
    ],
    "nf": [
        "-120"
    ],
    "mat": [
        "0.1"
    ]
})


// The points API performs multiple point-to-point calculations back to a receiver.
// It's comparable to "best server" except it does not require a pre-defined network to exist at the server making it suitable for dynamic applications such as vehicles or tactical / de-centralised networks.
// 
// A typical use case for this API would be a mobile network of n radios (Tx) moving across an area which need to be tested from a fixed point (Rx). In this case the receiver is defined as rlat/rlon/rxh and the transmitters are defined as an array of tuples in brackets (latitude,longitude,height).
// 
// Antenna patterns are ignored for points but gains for Rx and Tx can be set.
// Other parameters such as models and environmentals are consistent for all points.

@name("Points (Point-to-n-Points)")
POST "https://us.cloudrf.com/API/points"
"Content-Type": "application/x-www-form-urlencoded"
data({
    "uid": [
        "101"
    ],
    "key": [
        "IBIZA.DEMO.KEY"
    ],
    "frq": [
        "2450"
    ],
    "rxh": [
        "2"
    ],
    "dis": [
        "m"
    ],
    "txw": [
        "0.1"
    ],
    "txg": [
        "2.14"
    ],
    "rxg": [
        "2.14"
    ],
    "pm": [
        "1"
    ],
    "pe": [
        "2"
    ],
    "res": [
        "30"
    ],
    "out": [
        "2",
        "2"
    ],
    "rxs": [
        "-95"
    ],
    "ant": [
        "39"
    ],
    "bwi": [
        "0.1"
    ],
    "cll": [
        "2"
    ],
    "fbr": [
        "0"
    ],
    "ked": [
        "0"
    ],
    "mod": [
        "0"
    ],
    "nam": [
        "DRONE"
    ],
    "net": [
        "IBIZA"
    ],
    "pol": [
        "v"
    ],
    "rel": [
        "90"
    ],
    "rlat": [
        "38.919253"
    ],
    "rlon": [
        "1.447634"
    ],
    "mat": [
        "1.0"
    ],
    "points": [
        "(38.91,1.4585,2),(38.9,1.4585,2),(38.89,1.4585,2)"
    ]
})


// Merge different sites into a super layer. Overlapping colours are automatically resolved and the strongest promoted.
// Please be patient as geo-rectifying and re-aligning thousands of pixels from different, sometimes large, images can take a wee while. 
// 
// ![Mesh Coverage](https://cloudrf.com/files/mesh_demo.jpg "Mesh coverage")
// 
// # Method 1 - Network name
// 
// Pass the name of the network you would like to mesh with the 'network=' parameter.
// /?uid=1234&network=emergency_network
// 
// # Method 2 - Site names
// 
// Pass the names of the sites you would like to mesh with the 'calcs=' parameter
// /?uid=1234&calcs=1512111201_repeater1,1512111202_repeater2,1512111203_repeater3
// 
// # Common errors
// 
// Sites with different resolutions eg. 1200/3600. All must use the same.
// Sites that are more than 15 degrees (lat/lon) apart
// Using less than 2 sites. Must be a minimum of two.
// Mixing colour schemas eg. Rainbow/reds. All must use the same.

@name("Mesh (Super layer)")
POST "https://cloudrf.com/API/mesh/"
"Content-Type": "application/x-www-form-urlencoded"
data({
    "uid": [
        "21531"
    ],
    "network": [
        "PLYMOUTH"
    ],
    "name": [
        "mesh"
    ],
    "kmz": [
        "1"
    ]
})


// Analyse sites within a network channel to determine the best server at a given location. Each site will be dynamically allocated a monochrome colour from a palette.
// 
// ![Mesh Coverage](https://cloudrf.com/files/interference_demo.jpg "Mesh coverage")
// 
// # Method 1 - Network name
// 
// Pass the name of the network you would like to mesh with the 'network=' parameter.
// /?uid=1234&network=emergency_network
// 
// # Common errors
// 
// Sites that are more than 15 degrees (lat/lon) apart
// Using less than 2 sites. Must be a minimum of two.
// Mixing colour schemas eg. Rainbow/reds. All must use the same.

@name("Interference analysis")
POST "https://cloudrf.com/API/interference/"
"Content-Type": "application/x-www-form-urlencoded"
data({
    "uid": [
        "21531"
    ],
    "network": [
        "PLYMOUTH"
    ],
    "name": [
        "QRM"
    ],
    "kmz": [
        "1"
    ]
})


// Query your networks to find the best server for a customer. A CloudRF account and previously generated area coverage calculations are necessary to use the best server functionality!
// The returned JSON is an array of Path Profile reports (see Path Profile Analysis examples).
// 
// ![Best server](https://cloudrf.com/files/bestserverdemo.jpg "Best server")
// 
// A Python example client is here: https://github.com/Cloud-RF/CloudRF-API-clients/

@name("Best server (Coverage checker)")
POST "https://cloudrf.com/API/network/"
"Content-Type": "application/x-www-form-urlencoded"
data({
    "uid": [
        "21531"
    ],
    "key": [
        "b353f1ceae63fd07931722b5f39e7bd87a1b138d"
    ],
    "net": [
        "PLYMOUTH"
    ],
    "lat": [
        "50.356"
    ],
    "lon": [
        "-4.154237"
    ],
    "rxh": [
        "2"
    ],
    "rxg": [
        "2.15"
    ]
})



