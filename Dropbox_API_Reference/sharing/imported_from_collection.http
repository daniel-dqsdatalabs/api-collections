#!/usr/bin/env dothttp

// [add_file_member](https://www.dropbox.com/developers/documentation/http/documentation#sharing-add_file_member)
// 
// scope: `sharing.write`
// 
// Adds specified members to a file.

@name("add_file_member")
POST "https://api.dropboxapi.com/2/sharing/add_file_member"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "file": "id:3kmLmQFnf1AAAAAAAAAAAw",
    "members": [
        {
            ".tag": "email",
            "email": "justin@example.com"
        }
    ],
    "custom_message": "This is a custom message about ACME.doc",
    "quiet": false,
    "access_level": "viewer",
    "add_message_as_comment": false
})


// [add_folder_member](https://www.dropbox.com/developers/documentation/http/documentation#sharing-add_folder_member)
// 
// scope: `sharing.write`
// 
// Allows an owner or editor (if the ACL update policy allows) of a shared folder to add another member.
// For the new member to get access to all the functionality for this folder, you will need to call `mount_folder` on their behalf.

@name("add_folder_member")
POST "https://api.dropboxapi.com/2/sharing/add_folder_member"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "shared_folder_id": "84528192421",
    "members": [
        {
            "member": {
                ".tag": "email",
                "email": "justin@example.com"
            },
            "access_level": "editor"
        },
        {
            "member": {
                ".tag": "dropbox_id",
                "dropbox_id": "dbid:AAEufNrMPSPe0dMQijRP0N_aZtBJRm26W4Q"
            },
            "access_level": "viewer"
        }
    ],
    "quiet": false,
    "custom_message": "Documentation for launch day"
})


// [check_job_status](https://www.dropbox.com/developers/documentation/http/documentation#sharing-check_job_status)
// 
// scope: `sharing.write`
// 
// Returns the status of an asynchronous job.

@name("check_job_status")
POST "https://api.dropboxapi.com/2/sharing/check_job_status"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "async_job_id": "34g93hh34h04y384084"
})


// [check_remove_member_job_status](https://www.dropbox.com/developers/documentation/http/documentation#sharing-check_remove_member_job_status)
// 
// scope: `sharing.write`
// 
// Returns the status of an asynchronous job for sharing a folder.

@name("check_remove_member_job_status")
POST "https://api.dropboxapi.com/2/sharing/check_remove_member_job_status"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "async_job_id": "34g93hh34h04y384084"
})


// [check_share_job_status](https://www.dropbox.com/developers/documentation/http/documentation#sharing-check_share_job_status)
// 
// scope: `sharing.write`
// 
// Returns the status of an asynchronous job for sharing a folder.

@name("check_share_job_status")
POST "https://api.dropboxapi.com/2/sharing/check_share_job_status"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "async_job_id": "34g93hh34h04y384084"
})


// [get_file_metadata](https://www.dropbox.com/developers/documentation/http/documentation#sharing-get_file_metadata)
// 
// scope: `sharing.read`
// 
// Returns shared file metadata.

@name("get_file_metadata")
POST "https://api.dropboxapi.com/2/sharing/get_file_metadata"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "file": "id:3kmLmQFnf1AAAAAAAAAAAw",
    "actions": []
})


// [get_file_metadata/batch](https://www.dropbox.com/developers/documentation/http/documentation#sharing-get_file_metadata-batch)
// 
// scope: `sharing.read`
// 
// Returns shared file metadata.

@name("get_file_metadata/batch")
POST "https://api.dropboxapi.com/2/sharing/get_file_metadata/batch"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "files": [
        "id:3kmLmQFnf1AAAAAAAAAAAw",
        "id:VvTaJu2VZzAAAAAAAAAADQ"
    ],
    "actions": []
})


// [get_folder_metadata](https://www.dropbox.com/developers/documentation/http/documentation#sharing-get_folder_metadata)
// 
// scope: `sharing.read`
// 
// Returns shared folder metadata by its folder ID.

@name("get_folder_metadata")
POST "https://api.dropboxapi.com/2/sharing/get_folder_metadata"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "shared_folder_id": "84528192421",
    "actions": []
})


// [get_shared_link_file](https://www.dropbox.com/developers/documentation/http/documentation#sharing-get_shared_link_file)
// 
// scope: `sharing.read`
// 
// Download the shared link's file from a user's Dropbox.

@name("get_shared_link_file")
POST "https://content.dropboxapi.com/2/sharing/get_shared_link_file"
"Dropbox-API-Arg": "{
    "url": "https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0", 
    "path": "/Prime_Numbers.txt"
}"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"


// [get_shared_link_metadata](https://www.dropbox.com/developers/documentation/http/documentation#sharing-get_shared_link_metadata)
// 
// scope: `sharing.read`
// 
// Get the shared link's metadata.

@name("get_shared_link_metadata")
POST "https://api.dropboxapi.com/2/sharing/get_shared_link_metadata"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "url": "https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0",
    "path": "/Prime_Numbers.txt"
})


// [list_file_members](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_file_members)
// 
// scope: `sharing.read`
// 
// Use to obtain the members who have been invited to a file, both inherited and uninherited members.

@name("list_file_members")
POST "https://api.dropboxapi.com/2/sharing/list_file_members"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "file": "id:3kmLmQFnf1AAAAAAAAAAAw",
    "include_inherited": true,
    "limit": 100
})


// [list_file_members/batch](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_file_members-batch)
// 
// scope: `sharing.read`
// 
// Get members of multiple files at once. The arguments to this route are more limited, and the limit on query result size per file is more strict. To customize the results more, use the individual file endpoint.
// Inherited users and groups are not included in the result, and permissions are not returned for this endpoint.

@name("list_file_members/batch")
POST "https://api.dropboxapi.com/2/sharing/list_file_members/batch"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "files": [
        "id:3kmLmQFnf1AAAAAAAAAAAw",
        "id:VvTaJu2VZzAAAAAAAAAADQ"
    ],
    "limit": 10
})


// [list_file_members/continue](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_file_members-continue)
// 
// scope: `sharing.read`
// 
// Once a cursor has been retrieved from `list_file_members` or `list_file_members/batch`, use this to paginate through all shared file members.

@name("list_file_members/continue")
POST "https://api.dropboxapi.com/2/sharing/list_file_members/continue"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "cursor": "ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu"
})


// [list_folder_members/continue](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_folder_members-continue)
// 
// scope: `sharing.read`
// 
// Once a cursor has been retrieved from `list_folder_members`, use this to paginate through all shared folder members.

@name("list_folder_members/continue")
POST "https://api.dropboxapi.com/2/sharing/list_folder_members/continue"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "cursor": "ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu"
})


// [list_folders](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_folders)
// 
// scope: `sharing.read`
// 
// Return the list of all shared folders the current user has access to.

@name("list_folders")
POST "https://api.dropboxapi.com/2/sharing/list_folders"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "limit": 100,
    "actions": []
})


// [list_folders/continue](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_folders-continue)
// 
// scope: `sharing.read`
// 
// Once a cursor has been retrieved from `list_folders`, use this to paginate through all shared folders. The cursor must come from a previous call to `list_folders` or `list_folders/continue`.

@name("list_folders/continue")
POST "https://api.dropboxapi.com/2/sharing/list_folders/continue"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "cursor": "ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu"
})


// [list_mountable_folders](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_mountable_folders)
// 
// scope: `sharing.read`
// 
// Return the list of all shared folders the current user can mount or unmount.

@name("list_mountable_folders")
POST "https://api.dropboxapi.com/2/sharing/list_mountable_folders"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "limit": 100,
    "actions": []
})


// [list_mountable_folders/continue](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_mountable_folders-continue)
// 
// scope: `sharing.read`
// 
// Once a cursor has been retrieved from `list_mountable_folders`, use this to paginate through all mountable shared folders. The cursor must come from a previous call to `list_mountable_folders` or `list_mountable_folders/continue`.

@name("list_mountable_folders/continue")
POST "https://api.dropboxapi.com/2/sharing/list_mountable_folders/continue"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "cursor": "ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu"
})


// [list_received_files](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_received_files)
// 
// scope: `sharing.read`
// 
// Returns a list of all files shared with current user.
//  Does not include files the user has received via shared folders, and does  not include unclaimed invitations.

@name("list_received_files")
POST "https://api.dropboxapi.com/2/sharing/list_received_files"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "limit": 100,
    "actions": []
})


// [list_received_files/continue](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_received_files-continue)
// 
// scope: `sharing.read`
// 
// Get more results with a cursor from `list_received_files`.

@name("list_received_files/continue")
POST "https://api.dropboxapi.com/2/sharing/list_received_files/continue"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "cursor": "AzJJbGlzdF90eXBdofe9c3RPbGlzdGFyZ3NfYnlfZ2lkMRhcbric7Rdog9emfGRlc2MCRWxpbWl0BGRId"
})


// [list_shared_links](https://www.dropbox.com/developers/documentation/http/documentation#sharing-list_shared_links)
// 
// scope: `sharing.read`
// 
// List shared links of this user.
// If no path is given, returns a list of all shared links for the current user.
// If a non-empty path is given, returns a list of all shared links that allow access to the given path - direct links to the given path and links to parent folders of the given path. Links to parent folders can be suppressed by setting direct_only to true.

@name("list_shared_links")
POST "https://api.dropboxapi.com/2/sharing/list_shared_links"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "cursor": "ZtkX9_EHj3x7PMkVuFIhwKYXEpwpLwyxp9vMKomUhllil9q7eWiAu"
})


// [modify_shared_link_settings](https://www.dropbox.com/developers/documentation/http/documentation#sharing-modify_shared_link_settings)
// 
// scope: `sharing.write`
// 
// Modify the shared link's settings.
// If the requested visibility conflict with the shared links policy of the team or the shared folder (in case the linked file is part of a shared folder) then the `LinkPermissions.resolved_visibility` of the returned `SharedLinkMetadata` will reflect the actual visibility of the shared link and the `LinkPermissions.requested_visibility` will reflect the requested visibility.

@name("modify_shared_link_settings")
POST "https://api.dropboxapi.com/2/sharing/modify_shared_link_settings"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "url": "https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0",
    "settings": {
        "requested_visibility": "public",
        "audience": "public",
        "access": "viewer"
    },
    "remove_expiration": false
})


// [mount_folder](https://www.dropbox.com/developers/documentation/http/documentation#sharing-mount_folder)
// 
// scope: `sharing.write`
// 
// The current user mounts the designated folder.
// Mount a shared folder for a user after they have been added as a member. Once mounted, the shared folder will appear in their Dropbox.

@name("mount_folder")
POST "https://api.dropboxapi.com/2/sharing/mount_folder"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "shared_folder_id": "84528192421"
})


// [relinquish_file_membership](https://www.dropbox.com/developers/documentation/http/documentation#sharing-relinquish_file_membership)
// 
// scope: `sharing.write`
// 
// The current user relinquishes their membership in the designated file. Note that the current user may still have inherited access to this file through the parent folder.

@name("relinquish_file_membership")
POST "https://api.dropboxapi.com/2/sharing/relinquish_file_membership"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "file": "id:3kmLmQFnf1AAAAAAAAAAAw"
})


// [relinquish_folder_membership](https://www.dropbox.com/developers/documentation/http/documentation#sharing-relinquish_folder_membership)
// 
// scope: `sharing.write`
// 
// The current user relinquishes their membership in the designated shared folder and will no longer have access to the folder.  A folder owner cannot relinquish membership in their own folder.
// This will run synchronously if leave_a_copy is false, and asynchronously if leave_a_copy is true.

@name("relinquish_folder_membership")
POST "https://api.dropboxapi.com/2/sharing/relinquish_folder_membership"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "shared_folder_id": "84528192421",
    "leave_a_copy": false
})


// [remove_file_member_2](https://www.dropbox.com/developers/documentation/http/documentation#sharing-remove_file_member_2)
// 
// scope: `sharing.write`
// 
// Removes a specified member from the file.

@name("remove_file_member_2")
POST "https://api.dropboxapi.com/2/sharing/remove_file_member_2"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "file": "id:3kmLmQFnf1AAAAAAAAAAAw",
    "member": {
        ".tag": "email",
        "email": "justin@example.com"
    }
})


// [remove_folder_member](https://www.dropbox.com/developers/documentation/http/documentation#sharing-remove_folder_member)
// 
// scope: `sharing.write`
// 
// Allows an owner or editor (if the ACL update policy allows) of a shared folder to remove another member.

@name("remove_folder_member")
POST "https://api.dropboxapi.com/2/sharing/remove_folder_member"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "shared_folder_id": "84528192421",
    "member": {
        ".tag": "email",
        "email": "justin@example.com"
    },
    "leave_a_copy": false
})


// [revoke_shared_link](https://www.dropbox.com/developers/documentation/http/documentation#sharing-revoke_shared_link)
// 
// scope: `sharing.write`
// 
// Revoke a shared link.
// Note that even after revoking a shared link to a file, the file may be accessible if there are shared links leading to any of the file parent folders. To list all shared links that enable access to a specific file, you can use the `list_shared_links` with the file as the `ListSharedLinksArg.path` argument.

@name("revoke_shared_link")
POST "https://api.dropboxapi.com/2/sharing/revoke_shared_link"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "url": "https://www.dropbox.com/s/2sn712vy1ovegw8/Prime_Numbers.txt?dl=0"
})


// [set_access_inheritance](https://www.dropbox.com/developers/documentation/http/documentation#sharing-set_access_inheritance)
// 
// scope: `sharing.write`
// 
// Change the inheritance policy of an existing Shared Folder. Only permitted for shared folders in a shared team root.
// If a `ShareFolderLaunch.async_job_id` is returned, you'll need to call `check_share_job_status` until the action completes to get the metadata for the folder.

@name("set_access_inheritance")
POST "https://api.dropboxapi.com/2/sharing/set_access_inheritance"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
json({
    "shared_folder_id": "84528192421",
    "access_inheritance": "inherit"
})


// [share_folder](https://www.dropbox.com/developers/documentation/http/documentation#sharing-share_folder)
// 
// scope: `sharing.write`
// 
// Share a folder with collaborators.
// Most sharing will be completed synchronously. Large folders will be completed asynchronously. To make testing the async case repeatable, set `ShareFolderArg.force_async`.
// If a `ShareFolderLaunch.async_job_id` is returned, you'll need to call `check_share_job_status` until the action completes to get the metadata for the folder.

@name("share_folder")
POST "https://api.dropboxapi.com/2/sharing/share_folder"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "path": "/example/workspace",
    "acl_update_policy": "editors",
    "force_async": false,
    "member_policy": "team",
    "shared_link_policy": "members",
    "access_inheritance": "inherit"
})


// [transfer_folder](https://www.dropbox.com/developers/documentation/http/documentation#sharing-transfer_folder)
// 
// scope: `sharing.write`
// 
// Transfer ownership of a shared folder to a member of the shared folder.
// User must have `AccessLevel.owner` access to the shared folder to perform a transfer.

@name("transfer_folder")
POST "https://api.dropboxapi.com/2/sharing/transfer_folder"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "shared_folder_id": "84528192421",
    "to_dropbox_id": "dbid:AAEufNrMPSPe0dMQijRP0N_aZtBJRm26W4Q"
})


// [unmount_folder](https://www.dropbox.com/developers/documentation/http/documentation#sharing-unmount_folder)
// 
// scope: `sharing.write`
// 
// The current user unmounts the designated folder. They can re-mount the folder at a later time using `mount_folder`.

@name("unmount_folder")
POST "https://api.dropboxapi.com/2/sharing/unmount_folder"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "shared_folder_id": "84528192421"
})


// [unshare_file](https://www.dropbox.com/developers/documentation/http/documentation#sharing-unshare_file)
// 
// scope: `sharing.write`
// 
// Remove all members from this file. Does not remove inherited members.

@name("unshare_file")
POST "https://api.dropboxapi.com/2/sharing/unshare_file"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "file": "id:3kmLmQFnf1AAAAAAAAAAAw"
})


// [unshare_folder](https://www.dropbox.com/developers/documentation/http/documentation#sharing-unshare_folder)
// 
// scope: `sharing.write`
// 
// Allows a shared folder owner to unshare the folder.
// You'll need to call `check_job_status` to determine if the action has completed successfully.

@name("unshare_folder")
POST "https://api.dropboxapi.com/2/sharing/unshare_folder"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "shared_folder_id": "84528192421",
    "leave_a_copy": false
})


// [update_file_member](https://www.dropbox.com/developers/documentation/http/documentation#sharing-update_file_member)
// 
// scope: `sharing.write`
// 
// Changes a member's access on a shared file.

@name("update_file_member")
POST "https://api.dropboxapi.com/2/sharing/update_file_member"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "file": "id:3kmLmQFnf1AAAAAAAAAAAw",
    "member": {
        ".tag": "email",
        "email": "justin@example.com"
    },
    "access_level": "viewer"
})


// [update_folder_member](https://www.dropbox.com/developers/documentation/http/documentation#sharing-update_folder_member)
// 
// scope: `sharing.write`
// 
// Allows an owner or editor of a shared folder to update another member's permissions.

@name("update_folder_member")
POST "https://api.dropboxapi.com/2/sharing/update_folder_member"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "shared_folder_id": "84528192421",
    "member": {
        ".tag": "email",
        "email": "justin@example.com"
    },
    "access_level": "editor"
})


// [update_folder_policy](https://www.dropbox.com/developers/documentation/http/documentation#sharing-update_folder_policy)
// 
// scope: `sharing.write`
// 
// Update the sharing policies for a shared folder.
// User must have `AccessLevel.owner` access to the shared folder to update its policies.

@name("update_folder_policy")
POST "https://api.dropboxapi.com/2/sharing/update_folder_policy"
"Content-Type": "application/json"
"Dropbox-API-Path-Root": "{".tag": "namespace_id", "namespace_id": "2"}"
"Dropbox-API-Select-User": "dbmid:FDFSVF-DFSDF"
"Dropbox-API-Select-Admin": "dbmid:FDFSVF-DFSDF"
json({
    "shared_folder_id": "84528192421",
    "member_policy": "team",
    "acl_update_policy": "owner",
    "shared_link_policy": "members"
})



