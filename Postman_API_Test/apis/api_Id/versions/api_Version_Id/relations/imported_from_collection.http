#!/usr/bin/env dothttp

// This call fetches all the relations which are linked to the specified API version along with their details.
// 
// The response will contain a `relations` object which lists all the relation types which are linked to the API version. Each of the relation type will be an object which details the relations of this type. 
// 
// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.

@name("Get linked relations")
GET "https://{{baseUrl}}/apis/:apiId/versions/:apiVersionId/relations"


// This call allows you to add existing Postman entities as new relations to an API. The request body should contain the relations to be created along with an array of entity IDs. 
// 
// <table>
//   <tr>
//     <th>Relation</th>
//     <th>Entity ID type</th>
//   <tr>
//   <tr>
//     <td>contracttest</td>
//     <td>Collection UIDs</td>
//   </tr>
//   <tr>
//     <td>integrationtest</td>
//     <td>Collection UIDs</td>
//   </tr>
//   <tr>
//     <td>documentation</td>
//     <td>Collection UIDs</td>
//   </tr>
//   <tr>
//     <td>testsuite</td>
//     <td>Collection UIDs</td>
//   </tr>
//   <tr>
//     <td>environment</td>
//     <td>Environment UIDs</td>
//   </tr>
//   <tr>
//     <td>mock</td>
//     <td>Mock IDs</td>
//   </tr>
//   <tr>
//     <td>monitor</td>
//     <td>Monitor IDs</td>
//   </tr>
// </table>
// 
// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.

@name("Create relations")
POST "https://{{baseUrl}}/apis/:apiId/versions/:apiVersionId/relations"
"Content-Type": "application/json"
json({
    "contracttest": [
        "collection-uid-1"
    ],
    "documentation": [
        "collection-uid-3"
    ],
    "mock": [
        "mock-uid-1"
    ],
    "testsuite": [
        "collection-uid-1",
        "collection-uid-2"
    ]
})



