#!/usr/bin/env dothttp

// This call fetches a single schema having the specified id.
// 
// Response contains a `schema` object with all the details related to the schema, namely, `id`, `language`, `type`, `schema` etc. 
// 
// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.

@name("Get Schema")
GET "https://{{baseUrl}}/apis/:apiId/versions/:apiVersionId/schemas/:schemaId"


// This call updates an existing schema.
// 
// Request body should contain a `schema` object which should atleast have these properties with `string` values:
// 
// - **`type`**: Allowed types are `openapi3`, `openapi2`, `openapi1`, `raml` and `graphql`.
// - **`language`** : Allowed languages are `json` and `yaml` for OpenAPI and RAML schema types. GraphQL schema type accepts only `graphql` language.
// - **`schema`**: Optional. If passed, must be the content of the schema as a `string`.
// 
// Response contains a `schema` object with all the details related to the created schema, namely, `id`, `language`, `type` etc. 
// 
// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.

@name("Update Schema")
PUT "https://{{baseUrl}}/apis/:apiId/versions/:apiVersionId/schemas/:schemaId"
"Content-Type": "application/json"
json({
    "schema": {
        "language": "json",
        "schema": "{
  \"openapi\": \"3.0.0\",
  \"info\": null,
  \"version\": \"v1.0\",
  \"title\": \"APi\",
  \"servers\": [
    {
      \"url\": \"http://localhost:3000\"
    }
  ],
  \"paths\": {
    \"/user\": {
      \"get\": {
        \"summary\": \"Returns details about a particular user\",
        \"operationId\": \"listUser\",
        \"tags\": [
          \"user\"
        ],
        \"parameters\": [
          {
            \"name\": \"id\",
            \"in\": \"query\",
            \"description\": \"ID of the user\",
            \"required\": true,
            \"schema\": {
              \"type\": \"integer\",
              \"format\": \"int32\"
            }
          }
        ],
        \"responses\": {
          \"200\": {
            \"description\": \"Details about a user by ID\",
            \"headers\": {
              \"x-next\": {
                \"description\": \"A link to the next page of responses\",
                \"schema\": {
                  \"type\": \"string\"
                }
              }
            },
            \"content\": {
              \"application/json\": {
                \"schema\": {
                  \"$ref\": \"\\\\'#/components/schemas/User\\\\'\"
                }
              }
            }
          },
          \"default\": {
            \"description\": \"Unexpected error\",
            \"content\": {
              \"application/json\": {
                \"schema\": {
                  \"$ref\": \"\\\\'#/components/schemas/Error\\\\'\"
                }
              }
            }
          }
        }
      }
    }
  },
  \"components\": {
    \"schemas\": {
      \"User\": {
        \"type\": \"object\",
        \"required\": [
          \"id\",
          \"name\"
        ],
        \"properties\": {
          \"id\": {
            \"type\": \"integer\",
            \"format\": \"int64\"
          },
          \"name\": {
            \"type\": \"string\"
          },
          \"tag\": {
            \"type\": \"string\"
          }
        }
      },
      \"Error\": {
        \"type\": \"object\",
        \"required\": [
          \"code\",
          \"message\"
        ],
        \"properties\": {
          \"code\": {
            \"type\": \"integer\",
            \"format\": \"int32\"
          },
          \"message\": {
            \"type\": \"string\"
          }
        }
      }
    }
  }
}",
        "type": "openapi3"
    }
})


// This call creates a collection and links it to an API as one or multiple relations. 
// 
// Request body requires two keys:
// - `name` - Name of the collection to be created.
// - `relations` - A list of relation(s) to be created.
// 
// The allowed relation types are `contracttest`, `integrationtest`, `testsuite`, and `documentation`.
// 
// > Requires <a href="#authentication">API Key</a> as `X-Api-Key` request header or `apikey` URL query parameter.

@name("Create collection from schema")
POST "https://{{baseUrl}}/apis/:apiId/versions/:apiVersionId/schemas/:schemaId/collections"
"Content-Type": "application/json"
? "workspace"= "{{workspaceId}}"
json({
    "name": "My generated collection",
    "relations": [
        {
            "type": "contracttest"
        }
    ]
})



