#!/usr/bin/env dothttp

@name("Retrieve Bank Accounts")
GET "https://{{base_url}}/banking/v2/banks/:bankId/accounts"
"Content-Type": "application/json"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"Authorization": "{{Authorization}}"
"X-Company-Id": "{{companyId}}"


// Cash balances are returned for all the bank accounts that have been connected to the company. 
// 
// Balances can be queried by bankId and accountId
// 
// <h2> Query Parameters </h2>
// 
// | Field | Type | Description |
// |-------|------|--------------|
// | bankId | integer| Unique identifier for the bank|
// | pg | integer | Page offset of results|
// 
// <h2> Response </h2>
// 
// | Field | Type | Description |
// |-------|------|--------------|
// | id | string | Balance Id |
// | accountId | string| Unique identifier for the account |
// | bankId | integer| Unique identifier for the bank |
// | currency | string | Account currency |
// | date | datetime | Balance date |
// | amount | integer | Balance amount |
// | type | string | Transaction type {DEBIT,CREDIT}|
// | status | string | Balance status {CLOSINGAVAILABLE CLOSINGBOOKED, EXPECTED, FORWARDAVAILABLE INFORMATION, INTERIMAVAILABLE, INTERIMBOOKED, OPENINGAVAILABLE, OPENINGBOOKED, PREVIOUSLYCLOSEDBOOKED}|
// | externalId | string | An Id linked to an external source|
// | source | string | Source of data import {MANUALIMPORT, OPENBANKING}|
// 
// <h2> Error Messages </h2>
// 
// | Condition | Response Status | Response Body |
// |-----------| ----------------| ------------- | 
// | Invalid bankId | 404 Not Found | |
// | Invalid accountId | 404 Not Found | |
// | Invalid partnerId | 403 Forbidden | |
// | Invalid companyId | 403 Forbidden | |
// | Invalid pageId | 400 Bad Request | |

@name("Retrieve Bank Balances")
GET "https://{{base_url}}/banking/v2/banks/:bankId/accounts/:accountId/balances"
"Content-Type": "application/json"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"Authorization": "{{Authorization}}"
"X-Company-Id": "{{companyId}}"


// All bank transactions are returned for all the accounts that the user has connected. If dates are specified, then only transactions for specific dates are downloaded. 
// 
// Bank transactions can be queried by bankId and accountId.
// 
// <h2> Query Parameters </h2>
// 
// | Field | Type | Description |
// |-------|------|--------------|
// | bankId | integer| Unique identifier for the bank|
// | accountId | integer| Unique identifier for the bank account |
// | pg | integer | Page offset of results|
// 
// <h2> Response </h2>
// 
// | Field | Type | Description |
// |-------|------|--------------|
// | id | string | Unique identifier for the transaction |
// | accountId | string| Unique identifier for the account |
// | bankId | integer| Unique identifier for the bank |
// | bookingDate | datetime | Booking date for the transaction |
// | valueDate | datetime | Value date for the transaction |
// | transactionCode | string | Specifies the transaction family within a domain|
// | transactionSubCode | string | Sub code of the transaction |
// | proprietaryCode | string |Proprietary bank transaction code to identify the underlying transaction |
// | proprietarySubCode | string |Proprietary sub code of the trransaction |
// | reference | string | Transaction reference |
// | description | string | Description provided in the transaction |
// | currency | string | Account currency |
// | amount | integer | Balance amount |
// | type | string | Transaction type {DEBIT,CREDIT}|
// | status | string | Balance status {CLOSINGAVAILABLE CLOSINGBOOKED, EXPECTED, FORWARDAVAILABLE INFORMATION, INTERIMAVAILABLE, INTERIMBOOKED, OPENINGAVAILABLE, OPENINGBOOKED, PREVIOUSLYCLOSEDBOOKED}|
// | merchant | JSON Object | Details of the merchant |
// | merchant->id | string | Unique identifier for the merchant |
// | merchant->name | string | Name of the merchant |
// | merchant->category | string | Business category that the merchant belongs to |
// | merchant->categoryCode | integer | Category Code |
// | merchant->addressLine | string | Address of the merchant (if availablbe)
// | merchant->details | JSON object | Further details for the merchant |
// | merchant->details->source | string | Source for how the merchant was identified {BANK, MODEL, USER} |
// | category | JSON Object | Details of the transaction category |
// | category->id | integer | Unique identifier for the category |
// | category->name | string | Name of the category |
// | category->details | JSON object | Further details for the category |
// | category->details->source | string | Source for how the category was identified {BANK, MODEL, USER} |
// | externalId | string | An Id linked to an external source|
// | source | string | Source of data import {MANUALIMPORT, OPENBANKING}|
// 
// <h2> Error Messages </h2>
// 
// | Condition | Response Status | Response Body |
// |-----------| ----------------| ------------- | 
// | Invalid bankId | 404 Not Found | |
// | Invalid accountId | 404 Not Found | |
// | Invalid partnerId | 403 Forbidden | |
// | Invalid companyId | 403 Forbidden | |
// | Invalid pageId | 400 Bad Request | |

@name("Retrieve Bank Transactions")
GET "https://{{base_url}}/banking/v2/banks/:bankId/accounts/:accountId/transactions"
"Content-Type": "application/json"
"Authorization": "{{Authorization}}"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"X-Company-Id": "{{companyId}}"
? "pg"= "{{pg}}"
? "from"= "{{from}}"
? "to"= "{{to}}"


// Retrieve Bank Account
// 
// This endpoint can be used to retrieve a particular bank account using an account id.

@name("Retrieve Bank Account (by id)")
GET "https://{{base_url}}/banking/v2/banks/:bankId/accounts/:accountId"
"Content-Type": "application/json"
"Authorization": "{{Authorization}}"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"X-Company-Id": "{{companyId}}"


// Retrieve Bank Balances
// 
// This endpoint can be used to retrieve a particular bank balance using an account id.

@name("Retrieve Bank Balance (by id)")
GET "https://{{base_url}}/banking/v2/banks/:bankId/accounts/:accountId/balances/:balanceId"
"Content-Type": "application/json"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"Authorization": "{{Authorization}}"
"X-Company-Id": "{{companyId}}"
? "pg"= "{{pg}}"
? "from"= "{{from}}"
? "to"= "{{to}}"


// This endpoint can be used to retrieve a particular bank transaction using a transaction id.
// 
// All bank transactions are returned for all the accounts that the user has connected. If dates are specified, then only transactions for specific dates are downloaded. 
// 
// Bank transactions can be queried by bankId and accountId.
// 
// <h2> Path variables </h2>
// 
// | Field | Type | Description |
// |-------|------|--------------|
// | transactionId | integer| Unique identifier for the transaction |
// 
// <h2> Response </h2>
// 
// | Field | Type | Description |
// |-------|------|--------------|
// | id | string | Unique identifier for the transaction |
// | accountId | string| Unique identifier for the account |
// | bankId | integer| Unique identifier for the bank |
// | bookingDate | datetime | Booking date for the transaction |
// | valueDate | datetime | Value date for the transaction |
// | transactionCode | string | Specifies the transaction family within a domain|
// | transactionSubCode | string | Sub code of the transaction |
// | proprietaryCode | string |Proprietary bank transaction code to identify the underlying transaction |
// | proprietarySubCode | string |Proprietary sub code of the trransaction |
// | reference | string | Transaction reference |
// | description | string | Description provided in the transaction |
// | currency | string | Account currency |
// | amount | integer | Balance amount |
// | type | string | Transaction type {DEBIT,CREDIT}|
// | status | string | Balance status {CLOSINGAVAILABLE CLOSINGBOOKED, EXPECTED, FORWARDAVAILABLE INFORMATION, INTERIMAVAILABLE, INTERIMBOOKED, OPENINGAVAILABLE, OPENINGBOOKED, PREVIOUSLYCLOSEDBOOKED}|
// | merchant | JSON Object | Details of the merchant |
// | merchant->id | string | Unique identifier for the merchant |
// | merchant->name | string | Name of the merchant |
// | merchant->category | string | Business category that the merchant belongs to |
// | merchant->categoryCode | integer | Category Code |
// | merchant->addressLine | string | Address of the merchant (if availablbe)
// | merchant->details | JSON object | Further details for the merchant |
// | merchant->details->source | string | Source for how the merchant was identified {BANK, MODEL, USER} |
// | category | JSON Object | Details of the transaction category |
// | category->id | integer | Unique identifier for the category |
// | category->name | string | Name of the category |
// | category->details | JSON object | Further details for the category |
// | category->details->source | string | Source for how the category was identified {BANK, MODEL, USER} |
// | externalId | string | An Id linked to an external source|
// | source | string | Source of data import {MANUALIMPORT, OPENBANKING}|
// 
// <h2> Error Messages </h2>
// 
// | Condition | Response Status | Response Body |
// |-----------| ----------------| ------------- | 
// | Invalid transactionId | 404 Not Found | |
// | Invalid partnerId | 403 Forbidden | |
// | Invalid companyId | 403 Forbidden | |

@name("Retrieve Bank Transaction (by id)")
GET "https://{{base_url}}/banking/v2/banks/:bankId/accounts/:accountId/transactions/:transactionId"
"Content-Type": "application/json"
"Authorization": "{{Authorization}}"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"X-Company-Id": "{{companyId}}"
? "pg"= "{{pg}}"
? "from"= "{{from}}"
? "to"= "{{to}}"


// Add a bank account
// 
// This endpoint can be used to manually import a bank account and link it to a company.

@name("Add a bank account")
POST "https://{{base_url}}/banking/v2/banks/:bankId/accounts"
"Content-Type": "application/json"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"Authorization": "{{Authorization}}"
"X-Company-Id": "{{companyId}}"
json([
    {
        "currency": "GBP",
        "nickname": "Business Account",
        "account": [
            {
                "schemeName": "IBAN",
                "identification": "GB84BANKIDENTIFICATION",
                "secondaryIdentification": "POS",
                "name": "Debit Account"
            }
        ],
        "externalId": "BANK_NAME_ID"
    }
])


// 'Add Bank Balances' endpoint can be used to add balances to accounts that were added using the ‘Add bank accounts’ endpoint. 
// 
// <h2> Response </h2>
// 
// | Field | Type | Description |
// |-------|------|--------------|
// | id | string | Balance Id |
// | accountId | string| Unique identifier for the account |
// | bankId | integer| Unique identifier for the bank |
// | currency | string | Account currency |
// | date | datetime | Balance data |
// | amount | integer | Balance amount |
// | type | string | Transaction type {DEBIT,CREDIT}|
// | status | string | Balance status {CLOSINGAVAILABLE CLOSINGBOOKED, EXPECTED, FORWARDAVAILABLE INFORMATION, INTERIMAVAILABLE, INTERIMBOOKED, OPENINGAVAILABLE, OPENINGBOOKED, PREVIOUSLYCLOSEDBOOKED}|
// | externalId | string | An Id linked to an external source|
// 
// <h2> Error Messages </h2>
// 
// | Condition | Response Status | Response Body |
// |-----------| ----------------| ------------- | 
// | Invalid bankId | 404 Not Found | |
// | Invalid accountId | 404 Not Found | |
// | Invalid currency | 400 Bad Request | {"message": "Missing/Invalid currency"} |
// | Invalid amount | 400 Bad Request | {"message": "Missing/Invalid amount"} |
// | Invalid status | 400 Bad Request | {"message": "Missing/Invalid status"} |
// | Invalid type (DEBIT/CREDIT) | 400 Bad Request | {"message": "Missing/Invalid type"} |
// | Invalid date (ISO 8601 format) | 400 Bad Request | {"message": "Missing/Invalid bookingDate"} |
// | Adding more than 500 balances | 413 Payload too large | |
// 
// 
// 
// 
// 
// 
// 
// 
// 
//  

@name("Add Bank Balances")
POST "https://{{base_url}}/banking/v2/banks/:bankId/accounts/:accountId/balances"
"Content-Type": "application/json"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"Authorization": "{{Authorization}}"
"X-Company-Id": "{{companyId}}"
json([
    {
        "date": "2020-08-31",
        "amount": "100.00",
        "currency": "GBP",
        "type": "DEBIT",
        "status": "INTERIMAVAILABLE"
    }
])


// Add bank transactions endpoint can be used to add transactions to accounts that are added using the ‘Add bank accounts’ endpoint.
// 
// <h2> Request </h2>
// 
// | Field | Type | Description |
// |-------|------|--------------|
// | id | string | Unique identifier for the transaction |
// | accountId | string| Unique identifier for the account |
// | bankId | integer| Unique identifier for the bank |
// | bookingDate | datetime | Booking date for the transaction |
// | valueDate | datetime | Value date for the transaction |
// | transactionCode | string | Specifies the transaction family within a domain|
// | transactionSubCode | string | Sub code of the transaction |
// | proprietaryCode | string |Proprietary bank transaction code to identify the underlying transaction |
// | proprietarySubCode | string |Proprietary sub code of the trransaction |
// | reference | string | Transaction reference |
// | description | string | Description provided in the transaction |
// | currency | string | Account currency |
// | amount | integer | Balance amount |
// | type | string | Transaction type {DEBIT,CREDIT}|
// | status | string | Balance status {CLOSINGAVAILABLE CLOSINGBOOKED, EXPECTED, FORWARDAVAILABLE, INFORMATION, INTERIMAVAILABLE, INTERIMBOOKED, OPENINGAVAILABLE, OPENINGBOOKED, PREVIOUSLYCLOSEDBOOKED}|
// | merchant->name | string | Name of the merchant |
// | externalId | string | An Id linked to an external source|
// 
// <h2> Error Messages </h2>
// 
// | Condition | Response Status | Response Body |
// |-----------| ----------------| ------------- | 
// | Invalid bankId | 404 Not Found | |
// | Invalid accountId | 404 Not Found | |
// | Invalid currency | 400 Bad Request | {"message": "Missing/Invalid currency"} |
// | Invalid amount | 400 Bad Request | {"message": "Missing/Invalid amount"} |
// | Invalid status | 400 Bad Request | {"message": "Missing/Invalid status"} |
// | Invalid type (DEBIT/CREDIT) | 400 Bad Request | {"message": "Missing/Invalid type"} |
// | Invalid bookingDate (ISO 8601 format) | 400 Bad Request | {"message": "Missing/Invalid bookingDate"} |
// | Invalid valueDate (ISO 8601 format) | 400 Bad Request | {"message": "Missing/Invalid valueDate"} |
// | Adding more than 500 transactions | 413 Payload too large | |

@name("Add Bank Transactions")
POST "https://{{base_url}}/banking/v2/banks/:bankId/accounts/:accountId/transactions"
"Content-Type": "application/json"
"Authorization": "{{Authorization}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"X-Api-Key": "{{X-Api-Key}}"
"X-Company-Id": "{{companyId}}"
json([
    {
        "bookingDate": "2020-09-01",
        "valueDate": "2020-09-01",
        "amount": 1400,
        "currency": "GBP",
        "type": "DEBIT",
        "status": "BOOKED",
        "merchant": {
            "name": "Big suppliers Ltd.",
            "categoryCode": "12345",
            "addressLine": "12345"
        }
    },
    {
        "bookingDate": "2020-01-01",
        "valueDate": "2020-01-01",
        "amount": 100.5,
        "currency": "GBP",
        "type": "CREDIT",
        "status": "BOOKED",
        "merchant": {
            "name": "Invoice - Customer 102",
            "categoryCode": "",
            "addressLine": "2345"
        }
    }
])


// Delete Bank Account endpoint can be used to delete an account that was manually imported. 
// 
// It will also delete the transactions and balances linked to the bank account
// 
// <h2> Path variables </h2>
// 
// | Field | Type | Description |
// |-------|------|--------------|
// | accountId | string | Unique identifier for the bank account|
// 
// <h2> Success </h2>
// 202 Accepted
// 
// <h2> Error Messages </h2>
// 
// | Condition | Response Status | Response Body |
// |-----------| ----------------| ------------- | 
// | Invalid accountId | 404 Not Found | |
// | Invalid partnerId | 403 Forbidden | |
// | Invalid companyId | 403 Forbidden | |

@name("Delete Bank Account (by id)")
DELETE "https://{{base_url}}/banking/v2/banks/:bankId/accounts/:accountId"
"Content-Type": "application/json"
"Authorization": "{{Authorization}}"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"X-Company-Id": "{{companyId}}"


// Delete bank balance endpoint can be used to delete a balance for an account that was manually imported.
// 
// <h2> Path variables </h2>
// 
// | Field | Type | Description |
// |-------|------|--------------|
// | balanceId | string | Unique identifier for balance|
// 
// <h2> Success </h2>
// 202 Accepted
// 
// <h2> Error Messages </h2>
// 
// | Condition | Response Status | Response Body |
// |-----------| ----------------| ------------- | 
// | Invalid balanceId | 404 Not Found | |
// | Invalid partnerId | 403 Forbidden | |
// | Invalid companyId | 403 Forbidden | |

@name("Delete Bank Balance (by id)")
DELETE "https://{{base_url}}/banking/v2/banks/:bankId/accounts/:accountId/balances/:balanceId"
"Content-Type": "application/json"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"Authorization": "{{Authorization}}"
"X-Company-Id": "{{companyId}}"


// Delete Bank Transaction endpoint can be used to delete transactions for an account that was manually imported.
// 
// <h2> Path variables </h2>
// 
// | Field | Type | Description |
// |-------|------|--------------|
// | transactionId | integer| Unique identifier for the transaction |
// 
// <h2> Success </h2>
// 202 Accepted
// 
// <h2> Error Messages </h2>
// 
// | Condition | Response Status | Response Body |
// |-----------| ----------------| ------------- | 
// | Invalid transactionId | 404 Not Found | |
// | Invalid partnerId | 403 Forbidden | |
// | Invalid companyId | 403 Forbidden | |

@name("Delete Bank Transaction (by id)")
DELETE "https://{{base_url}}/banking/v2/banks/:bankId/accounts/:accountId/transactions/:transactions"
"Content-Type": "application/json"
"Authorization": "{{Authorization}}"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"X-Company-Id": "{{companyId}}"


// Put Bank Transactions by Id
// 
// The ‘Put transactions by id’ endpoint can be used to update the category in a particular transaction.
// 
// If the user recategories a transaction to a different category, they can do so using this endpoint.
// 
// <h2> Path variables </h2>
// 
// | Field | Type | Description |
// | ------| ----- | ---------- |
// | transactionId | string | Unique identifier for the transaction|
// 
// <em><strong> updateType </em> "ONE" </strong> will only recategorise a particular transaction
// <br>
// <em><strong> updateType </em> "ALL" </strong> will change all recategorise all similar transactions including past and future transactions

@name("Update category")
PUT "https://{{base_url}}/banking/v2/banks/:bankId/accounts/:accountId/transactions/:transactionId/category"
"Content-Type": "application/json"
"Authorization": "{{Authorization}}"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"X-Company-Id": "{{companyId}}"
json({
    "id": "2e518285-dd03-41f5-a3e9-0592626c56a9",
    "updateType": "ALL"
})


// The ‘Update category’ endpoint can be used to update the merchant in a particular transaction.
// 
// 
// <h2> Path variables </h2>
// 
// | Field | Type | Description |
// | ------| ----- | ---------- |
// | transactionId | string | Unique identifier for the transaction|
// 
// <h2> Request </h2>
// 
// 
// | Field Name | Type | Description |
// |------------|------|-------------|
// | id | string | Unique identifier for the merchant |
// | updateType | string | updateType {"ONE" will only recategorise a particular transaction, "ALL" will change all recategorise all similar transactions including past and future transactions} |
// 
// <h2> Success </h2>
// 204 No content
// 
// <h2> Error messages </h2>
// 
// | Condition | Response Status | Response Body |
// |-----------| ----------------| ------------- | 
// | Invalid transactionId | 404 Not Found | |
// | Invalid merchantId | 404 Not Found | |

@name("Update merchant")
PUT "https://{{base_url}}/banking/v2/banks/:bankId/accounts/:accountId/transactions/:transactionId/merchant"
"Content-Type": "application/json"
"Authorization": "{{Authorization}}"
"X-Api-Key": "{{X-Api-Key}}"
"X-Partner-Id": "{{X-Partner-Id}}"
"X-Company-Id": "{{companyId}}"
json({
    "id": "64b7f5de-d178-4b23-a3a3-4c0783090d91",
    "updateType": "ALL"
})



